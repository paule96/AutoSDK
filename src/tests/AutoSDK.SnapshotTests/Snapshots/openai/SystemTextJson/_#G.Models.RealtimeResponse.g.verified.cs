//HintName: G.Models.RealtimeResponse.g.cs

#nullable enable

namespace G
{
    /// <summary>
    /// The response resource.
    /// </summary>
    public sealed partial class RealtimeResponse
    {
        /// <summary>
        /// The unique ID of the response.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The object type, must be `realtime.response`.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("object")]
        [global::System.Text.Json.Serialization.JsonConverter(typeof(global::G.JsonConverters.RealtimeResponseObjectJsonConverter))]
        public global::G.RealtimeResponseObject? Object { get; set; }

        /// <summary>
        /// The final status of the response (`completed`, `cancelled`, `failed`, or <br/>
        /// `incomplete`).
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("status")]
        [global::System.Text.Json.Serialization.JsonConverter(typeof(global::G.JsonConverters.RealtimeResponseStatusJsonConverter))]
        public global::G.RealtimeResponseStatus? Status { get; set; }

        /// <summary>
        /// Additional details about the status.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("status_details")]
        public global::G.RealtimeResponseStatusDetails? StatusDetails { get; set; }

        /// <summary>
        /// The list of output items generated by the response.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("output")]
        public global::System.Collections.Generic.IList<global::G.RealtimeConversationItem>? Output { get; set; }

        /// <summary>
        /// Usage statistics for the Response, this will correspond to billing. A <br/>
        /// Realtime API session will maintain a conversation context and append new <br/>
        /// Items to the Conversation, thus output from previous turns (text and <br/>
        /// audio tokens) will become the input for later turns.
        /// </summary>
        [global::System.Text.Json.Serialization.JsonPropertyName("usage")]
        public global::G.RealtimeResponseUsage? Usage { get; set; }

        /// <summary>
        /// Additional properties that are not explicitly defined in the schema
        /// </summary>
        [global::System.Text.Json.Serialization.JsonExtensionData]
        public global::System.Collections.Generic.IDictionary<string, object> AdditionalProperties { get; set; } = new global::System.Collections.Generic.Dictionary<string, object>();

        /// <summary>
        /// Initializes a new instance of the <see cref="RealtimeResponse" /> class.
        /// </summary>
        /// <param name="id">
        /// The unique ID of the response.
        /// </param>
        /// <param name="object">
        /// The object type, must be `realtime.response`.
        /// </param>
        /// <param name="status">
        /// The final status of the response (`completed`, `cancelled`, `failed`, or <br/>
        /// `incomplete`).
        /// </param>
        /// <param name="statusDetails">
        /// Additional details about the status.
        /// </param>
        /// <param name="output">
        /// The list of output items generated by the response.
        /// </param>
        /// <param name="usage">
        /// Usage statistics for the Response, this will correspond to billing. A <br/>
        /// Realtime API session will maintain a conversation context and append new <br/>
        /// Items to the Conversation, thus output from previous turns (text and <br/>
        /// audio tokens) will become the input for later turns.
        /// </param>
#if NET7_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.SetsRequiredMembers]
#endif
        public RealtimeResponse(
            string? id,
            global::G.RealtimeResponseObject? @object,
            global::G.RealtimeResponseStatus? status,
            global::G.RealtimeResponseStatusDetails? statusDetails,
            global::System.Collections.Generic.IList<global::G.RealtimeConversationItem>? output,
            global::G.RealtimeResponseUsage? usage)
        {
            this.Id = id;
            this.Object = @object;
            this.Status = status;
            this.StatusDetails = statusDetails;
            this.Output = output;
            this.Usage = usage;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RealtimeResponse" /> class.
        /// </summary>
        public RealtimeResponse()
        {
        }
    }
}