[
  ASRConversationalConfig(class)[Conversational AI],
    ASRQuality(ref)[Conversational AI],
    ASRProvider(ref)[Conversational AI],
    ASRInputFormat(ref)[Conversational AI],
    Keywords(array)[Conversational AI],
      KeywordsItem(string)[Conversational AI],
  ASRQuality(enum)[Conversational AI],
  ASRProvider(enum)[Conversational AI],
  ASRInputFormat(enum)[Conversational AI],
  AddAgentSecretResponseModel(class)[Conversational AI],
    Id(string)[Conversational AI],
    Name(string)[Conversational AI],
  AddChapterResponseModel(class)[studio, projects],
    ChapterWithContentResponseModel(ref)[studio, projects],
  ChapterWithContentResponseModel(class)[studio, projects],
    ChapterId(string)[studio, projects],
    Name(string)[studio, projects],
    LastConversionDateUnix(int)[studio, projects],
    ConversionProgress(double)[studio, projects],
    CanBeDownloaded(bool)[studio, projects],
    ChapterWithContentResponseModelState(enum)[studio, projects],
    ChapterStatisticsResponseModel(ref)[studio, projects],
    LastConversionError(string)[studio, projects],
    ChapterContentResponseModel(ref)[studio, projects],
  ChapterStatisticsResponseModel(class)[studio, projects],
    CharactersUnconverted(int)[studio, projects],
    CharactersConverted(int)[studio, projects],
    ParagraphsConverted(int)[studio, projects],
    ParagraphsUnconverted(int)[studio, projects],
  ChapterContentResponseModel(class)[studio, projects],
    Blocks(array)[studio, projects],
      ChapterContentBlockResponseModel(ref)[studio, projects],
  ChapterContentBlockResponseModel(class)[studio, projects],
    BlockId(string)[studio, projects],
    Nodes(array)[studio, projects],
      NodesItem(anyOf)[studio, projects],
        ChapterContentBlockTtsNodeResponseModel(ref)[studio, projects],
        ChapterContentBlockExtendableNodeResponseModel(ref)[studio, projects],
  ChapterContentBlockTtsNodeResponseModel(class)[],
    ChapterContentBlockTtsNodeResponseModelType(enum)[],
    VoiceId(string)[],
    Text(string)[],
  ChapterContentBlockExtendableNodeResponseModel(class)[],
    ChapterContentBlockExtendableNodeResponseModelType(enum)[],
  AddKnowledgeBaseResponseModel(class)[Conversational AI],
    Id(string)[Conversational AI],
    PromptInjectable(bool)[Conversational AI],
  AddProjectResponseModel(class)[studio, projects],
    ProjectResponseModel(ref)[studio, projects],
  ProjectResponseModel(class)[studio, projects],
    ProjectId(string)[studio, projects],
    Name(string)[studio, projects],
    CreateDateUnix(int)[studio, projects],
    DefaultTitleVoiceId(string)[studio, projects],
    DefaultParagraphVoiceId(string)[studio, projects],
    DefaultModelId(string)[studio, projects],
    LastConversionDateUnix(int)[studio, projects],
    CanBeDownloaded(bool)[studio, projects],
    Title(string)[studio, projects],
    Author(string)[studio, projects],
    Description(string)[studio, projects],
    Genres(array)[studio, projects],
      GenresItem(string)[studio, projects],
    CoverImageUrl(string)[studio, projects],
    ProjectResponseModelTargetAudience(enum)[studio, projects],
    Language(string)[studio, projects],
    ContentType(string)[studio, projects],
    OriginalPublicationDate(string)[studio, projects],
    MatureContent(bool)[studio, projects],
    IsbnNumber(string)[studio, projects],
    VolumeNormalization(bool)[studio, projects],
    ProjectResponseModelState(enum)[studio, projects],
    ProjectResponseModelAccessLevel(enum)[studio, projects],
    ProjectResponseModelFiction(enum)[studio, projects],
    QualityCheckOn(bool)[studio, projects],
    QualityCheckOnWhenBulkConvert(bool)[studio, projects],
    ProjectCreationMetaResponseModel(ref)[studio, projects],
    ProjectResponseModelSourceType(enum)[studio, projects],
    ChaptersEnabled(bool)[studio, projects],
  ProjectCreationMetaResponseModel(class)[studio, projects],
    CreationProgress(double)[studio, projects],
    ProjectCreationMetaResponseModelStatus(enum)[studio, projects],
    ProjectCreationMetaResponseModelType(enum)[studio, projects],
  AddPronunciationDictionaryResponseModel(class)[Pronunciation Dictionary],
    Id(string)[Pronunciation Dictionary],
    Name(string)[Pronunciation Dictionary],
    CreatedBy(string)[Pronunciation Dictionary],
    CreationTimeUnix(int)[Pronunciation Dictionary],
    VersionId(string)[Pronunciation Dictionary],
    VersionRulesNum(int)[Pronunciation Dictionary],
    Description(string)[Pronunciation Dictionary],
  AddPronunciationDictionaryRulesResponseModel(class)[Pronunciation Dictionary],
    Id(string)[Pronunciation Dictionary],
    VersionId(string)[Pronunciation Dictionary],
    VersionRulesNum(int)[Pronunciation Dictionary],
  AddVoiceIVCResponseModel(class)[voices],
    VoiceId(string)[voices],
    RequiresVerification(bool)[voices],
  AddVoiceResponseModel(class)[voices],
    VoiceId(string)[voices],
  AddWorkspaceGroupMemberResponseModel(class)[workspace],
    Status(string)[workspace],
  AddWorkspaceInviteResponseModel(class)[workspace],
    Status(string)[workspace],
  AgentBan(class)[],
    AtUnix(int)[],
    Reason(string)[],
    BanReasonType(ref)[],
  BanReasonType(enum)[],
  AgentCallLimits(class)[Conversational AI],
    AgentConcurrencyLimit(int)[Conversational AI],
    DailyLimit(int)[Conversational AI],
  AgentConfigAPIModelInput(class)[Conversational AI],
    FirstMessage(string)[Conversational AI],
    Language(string)[Conversational AI],
    DynamicVariablesConfig(ref)[Conversational AI],
    PromptAgentInput(ref)[Conversational AI],
  DynamicVariablesConfig(class)[Conversational AI],
    DynamicVariablesConfigDynamicVariablePlaceholders(class)[Conversational AI],
      DynamicVariablePlaceholders(anyOf)[Conversational AI],
        DynamicVariablePlaceholdersVariant1(string)[Conversational AI],
        DynamicVariablePlaceholdersVariant2(double)[Conversational AI],
        DynamicVariablePlaceholdersVariant3(int)[Conversational AI],
        DynamicVariablePlaceholdersVariant4(bool)[Conversational AI],
  PromptAgentInput(class)[Conversational AI],
    Prompt(string)[Conversational AI],
    LLM(ref)[Conversational AI],
    Temperature(double)[Conversational AI],
    MaxTokens(int)[Conversational AI],
    Tools(array)[Conversational AI],
      ToolsItem2(oneOf)[Conversational AI],
        WebhookToolConfigInput(ref)[Conversational AI],
        ClientToolConfigInput(ref)[Conversational AI],
        SystemToolConfig(ref)[Conversational AI],
        PromptAgentInputToolDiscriminator(class)[Conversational AI],
          PromptAgentInputToolDiscriminatorType(enum)[Conversational AI],
    ToolIds(array)[Conversational AI],
      ToolIdsItem(string)[Conversational AI],
    KnowledgeBase(array)[Conversational AI],
      KnowledgeBaseLocator(ref)[Conversational AI],
    CustomLLM(ref)[Conversational AI],
    IgnoreDefaultPersonality(bool)[Conversational AI],
    RagConfig(ref)[Conversational AI],
  LLM(enum)[Conversational AI],
  WebhookToolConfigInput(class)[Conversational AI],
    WebhookToolConfigInputType(enum)[Conversational AI],
    Name(string)[Conversational AI],
    Description(string)[Conversational AI],
    WebhookToolApiSchemaConfigInput(ref)[Conversational AI],
    DynamicVariablesConfig(ref)[Conversational AI],
  WebhookToolApiSchemaConfigInput(class)[Conversational AI],
    Url(string)[Conversational AI],
    WebhookToolApiSchemaConfigInputMethod(enum)[Conversational AI],
    WebhookToolApiSchemaConfigInputPathParamsSchema(class)[Conversational AI],
      LiteralJsonSchemaProperty(ref)[Conversational AI],
    QueryParamsJsonSchema(ref)[Conversational AI],
    ObjectJsonSchemaPropertyInput(ref)[Conversational AI],
    WebhookToolApiSchemaConfigInputRequestHeaders(class)[Conversational AI],
      RequestHeaders2(anyOf)[Conversational AI],
        RequestHeadersVariant1(string)[Conversational AI],
        ConvAISecretLocator(ref)[Conversational AI],
  LiteralJsonSchemaProperty(class)[Conversational AI],
    LiteralJsonSchemaPropertyType(enum)[Conversational AI],
    Description(string)[Conversational AI],
    DynamicVariable(string)[Conversational AI],
    ConstantValue(anyOf)[Conversational AI],
      ConstantValueVariant1(string)[Conversational AI],
      ConstantValueVariant2(int)[Conversational AI],
      ConstantValueVariant3(double)[Conversational AI],
      ConstantValueVariant4(bool)[Conversational AI],
  QueryParamsJsonSchema(class)[Conversational AI],
    QueryParamsJsonSchemaProperties(class)[Conversational AI],
      LiteralJsonSchemaProperty(ref)[Conversational AI],
    Required(array)[Conversational AI],
      RequiredItem(string)[Conversational AI],
  ObjectJsonSchemaPropertyInput(class)[Conversational AI],
    ObjectJsonSchemaPropertyInputType(enum)[Conversational AI],
    ObjectJsonSchemaPropertyInputProperties(class)[Conversational AI],
      Properties(oneOf)[Conversational AI],
        LiteralJsonSchemaProperty(ref)[Conversational AI],
        ObjectJsonSchemaPropertyInput(ref)[Conversational AI],
        ArrayJsonSchemaPropertyInput(ref)[Conversational AI],
    Required(array)[Conversational AI],
      RequiredItem(string)[Conversational AI],
    Description(string)[Conversational AI],
  ArrayJsonSchemaPropertyInput(class)[],
    ArrayJsonSchemaPropertyInputType(enum)[],
    Items(oneOf)[],
      LiteralJsonSchemaProperty(ref)[],
      ObjectJsonSchemaPropertyInput(ref)[],
      ArrayJsonSchemaPropertyInput(ref)[],
    Description(string)[],
  ConvAISecretLocator(class)[Conversational AI],
    SecretId(string)[Conversational AI],
  ClientToolConfigInput(class)[Conversational AI],
    ClientToolConfigInputType(enum)[Conversational AI],
    Name(string)[Conversational AI],
    Description(string)[Conversational AI],
    ObjectJsonSchemaPropertyInput(ref)[Conversational AI],
    ExpectsResponse(bool)[Conversational AI],
    ResponseTimeoutSecs(int)[Conversational AI],
    DynamicVariablesConfig(ref)[Conversational AI],
  SystemToolConfig(class)[Conversational AI],
    SystemToolConfigType(enum)[Conversational AI],
    Name(string)[Conversational AI],
    Description(string)[Conversational AI],
  KnowledgeBaseLocator(class)[Conversational AI],
    KnowledgeBaseLocatorType(enum)[Conversational AI],
    Name(string)[Conversational AI],
    Id(string)[Conversational AI],
    DocumentUsageModeEnum(ref)[Conversational AI],
  DocumentUsageModeEnum(enum)[Conversational AI],
  CustomLLM(class)[Conversational AI],
    Url(string)[Conversational AI],
    ModelId(string)[Conversational AI],
    ConvAISecretLocator(ref)[Conversational AI],
  RagConfig(class)[Conversational AI],
    Enabled(bool)[Conversational AI],
    EmbeddingModelEnum(ref)[Conversational AI],
    MaxVectorDistance(double)[Conversational AI],
    MaxDocumentsLength(int)[Conversational AI],
  EmbeddingModelEnum(enum)[Conversational AI],
  AgentConfigAPIModelOutput(class)[Conversational AI],
    FirstMessage(string)[Conversational AI],
    Language(string)[Conversational AI],
    DynamicVariablesConfig(ref)[Conversational AI],
    PromptAgentOutput(ref)[Conversational AI],
  PromptAgentOutput(class)[Conversational AI],
    Prompt(string)[Conversational AI],
    LLM(ref)[Conversational AI],
    Temperature(double)[Conversational AI],
    MaxTokens(int)[Conversational AI],
    Tools(array)[Conversational AI],
      ToolsItem3(oneOf)[Conversational AI],
        WebhookToolConfigOutput(ref)[Conversational AI],
        ClientToolConfigOutput(ref)[Conversational AI],
        SystemToolConfig(ref)[Conversational AI],
        PromptAgentOutputToolDiscriminator(class)[Conversational AI],
          PromptAgentOutputToolDiscriminatorType(enum)[Conversational AI],
    ToolIds(array)[Conversational AI],
      ToolIdsItem(string)[Conversational AI],
    KnowledgeBase(array)[Conversational AI],
      KnowledgeBaseLocator(ref)[Conversational AI],
    CustomLLM(ref)[Conversational AI],
    IgnoreDefaultPersonality(bool)[Conversational AI],
    RagConfig(ref)[Conversational AI],
  WebhookToolConfigOutput(class)[Conversational AI],
    WebhookToolConfigOutputType(enum)[Conversational AI],
    Name(string)[Conversational AI],
    Description(string)[Conversational AI],
    WebhookToolApiSchemaConfigOutput(ref)[Conversational AI],
    DynamicVariablesConfig(ref)[Conversational AI],
  WebhookToolApiSchemaConfigOutput(class)[Conversational AI],
    Url(string)[Conversational AI],
    WebhookToolApiSchemaConfigOutputMethod(enum)[Conversational AI],
    WebhookToolApiSchemaConfigOutputPathParamsSchema(class)[Conversational AI],
      LiteralJsonSchemaProperty(ref)[Conversational AI],
    QueryParamsJsonSchema(ref)[Conversational AI],
    ObjectJsonSchemaPropertyOutput(ref)[Conversational AI],
    WebhookToolApiSchemaConfigOutputRequestHeaders(class)[Conversational AI],
      RequestHeaders3(anyOf)[Conversational AI],
        RequestHeadersVariant1(string)[Conversational AI],
        ConvAISecretLocator(ref)[Conversational AI],
  ObjectJsonSchemaPropertyOutput(class)[Conversational AI],
    ObjectJsonSchemaPropertyOutputType(enum)[Conversational AI],
    ObjectJsonSchemaPropertyOutputProperties(class)[Conversational AI],
      Properties2(oneOf)[Conversational AI],
        LiteralJsonSchemaProperty(ref)[Conversational AI],
        ObjectJsonSchemaPropertyOutput(ref)[Conversational AI],
        ArrayJsonSchemaPropertyOutput(ref)[Conversational AI],
    Required(array)[Conversational AI],
      RequiredItem(string)[Conversational AI],
    Description(string)[Conversational AI],
  ArrayJsonSchemaPropertyOutput(class)[],
    ArrayJsonSchemaPropertyOutputType(enum)[],
    Items2(oneOf)[],
      LiteralJsonSchemaProperty(ref)[],
      ObjectJsonSchemaPropertyOutput(ref)[],
      ArrayJsonSchemaPropertyOutput(ref)[],
    Description(string)[],
  ClientToolConfigOutput(class)[Conversational AI],
    ClientToolConfigOutputType(enum)[Conversational AI],
    Name(string)[Conversational AI],
    Description(string)[Conversational AI],
    ObjectJsonSchemaPropertyOutput(ref)[Conversational AI],
    ExpectsResponse(bool)[Conversational AI],
    ResponseTimeoutSecs(int)[Conversational AI],
    DynamicVariablesConfig(ref)[Conversational AI],
  AgentConfigOverride(class)[Conversational AI],
    PromptAgentOverride(ref)[Conversational AI],
    FirstMessage(string)[Conversational AI],
    Language(string)[Conversational AI],
  PromptAgentOverride(class)[Conversational AI],
    Prompt(string)[Conversational AI],
  AgentConfigOverrideConfig(class)[Conversational AI],
    PromptAgentOverrideConfig(ref)[Conversational AI],
    FirstMessage(bool)[Conversational AI],
    Language(bool)[Conversational AI],
  PromptAgentOverrideConfig(class)[Conversational AI],
    Prompt(bool)[Conversational AI],
  AgentMetadataResponseModel(class)[Conversational AI],
    CreatedAtUnixSecs(int)[Conversational AI],
  AgentPlatformSettingsRequestModel(class)[Conversational AI],
    AuthSettings(ref)[Conversational AI],
    EvaluationSettings(ref)[Conversational AI],
    WidgetConfig(ref)[Conversational AI],
    AgentPlatformSettingsRequestModelDataCollection(class)[Conversational AI],
      LiteralJsonSchemaProperty(ref)[Conversational AI],
    ConversationInitiationClientDataConfigInput(ref)[Conversational AI],
    AgentCallLimits(ref)[Conversational AI],
    PrivacyConfig(ref)[Conversational AI],
    AgentWorkspaceOverridesInput(ref)[Conversational AI],
  AuthSettings(class)[Conversational AI],
    EnableAuth(bool)[Conversational AI],
    Allowlist(array)[Conversational AI],
      AllowlistItem(ref)[Conversational AI],
    ShareableToken(string)[Conversational AI],
  AllowlistItem(class)[Conversational AI],
    Hostname(string)[Conversational AI],
  EvaluationSettings(class)[Conversational AI],
    Criteria(array)[Conversational AI],
      PromptEvaluationCriteria(ref)[Conversational AI],
  PromptEvaluationCriteria(class)[Conversational AI],
    Id(string)[Conversational AI],
    Name(string)[Conversational AI],
    PromptEvaluationCriteriaType(enum)[Conversational AI],
    ConversationGoalPrompt(string)[Conversational AI],
    UseKnowledgeBase(bool)[Conversational AI],
  WidgetConfig(class)[Conversational AI],
    EmbedVariant(ref)[Conversational AI],
    WidgetExpandable(ref)[Conversational AI],
    Avatar(anyOf)[Conversational AI],
      OrbAvatar(ref)[Conversational AI],
      URLAvatar(ref)[Conversational AI],
      ImageAvatar(ref)[Conversational AI],
    WidgetFeedbackMode(ref)[Conversational AI],
    BgColor(string)[Conversational AI],
    TextColor(string)[Conversational AI],
    BtnColor(string)[Conversational AI],
    BtnTextColor(string)[Conversational AI],
    BorderColor(string)[Conversational AI],
    FocusColor(string)[Conversational AI],
    BorderRadius(int)[Conversational AI],
    BtnRadius(int)[Conversational AI],
    ActionText(string)[Conversational AI],
    StartCallText(string)[Conversational AI],
    EndCallText(string)[Conversational AI],
    ExpandText(string)[Conversational AI],
    ListeningText(string)[Conversational AI],
    SpeakingText(string)[Conversational AI],
    ShareablePageText(string)[Conversational AI],
    ShareablePageShowTerms(bool)[Conversational AI],
    TermsText(string)[Conversational AI],
    TermsHtml(string)[Conversational AI],
    TermsKey(string)[Conversational AI],
    ShowAvatarWhenCollapsed(bool)[Conversational AI],
    DisableBanner(bool)[Conversational AI],
    MicMutingEnabled(bool)[Conversational AI],
    LanguageSelector(bool)[Conversational AI],
    CustomAvatarPath(string)[Conversational AI],
  EmbedVariant(enum)[Conversational AI],
  WidgetExpandable(enum)[Conversational AI],
  OrbAvatar(class)[Conversational AI],
    OrbAvatarType(enum)[Conversational AI],
    Color1(string)[Conversational AI],
    Color2(string)[Conversational AI],
  URLAvatar(class)[Conversational AI],
    URLAvatarType(enum)[Conversational AI],
    CustomUrl(string)[Conversational AI],
  ImageAvatar(class)[Conversational AI],
    ImageAvatarType(enum)[Conversational AI],
    Url(string)[Conversational AI],
  WidgetFeedbackMode(enum)[Conversational AI],
  ConversationInitiationClientDataConfigInput(class)[Conversational AI],
    ConversationConfigClientOverrideConfigInput(ref)[Conversational AI],
    CustomLlmExtraBody(bool)[Conversational AI],
    EnableConversationInitiationClientDataFromWebhook(bool)[Conversational AI],
  ConversationConfigClientOverrideConfigInput(class)[Conversational AI],
    AgentConfigOverrideConfig(ref)[Conversational AI],
    TTSConversationalConfigOverrideConfig(ref)[Conversational AI],
  TTSConversationalConfigOverrideConfig(class)[Conversational AI],
    VoiceId(bool)[Conversational AI],
  PrivacyConfig(class)[Conversational AI],
    RecordVoice(bool)[Conversational AI],
    RetentionDays(int)[Conversational AI],
    DeleteTranscriptAndPii(bool)[Conversational AI],
    DeleteAudio(bool)[Conversational AI],
    ApplyToExistingConversations(bool)[Conversational AI],
  AgentWorkspaceOverridesInput(class)[Conversational AI],
    ConversationInitiationClientDataWebhook(ref)[Conversational AI],
  ConversationInitiationClientDataWebhook(class)[Conversational AI],
    Url(string)[Conversational AI],
    ConversationInitiationClientDataWebhookRequestHeaders(class)[Conversational AI],
      RequestHeaders(anyOf)[Conversational AI],
        RequestHeadersVariant1(string)[Conversational AI],
        ConvAISecretLocator(ref)[Conversational AI],
  AgentPlatformSettingsResponseModel(class)[Conversational AI],
    AuthSettings(ref)[Conversational AI],
    EvaluationSettings(ref)[Conversational AI],
    WidgetConfig(ref)[Conversational AI],
    AgentPlatformSettingsResponseModelDataCollection(class)[Conversational AI],
      LiteralJsonSchemaProperty(ref)[Conversational AI],
    ConversationInitiationClientDataConfigOutput(ref)[Conversational AI],
    AgentCallLimits(ref)[Conversational AI],
    PrivacyConfig(ref)[Conversational AI],
    AgentWorkspaceOverridesOutput(ref)[Conversational AI],
    SafetyResponseModel(ref)[Conversational AI],
  ConversationInitiationClientDataConfigOutput(class)[Conversational AI],
    ConversationConfigClientOverrideConfigOutput(ref)[Conversational AI],
    CustomLlmExtraBody(bool)[Conversational AI],
    EnableConversationInitiationClientDataFromWebhook(bool)[Conversational AI],
  ConversationConfigClientOverrideConfigOutput(class)[Conversational AI],
    AgentConfigOverrideConfig(ref)[Conversational AI],
    TTSConversationalConfigOverrideConfig(ref)[Conversational AI],
  AgentWorkspaceOverridesOutput(class)[Conversational AI],
    ConversationInitiationClientDataWebhook(ref)[Conversational AI],
  SafetyResponseModel(class)[Conversational AI],
    IsBlockedIvc(bool)[Conversational AI],
    IsBlockedNonIvc(bool)[Conversational AI],
  AgentSummaryResponseModel(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    Name(string)[Conversational AI],
    CreatedAtUnixSecs(int)[Conversational AI],
    ResourceAccessInfo(ref)[Conversational AI],
  ResourceAccessInfo(class)[Conversational AI],
    IsCreator(bool)[Conversational AI],
    CreatorName(string)[Conversational AI],
    CreatorEmail(string)[Conversational AI],
    ResourceAccessInfoRole(enum)[Conversational AI],
  AudioNativeCreateProjectResponseModel(class)[audio-native],
    ProjectId(string)[audio-native],
    Converting(bool)[audio-native],
    HtmlSnippet(string)[audio-native],
  AudioNativeEditContentResponseModel(class)[audio-native],
    ProjectId(string)[audio-native],
    Converting(bool)[audio-native],
    Publishing(bool)[audio-native],
    HtmlSnippet(string)[audio-native],
  AudioNativeProjectSettingsResponseModel(class)[audio-native],
    Title(string)[audio-native],
    Image(string)[audio-native],
    Author(string)[audio-native],
    Small(bool)[audio-native],
    TextColor(string)[audio-native],
    BackgroundColor(string)[audio-native],
    Sessionization(int)[audio-native],
    AudioPath(string)[audio-native],
    AudioUrl(string)[audio-native],
  AudioWithTimestampsResponseModel(class)[text-to-speech],
    AudioBase64(string)[text-to-speech],
    CharacterAlignmentResponseModel(ref)[text-to-speech],
    CharacterAlignmentResponseModel(ref)[text-to-speech],
  CharacterAlignmentResponseModel(class)[text-to-speech],
    Characters(array)[text-to-speech],
      CharactersItem(string)[text-to-speech],
    CharacterStartTimesSeconds(array)[text-to-speech],
      CharacterStartTimesSecondsItem(double)[text-to-speech],
    CharacterEndTimesSeconds(array)[text-to-speech],
      CharacterEndTimesSecondsItem(double)[text-to-speech],
  AuthorizationMethod(enum)[Conversational AI],
  BodyAddALanguageToTheResourceV1DubbingResourceDubbingIdLanguagePost(class)[dubbing, resource, segment],
    Language(string)[dubbing, resource, segment],
  BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost(class)[Pronunciation Dictionary],
    Name(string)[Pronunciation Dictionary],
    File(byte[])[Pronunciation Dictionary],
    Description(string)[Pronunciation Dictionary],
    BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePostWorkspaceAccess(enum)[Pronunciation Dictionary],
  BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromRulesPost(class)[Pronunciation Dictionary],
    Rules(array)[Pronunciation Dictionary],
      RulesItem(anyOf)[Pronunciation Dictionary],
        PronunciationDictionaryAliasRuleRequestModel(ref)[Pronunciation Dictionary],
        PronunciationDictionaryPhonemeRuleRequestModel(ref)[Pronunciation Dictionary],
    Name(string)[Pronunciation Dictionary],
    Description(string)[Pronunciation Dictionary],
    BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromRulesPostWorkspaceAccess(enum)[Pronunciation Dictionary],
  PronunciationDictionaryAliasRuleRequestModel(class)[Pronunciation Dictionary],
    StringToReplace(string)[Pronunciation Dictionary],
    PronunciationDictionaryAliasRuleRequestModelType(enum)[Pronunciation Dictionary],
    Alias(string)[Pronunciation Dictionary],
  PronunciationDictionaryPhonemeRuleRequestModel(class)[Pronunciation Dictionary],
    StringToReplace(string)[Pronunciation Dictionary],
    PronunciationDictionaryPhonemeRuleRequestModelType(enum)[Pronunciation Dictionary],
    Phoneme(string)[Pronunciation Dictionary],
    Alphabet(string)[Pronunciation Dictionary],
  BodyAddASecretToTheAgentWhichCanBeReferencedInToolCallsV1ConvaiAgentsAgentIdAddSecretPost(class)[Conversational AI],
    Name(string)[Conversational AI],
    SecretValue(string)[Conversational AI],
  BodyAddChapterToAProjectV1ProjectsProjectIdChaptersAddPost(class)[projects],
    Name(string)[projects],
    FromUrl(string)[projects],
  BodyAddMemberToUserGroupV1WorkspaceGroupsGroupIdMembersPost(class)[workspace],
    Email(string)[workspace],
  BodyAddProjectV1ProjectsAddPost(class)[projects],
    Name(string)[projects],
    DefaultTitleVoiceId(string)[projects],
    DefaultParagraphVoiceId(string)[projects],
    DefaultModelId(string)[projects],
    FromUrl(string)[projects],
    FromDocument(byte[])[projects],
    QualityPreset(string)[projects],
    Title(string)[projects],
    Author(string)[projects],
    Description(string)[projects],
    Genres(array)[projects],
      GenresItem(string)[projects],
    BodyAddProjectV1ProjectsAddPostTargetAudience(enum)[projects],
    Language(string)[projects],
    ContentType(string)[projects],
    OriginalPublicationDate(string)[projects],
    MatureContent(bool)[projects],
    IsbnNumber(string)[projects],
    AcxVolumeNormalization(bool)[projects],
    VolumeNormalization(bool)[projects],
    PronunciationDictionaryLocators(array)[projects],
      PronunciationDictionaryLocatorsItem(string)[projects],
    CallbackUrl(string)[projects],
    BodyAddProjectV1ProjectsAddPostFiction(enum)[projects],
    BodyAddProjectV1ProjectsAddPostApplyTextNormalization(enum)[projects],
    AutoConvert(bool)[projects],
    AutoAssignVoices(bool)[projects],
    BodyAddProjectV1ProjectsAddPostSourceType(enum)[projects],
  BodyAddRulesToThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdAddRulesPost(class)[Pronunciation Dictionary],
    Rules(array)[Pronunciation Dictionary],
      RulesItem2(anyOf)[Pronunciation Dictionary],
        PronunciationDictionaryAliasRuleRequestModel(ref)[Pronunciation Dictionary],
        PronunciationDictionaryPhonemeRuleRequestModel(ref)[Pronunciation Dictionary],
  BodyAddSharedVoiceV1VoicesAddPublicUserIdVoiceIdPost(class)[voices],
    NewName(string)[voices],
  BodyAddToKnowledgeBaseV1ConvaiAddToKnowledgeBasePost(class)[Conversational AI],
    Name(string)[Conversational AI],
    Url(string)[Conversational AI],
    File(byte[])[Conversational AI],
  BodyAddToKnowledgeBaseV1ConvaiAgentsAgentIdAddToKnowledgeBasePost(class)[Conversational AI],
    Name(string)[Conversational AI],
    Url(string)[Conversational AI],
    File(byte[])[Conversational AI],
  BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost(class)[Conversational AI],
    Name(string)[Conversational AI],
    Url(string)[Conversational AI],
    File(byte[])[Conversational AI],
  BodyAddVoiceV1VoicesAddPost(class)[voices],
    Name(string)[voices],
    Files(array)[voices],
      FilesItem(byte[])[voices],
    RemoveBackgroundNoise(bool)[voices],
    Description(string)[voices],
    Labels(string)[voices],
  BodyAudioIsolationStreamV1AudioIsolationStreamPost(class)[audio-isolation],
    Audio(byte[])[audio-isolation],
  BodyAudioIsolationV1AudioIsolationPost(class)[audio-isolation],
    Audio(byte[])[audio-isolation],
  BodyCreateAgentV1ConvaiAgentsCreatePost(class)[Conversational AI],
    ConversationalConfigAPIModelInput(ref)[Conversational AI],
    AgentPlatformSettingsRequestModel(ref)[Conversational AI],
    Name(string)[Conversational AI],
  ConversationalConfigAPIModelInput(class)[Conversational AI],
    ASRConversationalConfig(ref)[Conversational AI],
    TurnConfig(ref)[Conversational AI],
    TTSConversationalConfig(ref)[Conversational AI],
    ConversationConfig(ref)[Conversational AI],
    ConversationalConfigAPIModelInputLanguagePresets(class)[Conversational AI],
      LanguagePresetInput(ref)[Conversational AI],
    AgentConfigAPIModelInput(ref)[Conversational AI],
  TurnConfig(class)[Conversational AI],
    TurnTimeout(double)[Conversational AI],
    TurnMode(ref)[Conversational AI],
  TurnMode(enum)[Conversational AI],
  TTSConversationalConfig(class)[Conversational AI],
    TTSConversationalModel(ref)[Conversational AI],
    VoiceId(string)[Conversational AI],
    TTSOutputFormat(ref)[Conversational AI],
    TTSOptimizeStreamingLatency(ref)[Conversational AI],
    Stability(double)[Conversational AI],
    Speed(double)[Conversational AI],
    SimilarityBoost(double)[Conversational AI],
    PronunciationDictionaryLocators(array)[Conversational AI],
      PydanticPronunciationDictionaryVersionLocator(ref)[Conversational AI],
  TTSConversationalModel(enum)[Conversational AI],
  TTSOutputFormat(enum)[Conversational AI],
  TTSOptimizeStreamingLatency(int)[Conversational AI],
  PydanticPronunciationDictionaryVersionLocator(class)[Conversational AI],
    PronunciationDictionaryId(string)[Conversational AI],
    VersionId(string)[Conversational AI],
  ConversationConfig(class)[Conversational AI],
    MaxDurationSeconds(int)[Conversational AI],
    ClientEvents(array)[Conversational AI],
      ClientEvent(ref)[Conversational AI],
  ClientEvent(enum)[Conversational AI],
  LanguagePresetInput(class)[Conversational AI],
    ConversationConfigClientOverrideInput(ref)[Conversational AI],
    LanguagePresetTranslation(ref)[Conversational AI],
  ConversationConfigClientOverrideInput(class)[Conversational AI],
    AgentConfigOverride(ref)[Conversational AI],
    TTSConversationalConfigOverride(ref)[Conversational AI],
  TTSConversationalConfigOverride(class)[Conversational AI],
    VoiceId(string)[Conversational AI],
  LanguagePresetTranslation(class)[Conversational AI],
    SourceHash(string)[Conversational AI],
    Text(string)[Conversational AI],
  BodyCreatePronunciationDictionariesV1StudioProjectsProjectIdPronunciationDictionariesPost(class)[studio],
    PronunciationDictionaryLocators(array)[studio],
      PronunciationDictionaryVersionLocatorDBModel(ref)[studio],
    InvalidateAffectedText(bool)[studio],
  PronunciationDictionaryVersionLocatorDBModel(class)[text-to-speech, studio, projects],
    PronunciationDictionaryId(string)[text-to-speech, studio, projects],
    VersionId(string)[text-to-speech, studio, projects],
  BodyCreateStudioProjectV1StudioProjectsPost(class)[studio],
    Name(string)[studio],
    DefaultTitleVoiceId(string)[studio],
    DefaultParagraphVoiceId(string)[studio],
    DefaultModelId(string)[studio],
    FromUrl(string)[studio],
    FromDocument(byte[])[studio],
    QualityPreset(string)[studio],
    Title(string)[studio],
    Author(string)[studio],
    Description(string)[studio],
    Genres(array)[studio],
      GenresItem(string)[studio],
    BodyCreateStudioProjectV1StudioProjectsPostTargetAudience(enum)[studio],
    Language(string)[studio],
    ContentType(string)[studio],
    OriginalPublicationDate(string)[studio],
    MatureContent(bool)[studio],
    IsbnNumber(string)[studio],
    AcxVolumeNormalization(bool)[studio],
    VolumeNormalization(bool)[studio],
    PronunciationDictionaryLocators(array)[studio],
      PronunciationDictionaryLocatorsItem(string)[studio],
    CallbackUrl(string)[studio],
    BodyCreateStudioProjectV1StudioProjectsPostFiction(enum)[studio],
    BodyCreateStudioProjectV1StudioProjectsPostApplyTextNormalization(enum)[studio],
    AutoConvert(bool)[studio],
    AutoAssignVoices(bool)[studio],
    BodyCreateStudioProjectV1StudioProjectsPostSourceType(enum)[studio],
  BodyCreateANewVoiceFromVoicePreviewV1TextToVoiceCreateVoiceFromPreviewPost(class)[text-to-voice],
    VoiceName(string)[text-to-voice],
    VoiceDescription(string)[text-to-voice],
    GeneratedVoiceId(string)[text-to-voice],
    BodyCreateANewVoiceFromVoicePreviewV1TextToVoiceCreateVoiceFromPreviewPostLabels(class)[text-to-voice],
      Labels(string)[text-to-voice],
    PlayedNotSelectedVoiceIds(array)[text-to-voice],
      PlayedNotSelectedVoiceIdsItem(string)[text-to-voice],
  BodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost(class)[voice-generation],
    VoiceName(string)[voice-generation],
    VoiceDescription(string)[voice-generation],
    GeneratedVoiceId(string)[voice-generation],
    PlayedNotSelectedVoiceIds(array)[voice-generation],
      PlayedNotSelectedVoiceIdsItem(string)[voice-generation],
    BodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePostLabels(class)[voice-generation],
      Labels(string)[voice-generation],
  BodyCreateChapterV1StudioProjectsProjectIdChaptersPost(class)[studio],
    Name(string)[studio],
    FromUrl(string)[studio],
  BodyCreatePodcastV1ProjectsPodcastCreatePost(class)[projects],
    ModelId(string)[projects],
    Mode(anyOf)[projects],
      PodcastConversationMode(ref)[projects],
      PodcastBulletinMode(ref)[projects],
    Source(anyOf)[projects],
      PodcastTextSource(ref)[projects],
      PodcastURLSource(ref)[projects],
      SourceVariant3(array)[projects],
        SourceVariant3Item(anyOf)[projects],
          PodcastTextSource(ref)[projects],
          PodcastURLSource(ref)[projects],
    BodyCreatePodcastV1ProjectsPodcastCreatePostQualityPreset(enum)[projects],
    BodyCreatePodcastV1ProjectsPodcastCreatePostDurationScale(enum)[projects],
    Language(string)[projects],
    Highlights(array)[projects],
      HighlightsItem(string)[projects],
    CallbackUrl(string)[projects],
  PodcastConversationMode(class)[studio, projects],
    PodcastConversationModeType(enum)[studio, projects],
    PodcastConversationModeData(ref)[studio, projects],
  PodcastConversationModeData(class)[studio, projects],
    HostVoiceId(string)[studio, projects],
    GuestVoiceId(string)[studio, projects],
  PodcastBulletinMode(class)[studio, projects],
    PodcastBulletinModeType(enum)[studio, projects],
    PodcastBulletinModeData(ref)[studio, projects],
  PodcastBulletinModeData(class)[studio, projects],
    HostVoiceId(string)[studio, projects],
  PodcastTextSource(class)[studio, projects],
    PodcastTextSourceType(enum)[studio, projects],
    Text(string)[studio, projects],
  PodcastURLSource(class)[studio, projects],
    PodcastURLSourceType(enum)[studio, projects],
    Url(string)[studio, projects],
  BodyCreatePodcastV1StudioPodcastsPost(class)[studio],
    ModelId(string)[studio],
    Mode2(anyOf)[studio],
      PodcastConversationMode(ref)[studio],
      PodcastBulletinMode(ref)[studio],
    Source2(anyOf)[studio],
      PodcastTextSource(ref)[studio],
      PodcastURLSource(ref)[studio],
      SourceVariant3(array)[studio],
        SourceVariant3Item2(anyOf)[studio],
          PodcastTextSource(ref)[studio],
          PodcastURLSource(ref)[studio],
    BodyCreatePodcastV1StudioPodcastsPostQualityPreset(enum)[studio],
    BodyCreatePodcastV1StudioPodcastsPostDurationScale(enum)[studio],
    Language(string)[studio],
    Highlights(array)[studio],
      HighlightsItem(string)[studio],
    CallbackUrl(string)[studio],
  BodyCreatesAudioNativeEnabledProjectV1AudioNativePost(class)[audio-native],
    Name(string)[audio-native],
    Image(string)[audio-native],
    Author(string)[audio-native],
    Title(string)[audio-native],
    Small(bool)[audio-native],
    TextColor(string)[audio-native],
    BackgroundColor(string)[audio-native],
    Sessionization(int)[audio-native],
    VoiceId(string)[audio-native],
    ModelId(string)[audio-native],
    File(byte[])[audio-native],
    AutoConvert(bool)[audio-native],
  BodyDeleteExistingInvitationV1WorkspaceInvitesDelete(class)[workspace],
    Email(string)[workspace],
  BodyDeleteMemberFromUserGroupV1WorkspaceGroupsGroupIdMembersRemovePost(class)[workspace],
    Email(string)[workspace],
  BodyDownloadHistoryItemsV1HistoryDownloadPost(class)[speech-history],
    HistoryItemIds(array)[speech-history],
      HistoryItemIdsItem(string)[speech-history],
    OutputFormat(string)[speech-history],
  BodyDubAVideoOrAnAudioFileV1DubbingPost(class)[dubbing],
    File(byte[])[dubbing],
    CsvFile(byte[])[dubbing],
    ForegroundAudioFile(byte[])[dubbing],
    BackgroundAudioFile(byte[])[dubbing],
    Name(string)[dubbing],
    SourceUrl(string)[dubbing],
    SourceLang(string)[dubbing],
    TargetLang(string)[dubbing],
    NumSpeakers(int)[dubbing],
    Watermark(bool)[dubbing],
    StartTime(int)[dubbing],
    EndTime(int)[dubbing],
    HighestResolution(bool)[dubbing],
    DropBackgroundAudio(bool)[dubbing],
    UseProfanityFilter(bool)[dubbing],
    DubbingStudio(bool)[dubbing],
    DisableVoiceCloning(bool)[dubbing],
    Mode(string)[dubbing],
  BodyDubsAllOrSomeSegmentsAndLanguagesV1DubbingResourceDubbingIdDubPost(class)[dubbing, resource, segment],
    Segments(array)[dubbing, resource, segment],
      SegmentsItem(string)[dubbing, resource, segment],
    Languages(array)[dubbing, resource, segment],
      LanguagesItem(string)[dubbing, resource, segment],
  BodyEditBasicProjectInfoV1ProjectsProjectIdPost(class)[projects],
    Name(string)[projects],
    DefaultTitleVoiceId(string)[projects],
    DefaultParagraphVoiceId(string)[projects],
    Title(string)[projects],
    Author(string)[projects],
    IsbnNumber(string)[projects],
    VolumeNormalization(bool)[projects],
  BodyEditChapterV1ProjectsProjectIdChaptersChapterIdPatch(class)[projects],
    Name(string)[projects],
    ChapterContentInputModel(ref)[projects],
  ChapterContentInputModel(class)[studio, projects],
    Blocks(array)[studio, projects],
      ChapterContentBlockInputModel(ref)[studio, projects],
  ChapterContentBlockInputModel(class)[studio, projects],
    BlockId(string)[studio, projects],
    Nodes(array)[studio, projects],
      ChapterContentParagraphTtsNodeInputModel(ref)[studio, projects],
  ChapterContentParagraphTtsNodeInputModel(class)[studio, projects],
    ChapterContentParagraphTtsNodeInputModelType(enum)[studio, projects],
    Text(string)[studio, projects],
    VoiceId(string)[studio, projects],
  BodyEditProjectContentV1ProjectsProjectIdContentPost(class)[projects],
    FromUrl(string)[projects],
    FromDocument(byte[])[projects],
    AutoConvert(bool)[projects],
  BodyEditVoiceV1VoicesVoiceIdEditPost(class)[voices],
    Name(string)[voices],
    Files(array)[voices],
      FilesItem(byte[])[voices],
    RemoveBackgroundNoise(bool)[voices],
    Description(string)[voices],
    Labels(string)[voices],
  BodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost(class)[voice-generation],
    BodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePostGender(enum)[voice-generation],
    Accent(string)[voice-generation],
    BodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePostAge(enum)[voice-generation],
    AccentStrength(double)[voice-generation],
    Text(string)[voice-generation],
  BodyGetSimilarLibraryVoicesV1SimilarVoicesPost(class)[voices],
    AudioFile(byte[])[voices],
    SimilarityThreshold(double)[voices],
    TopK(int)[voices],
  BodyHandleAnOutboundCallViaTwilioV1ConvaiTwilioOutboundCallPost(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    AgentPhoneNumberId(string)[Conversational AI],
    ToNumber(string)[Conversational AI],
    ConversationInitiationClientDataRequestInput(ref)[Conversational AI],
  ConversationInitiationClientDataRequestInput(class)[Conversational AI],
    ConversationConfigClientOverrideInput(ref)[Conversational AI],
    ConversationInitiationClientDataRequestInputCustomLlmExtraBody(class)[Conversational AI],
    ConversationInitiationClientDataRequestInputDynamicVariables(class)[Conversational AI],
      DynamicVariables(anyOf)[Conversational AI],
        DynamicVariablesVariant1(string)[Conversational AI],
        DynamicVariablesVariant2(double)[Conversational AI],
        DynamicVariablesVariant3(int)[Conversational AI],
        DynamicVariablesVariant4(bool)[Conversational AI],
  BodyInviteMultipleUsersV1WorkspaceInvitesAddBulkPost(class)[workspace],
    Emails(array)[workspace],
      EmailsItem(string)[workspace],
    GroupIds(array)[workspace],
      GroupIdsItem(string)[workspace],
  BodyInviteUserV1WorkspaceInvitesAddPost(class)[workspace],
    Email(string)[workspace],
    GroupIds(array)[workspace],
      GroupIdsItem(string)[workspace],
  BodyPatchesAnAgentSettingsV1ConvaiAgentsAgentIdPatch(class)[Conversational AI],
    BodyPatchesAnAgentSettingsV1ConvaiAgentsAgentIdPatchConversationConfig(class)[Conversational AI],
    BodyPatchesAnAgentSettingsV1ConvaiAgentsAgentIdPatchPlatformSettings(class)[Conversational AI],
    Name(string)[Conversational AI],
  BodyPostAgentAvatarV1ConvaiAgentsAgentIdAvatarPost(class)[Conversational AI],
    AvatarFile(byte[])[Conversational AI],
  BodyRemoveRulesFromThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdRemoveRulesPost(class)[Pronunciation Dictionary],
    RuleStrings(array)[Pronunciation Dictionary],
      RuleStringsItem(string)[Pronunciation Dictionary],
  BodySendConversationFeedbackV1ConvaiConversationsConversationIdFeedbackPost(class)[Conversational AI],
    UserFeedbackScore(ref)[Conversational AI],
  UserFeedbackScore(enum)[Conversational AI],
  BodyShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePost(class)[workspace],
    BodyShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePostRole(enum)[workspace],
    WorkspaceResourceType(ref)[workspace],
    UserEmail(string)[workspace],
    GroupId(string)[workspace],
    WorkspaceApiKeyId(string)[workspace],
  WorkspaceResourceType(enum)[workspace],
  BodySoundGenerationV1SoundGenerationPost(class)[sound-generation],
    Text(string)[sound-generation],
    DurationSeconds(double)[sound-generation],
    PromptInfluence(double)[sound-generation],
  BodySpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPost(class)[speech-to-speech],
    Audio(byte[])[speech-to-speech],
    ModelId(string)[speech-to-speech],
    VoiceSettings(string)[speech-to-speech],
    Seed(int)[speech-to-speech],
    RemoveBackgroundNoise(bool)[speech-to-speech],
  BodySpeechToSpeechV1SpeechToSpeechVoiceIdPost(class)[speech-to-speech],
    Audio(byte[])[speech-to-speech],
    ModelId(string)[speech-to-speech],
    VoiceSettings(string)[speech-to-speech],
    Seed(int)[speech-to-speech],
    RemoveBackgroundNoise(bool)[speech-to-speech],
  BodySpeechToTextV1SpeechToTextPost(class)[speech-to-text],
    ModelId(string)[speech-to-text],
    File(byte[])[speech-to-text],
    LanguageCode(string)[speech-to-text],
    TagAudioEvents(bool)[speech-to-text],
    NumSpeakers(int)[speech-to-text],
    BodySpeechToTextV1SpeechToTextPostTimestampsGranularity(enum)[speech-to-text],
    Diarize(bool)[speech-to-text],
  BodyStreamStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(class)[studio],
    ConvertToMpeg(bool)[studio],
  BodyStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(class)[projects],
    ConvertToMpeg(bool)[projects],
  BodyStreamChapterAudioV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(class)[studio],
    ConvertToMpeg(bool)[studio],
  BodyStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(class)[projects],
    ConvertToMpeg(bool)[projects],
  BodyTextToSpeechStreamingV1TextToSpeechVoiceIdStreamPost(class)[text-to-speech],
    Text(string)[text-to-speech],
    ModelId(string)[text-to-speech],
    LanguageCode(string)[text-to-speech],
    VoiceSettingsResponseModel(ref)[text-to-speech],
    PronunciationDictionaryLocators(array)[text-to-speech],
      PronunciationDictionaryVersionLocatorDBModel(ref)[text-to-speech],
    Seed(int)[text-to-speech],
    PreviousText(string)[text-to-speech],
    NextText(string)[text-to-speech],
    PreviousRequestIds(array)[text-to-speech],
      PreviousRequestIdsItem(string)[text-to-speech],
    NextRequestIds(array)[text-to-speech],
      NextRequestIdsItem(string)[text-to-speech],
    UsePvcAsIvc(bool)[text-to-speech],
    BodyTextToSpeechStreamingV1TextToSpeechVoiceIdStreamPostApplyTextNormalization(enum)[text-to-speech],
    ApplyLanguageTextNormalization(bool)[text-to-speech],
  VoiceSettingsResponseModel(class)[text-to-speech, voices, voice-generation, text-to-voice],
    Stability(double)[text-to-speech, voices, voice-generation, text-to-voice],
    SimilarityBoost(double)[text-to-speech, voices, voice-generation, text-to-voice],
    Style(double)[text-to-speech, voices, voice-generation, text-to-voice],
    UseSpeakerBoost(bool)[text-to-speech, voices, voice-generation, text-to-voice],
    Speed(double)[text-to-speech, voices, voice-generation, text-to-voice],
  BodyTextToSpeechStreamingWithTimestampsV1TextToSpeechVoiceIdStreamWithTimestampsPost(class)[text-to-speech],
    Text(string)[text-to-speech],
    ModelId(string)[text-to-speech],
    LanguageCode(string)[text-to-speech],
    VoiceSettingsResponseModel(ref)[text-to-speech],
    PronunciationDictionaryLocators(array)[text-to-speech],
      PronunciationDictionaryVersionLocatorDBModel(ref)[text-to-speech],
    Seed(int)[text-to-speech],
    PreviousText(string)[text-to-speech],
    NextText(string)[text-to-speech],
    PreviousRequestIds(array)[text-to-speech],
      PreviousRequestIdsItem(string)[text-to-speech],
    NextRequestIds(array)[text-to-speech],
      NextRequestIdsItem(string)[text-to-speech],
    UsePvcAsIvc(bool)[text-to-speech],
    BodyTextToSpeechStreamingWithTimestampsV1TextToSpeechVoiceIdStreamWithTimestampsPostApplyTextNormalization(enum)[text-to-speech],
    ApplyLanguageTextNormalization(bool)[text-to-speech],
  BodyTextToSpeechV1TextToSpeechVoiceIdPost(class)[text-to-speech],
    Text(string)[text-to-speech],
    ModelId(string)[text-to-speech],
    LanguageCode(string)[text-to-speech],
    VoiceSettingsResponseModel(ref)[text-to-speech],
    PronunciationDictionaryLocators(array)[text-to-speech],
      PronunciationDictionaryVersionLocatorDBModel(ref)[text-to-speech],
    Seed(int)[text-to-speech],
    PreviousText(string)[text-to-speech],
    NextText(string)[text-to-speech],
    PreviousRequestIds(array)[text-to-speech],
      PreviousRequestIdsItem(string)[text-to-speech],
    NextRequestIds(array)[text-to-speech],
      NextRequestIdsItem(string)[text-to-speech],
    UsePvcAsIvc(bool)[text-to-speech],
    BodyTextToSpeechV1TextToSpeechVoiceIdPostApplyTextNormalization(enum)[text-to-speech],
    ApplyLanguageTextNormalization(bool)[text-to-speech],
  BodyTextToSpeechWithTimestampsV1TextToSpeechVoiceIdWithTimestampsPost(class)[text-to-speech],
    Text(string)[text-to-speech],
    ModelId(string)[text-to-speech],
    LanguageCode(string)[text-to-speech],
    VoiceSettingsResponseModel(ref)[text-to-speech],
    PronunciationDictionaryLocators(array)[text-to-speech],
      PronunciationDictionaryVersionLocatorDBModel(ref)[text-to-speech],
    Seed(int)[text-to-speech],
    PreviousText(string)[text-to-speech],
    NextText(string)[text-to-speech],
    PreviousRequestIds(array)[text-to-speech],
      PreviousRequestIdsItem(string)[text-to-speech],
    NextRequestIds(array)[text-to-speech],
      NextRequestIdsItem(string)[text-to-speech],
    UsePvcAsIvc(bool)[text-to-speech],
    BodyTextToSpeechWithTimestampsV1TextToSpeechVoiceIdWithTimestampsPostApplyTextNormalization(enum)[text-to-speech],
    ApplyLanguageTextNormalization(bool)[text-to-speech],
  BodyTranscribesSegmentsV1DubbingResourceDubbingIdTranscribePost(class)[dubbing, resource, segment],
    Segments(array)[dubbing, resource, segment],
      SegmentsItem(string)[dubbing, resource, segment],
  BodyTranslatesAllOrSomeSegmentsAndLanguagesV1DubbingResourceDubbingIdTranslatePost(class)[dubbing, resource, segment],
    Segments(array)[dubbing, resource, segment],
      SegmentsItem(string)[dubbing, resource, segment],
    Languages(array)[dubbing, resource, segment],
      LanguagesItem(string)[dubbing, resource, segment],
  BodyUnshareWorkspaceResourceV1WorkspaceResourcesResourceIdUnsharePost(class)[workspace],
    WorkspaceResourceType(ref)[workspace],
    UserEmail(string)[workspace],
    GroupId(string)[workspace],
    WorkspaceApiKeyId(string)[workspace],
  BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost(class)[projects],
    PronunciationDictionaryLocators(array)[projects],
      PronunciationDictionaryVersionLocatorDBModel(ref)[projects],
    InvalidateAffectedText(bool)[projects],
  BodyUpdateStudioProjectContentV1StudioProjectsProjectIdContentPost(class)[studio],
    FromUrl(string)[studio],
    FromDocument(byte[])[studio],
    AutoConvert(bool)[studio],
  BodyUpdateStudioProjectV1StudioProjectsProjectIdPost(class)[studio],
    Name(string)[studio],
    DefaultTitleVoiceId(string)[studio],
    DefaultParagraphVoiceId(string)[studio],
    Title(string)[studio],
    Author(string)[studio],
    IsbnNumber(string)[studio],
    VolumeNormalization(bool)[studio],
  BodyUpdateAudioNativeProjectContentV1AudioNativeProjectIdContentPost(class)[audio-native],
    File(byte[])[audio-native],
    AutoConvert(bool)[audio-native],
    AutoPublish(bool)[audio-native],
  BodyUpdateChapterV1StudioProjectsProjectIdChaptersChapterIdPost(class)[studio],
    Name(string)[studio],
    ChapterContentInputModel(ref)[studio],
  BodyUpdateMemberV1WorkspaceMembersPost(class)[workspace],
    Email(string)[workspace],
    IsLocked(bool)[workspace],
    BodyUpdateMemberV1WorkspaceMembersPostWorkspaceRole(enum)[workspace],
  BreakdownTypes(enum)[usage],
  ChapterResponseModel(class)[studio, projects],
    ChapterId(string)[studio, projects],
    Name(string)[studio, projects],
    LastConversionDateUnix(int)[studio, projects],
    ConversionProgress(double)[studio, projects],
    CanBeDownloaded(bool)[studio, projects],
    ChapterResponseModelState(enum)[studio, projects],
    ChapterStatisticsResponseModel(ref)[studio, projects],
    LastConversionError(string)[studio, projects],
  ChapterSnapshotExtendedResponseModel(class)[studio],
    ChapterSnapshotId(string)[studio],
    ProjectId(string)[studio],
    ChapterId(string)[studio],
    CreatedAtUnix(int)[studio],
    Name(string)[studio],
    CharacterAlignments(array)[studio],
      CharacterAlignmentModel(ref)[studio],
  CharacterAlignmentModel(class)[studio],
    Characters(array)[studio],
      CharactersItem(string)[studio],
    CharacterStartTimesSeconds(array)[studio],
      CharacterStartTimesSecondsItem(double)[studio],
    CharacterEndTimesSeconds(array)[studio],
      CharacterEndTimesSecondsItem(double)[studio],
  ChapterSnapshotResponseModel(class)[studio, projects],
    ChapterSnapshotId(string)[studio, projects],
    ProjectId(string)[studio, projects],
    ChapterId(string)[studio, projects],
    CreatedAtUnix(int)[studio, projects],
    Name(string)[studio, projects],
  ChapterSnapshotsResponseModel(class)[studio, projects],
    Snapshots(array)[studio, projects],
      ChapterSnapshotResponseModel(ref)[studio, projects],
  ConvAIStoredSecretDependencies(class)[],
    Tools(array)[],
      ToolsItem(oneOf)[],
        DependentAvailableToolIdentifier(ref)[],
        DependentUnknownToolIdentifier(ref)[],
        ConvAIStoredSecretDependenciesToolDiscriminator(class)[],
          ConvAIStoredSecretDependenciesToolDiscriminatorType(enum)[],
    AgentTools(array)[],
      AgentToolsItem(oneOf)[],
        DependentAvailableAgentToolIdentifier(ref)[],
        DependentUnknownAgentToolIdentifier(ref)[],
        ConvAIStoredSecretDependenciesAgentToolDiscriminator(class)[],
          ConvAIStoredSecretDependenciesAgentToolDiscriminatorType(enum)[],
    Others(array)[],
      SecretDependencyType(ref)[],
    PhoneNumbers(array)[],
      DependentPhoneNumberIdentifier(ref)[],
  DependentAvailableToolIdentifier(class)[],
    Id(string)[],
    Name(string)[],
    DependentAvailableToolIdentifierType(enum)[],
    CreatedAtUnixSecs(int)[],
    DependentAvailableToolIdentifierAccessLevel(enum)[],
  DependentUnknownToolIdentifier(class)[],
    DependentUnknownToolIdentifierType(enum)[],
  DependentAvailableAgentToolIdentifier(class)[],
    AgentId(string)[],
    AgentName(string)[],
    UsedBy(array)[],
      UsedByItem(string)[],
    DependentAvailableAgentToolIdentifierType(enum)[],
    CreatedAtUnixSecs(int)[],
    DependentAvailableAgentToolIdentifierAccessLevel(enum)[],
  DependentUnknownAgentToolIdentifier(class)[],
    DependentUnknownAgentToolIdentifierType(enum)[],
  SecretDependencyType(enum)[],
  DependentPhoneNumberIdentifier(class)[],
    PhoneNumberId(string)[],
    PhoneNumber(string)[],
    Label(string)[],
    TelephonyProvider(ref)[],
  TelephonyProvider(enum)[Conversational AI],
  ConvAIWebhooks(class)[Conversational AI],
    PostCallWebhookId(string)[Conversational AI],
  ConvAIWorkspaceStoredSecretConfig(class)[],
    ConvAIWorkspaceStoredSecretConfigType(enum)[],
    SecretId(string)[],
    Name(string)[],
    ConvAIStoredSecretDependencies(ref)[],
  ConversationChargingCommonModel(class)[Conversational AI],
    DevDiscount(bool)[Conversational AI],
  ConversationConfigClientOverrideOutput(class)[Conversational AI],
    AgentConfigOverride(ref)[Conversational AI],
    TTSConversationalConfigOverride(ref)[Conversational AI],
  ConversationDeletionSettings(class)[Conversational AI],
    DeletionTimeUnixSecs(int)[Conversational AI],
    DeletedLogsAtTimeUnixSecs(int)[Conversational AI],
    DeletedAudioAtTimeUnixSecs(int)[Conversational AI],
    DeletedTranscriptAtTimeUnixSecs(int)[Conversational AI],
    DeleteTranscriptAndPii(bool)[Conversational AI],
    DeleteAudio(bool)[Conversational AI],
  ConversationHistoryAnalysisCommonModel(class)[Conversational AI],
    ConversationHistoryAnalysisCommonModelEvaluationCriteriaResults(class)[Conversational AI],
      ConversationHistoryEvaluationCriteriaResultCommonModel(ref)[Conversational AI],
    ConversationHistoryAnalysisCommonModelDataCollectionResults(class)[Conversational AI],
      DataCollectionResultCommonModel(ref)[Conversational AI],
    EvaluationSuccessResult(ref)[Conversational AI],
    TranscriptSummary(string)[Conversational AI],
  ConversationHistoryEvaluationCriteriaResultCommonModel(class)[Conversational AI],
    CriteriaId(string)[Conversational AI],
    EvaluationSuccessResult(ref)[Conversational AI],
    Rationale(string)[Conversational AI],
  EvaluationSuccessResult(enum)[Conversational AI],
  DataCollectionResultCommonModel(class)[Conversational AI],
    DataCollectionId(string)[Conversational AI],
    DataCollectionResultCommonModelValue(class)[Conversational AI],
    LiteralJsonSchemaProperty(ref)[Conversational AI],
    Rationale(string)[Conversational AI],
  ConversationHistoryFeedbackCommonModel(class)[Conversational AI],
    UserFeedbackScore(ref)[Conversational AI],
    Likes(int)[Conversational AI],
    Dislikes(int)[Conversational AI],
  ConversationHistoryMetadataCommonModel(class)[Conversational AI],
    StartTimeUnixSecs(int)[Conversational AI],
    CallDurationSecs(int)[Conversational AI],
    Cost(int)[Conversational AI],
    ConversationDeletionSettings(ref)[Conversational AI],
    ConversationHistoryFeedbackCommonModel(ref)[Conversational AI],
    AuthorizationMethod(ref)[Conversational AI],
    ConversationChargingCommonModel(ref)[Conversational AI],
    PhoneCall_AllOf1Wrapped(oneOf)[Conversational AI],
      ConversationHistoryTwilioPhoneCallModel(ref)[Conversational AI],
      ConversationHistoryMetadataCommonModelPhoneCallDiscriminator(class)[Conversational AI],
        ConversationHistoryMetadataCommonModelPhoneCallDiscriminatorType(enum)[Conversational AI],
    TerminationReason(string)[Conversational AI],
  ConversationHistoryTwilioPhoneCallModel(class)[Conversational AI],
    ConversationHistoryTwilioPhoneCallModelDirection(enum)[Conversational AI],
    PhoneNumberId(string)[Conversational AI],
    AgentNumber(string)[Conversational AI],
    ExternalNumber(string)[Conversational AI],
    ConversationHistoryTwilioPhoneCallModelType(enum)[Conversational AI],
    StreamSid(string)[Conversational AI],
    CallSid(string)[Conversational AI],
  ConversationHistoryTranscriptCommonModel(class)[Conversational AI],
    ConversationHistoryTranscriptCommonModelRole(enum)[Conversational AI],
    Message(string)[Conversational AI],
    ToolCalls(array)[Conversational AI],
      ConversationHistoryTranscriptToolCallCommonModel(ref)[Conversational AI],
    ToolResults(array)[Conversational AI],
      ConversationHistoryTranscriptToolResultCommonModel(ref)[Conversational AI],
    UserFeedback(ref)[Conversational AI],
    LlmOverride(string)[Conversational AI],
    TimeInCallSecs(int)[Conversational AI],
    ConversationTurnMetrics(ref)[Conversational AI],
    RagRetrievalInfo(ref)[Conversational AI],
  ConversationHistoryTranscriptToolCallCommonModel(class)[Conversational AI],
    RequestId(string)[Conversational AI],
    ToolName(string)[Conversational AI],
    ParamsAsJson(string)[Conversational AI],
    ToolHasBeenCalled(bool)[Conversational AI],
  ConversationHistoryTranscriptToolResultCommonModel(class)[Conversational AI],
    RequestId(string)[Conversational AI],
    ToolName(string)[Conversational AI],
    ResultValue(string)[Conversational AI],
    IsError(bool)[Conversational AI],
    ToolHasBeenCalled(bool)[Conversational AI],
  UserFeedback(class)[Conversational AI],
    UserFeedbackScore(ref)[Conversational AI],
    TimeInCallSecs(int)[Conversational AI],
  ConversationTurnMetrics(class)[Conversational AI],
    ConversationTurnMetricsMetrics(class)[Conversational AI],
      MetricRecord(ref)[Conversational AI],
  MetricRecord(class)[Conversational AI],
    ElapsedTime(double)[Conversational AI],
  RagRetrievalInfo(class)[Conversational AI],
    Chunks(array)[Conversational AI],
      RagChunkMetadata(ref)[Conversational AI],
    EmbeddingModelEnum(ref)[Conversational AI],
    RetrievalQuery(string)[Conversational AI],
    RagLatencySecs(double)[Conversational AI],
  RagChunkMetadata(class)[Conversational AI],
    DocumentId(string)[Conversational AI],
    ChunkId(string)[Conversational AI],
    VectorDistance(double)[Conversational AI],
  ConversationInitiationClientDataRequestOutput(class)[Conversational AI],
    ConversationConfigClientOverrideOutput(ref)[Conversational AI],
    ConversationInitiationClientDataRequestOutputCustomLlmExtraBody(class)[Conversational AI],
    ConversationInitiationClientDataRequestOutputDynamicVariables(class)[Conversational AI],
      DynamicVariables2(anyOf)[Conversational AI],
        DynamicVariablesVariant1(string)[Conversational AI],
        DynamicVariablesVariant2(double)[Conversational AI],
        DynamicVariablesVariant3(int)[Conversational AI],
        DynamicVariablesVariant4(bool)[Conversational AI],
  ConversationSignedUrlResponseModel(class)[Conversational AI],
    SignedUrl(string)[Conversational AI],
  ConversationSummaryResponseModel(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    AgentName(string)[Conversational AI],
    ConversationId(string)[Conversational AI],
    StartTimeUnixSecs(int)[Conversational AI],
    CallDurationSecs(int)[Conversational AI],
    MessageCount(int)[Conversational AI],
    ConversationSummaryResponseModelStatus(enum)[Conversational AI],
    EvaluationSuccessResult(ref)[Conversational AI],
  ConversationTokenDBModel(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    ConversationToken(string)[Conversational AI],
    ExpirationTimeUnixSecs(int)[Conversational AI],
    ConversationTokenPurpose(ref)[Conversational AI],
  ConversationTokenPurpose(enum)[Conversational AI],
  ConversationalConfigAPIModelOutput(class)[Conversational AI],
    ASRConversationalConfig(ref)[Conversational AI],
    TurnConfig(ref)[Conversational AI],
    TTSConversationalConfig(ref)[Conversational AI],
    ConversationConfig(ref)[Conversational AI],
    ConversationalConfigAPIModelOutputLanguagePresets(class)[Conversational AI],
      LanguagePresetOutput(ref)[Conversational AI],
    AgentConfigAPIModelOutput(ref)[Conversational AI],
  LanguagePresetOutput(class)[Conversational AI],
    ConversationConfigClientOverrideOutput(ref)[Conversational AI],
    LanguagePresetTranslation(ref)[Conversational AI],
  ConvertChapterResponseModel(class)[studio],
    Status(string)[studio],
  ConvertProjectResponseModel(class)[studio],
    Status(string)[studio],
  CreateAgentResponseModel(class)[Conversational AI],
    AgentId(string)[Conversational AI],
  CreatePhoneNumberResponseModel(class)[Conversational AI],
    PhoneNumberId(string)[Conversational AI],
  CreatePronunciationDictionaryResponseModel(class)[studio],
    Status(string)[studio],
  CreateSIPTrunkPhoneNumberRequest(class)[Conversational AI],
    PhoneNumber(string)[Conversational AI],
    TelephonyProvider(ref)[Conversational AI],
    Label(string)[Conversational AI],
    TerminationUri(string)[Conversational AI],
    SIPTrunkCredentials(ref)[Conversational AI],
  SIPTrunkCredentials(class)[Conversational AI],
    Username(string)[Conversational AI],
    Password(string)[Conversational AI],
  CreateTwilioPhoneNumberRequest(class)[Conversational AI],
    PhoneNumber(string)[Conversational AI],
    TelephonyProvider(ref)[Conversational AI],
    Label(string)[Conversational AI],
    Sid(string)[Conversational AI],
    Token(string)[Conversational AI],
  DeleteChapterResponseModel(class)[studio],
    Status(string)[studio],
  DeleteDubbingResponseModel(class)[dubbing],
    Status(string)[dubbing],
  DeleteHistoryItemResponse(class)[speech-history],
    Status(string)[speech-history],
  DeleteProjectResponseModel(class)[studio],
    Status(string)[studio],
  DeleteSampleResponseModel(class)[samples],
    Status(string)[samples],
  DeleteVoiceResponseModel(class)[voices],
    Status(string)[voices],
  DeleteWorkspaceGroupMemberResponseModel(class)[workspace],
    Status(string)[workspace],
  DeleteWorkspaceInviteResponseModel(class)[workspace],
    Status(string)[workspace],
  DependentAvailableAgentIdentifier(class)[Conversational AI],
    Id(string)[Conversational AI],
    Name(string)[Conversational AI],
    DependentAvailableAgentIdentifierType(enum)[Conversational AI],
    CreatedAtUnixSecs(int)[Conversational AI],
    DependentAvailableAgentIdentifierAccessLevel(enum)[Conversational AI],
  DependentUnknownAgentIdentifier(class)[Conversational AI],
    DependentUnknownAgentIdentifierType(enum)[Conversational AI],
  DoDubbingResponseModel(class)[dubbing],
    DubbingId(string)[dubbing],
    ExpectedDurationSec(double)[dubbing],
  DubbedSegment(class)[dubbing, resource, segment],
    StartTime(double)[dubbing, resource, segment],
    EndTime(double)[dubbing, resource, segment],
    Text(string)[dubbing, resource, segment],
    DubbingMediaReference(ref)[dubbing, resource, segment],
  DubbingMediaReference(class)[dubbing, resource, segment],
    Src(string)[dubbing, resource, segment],
    ContentType(string)[dubbing, resource, segment],
    BucketName(string)[dubbing, resource, segment],
    RandomPathSlug(string)[dubbing, resource, segment],
    DurationSecs(double)[dubbing, resource, segment],
    IsAudio(bool)[dubbing, resource, segment],
    Url(string)[dubbing, resource, segment],
  DubbingMediaMetadata(class)[dubbing],
    ContentType(string)[dubbing],
    Duration(double)[dubbing],
  DubbingMetadataResponse(class)[dubbing],
    DubbingId(string)[dubbing],
    Name(string)[dubbing],
    Status(string)[dubbing],
    TargetLanguages(array)[dubbing],
      TargetLanguagesItem(string)[dubbing],
    DubbingMediaMetadata(ref)[dubbing],
    Error(string)[dubbing],
  DubbingResource(class)[dubbing, resource, segment],
    Id(string)[dubbing, resource, segment],
    Version(int)[dubbing, resource, segment],
    SourceLanguage(string)[dubbing, resource, segment],
    TargetLanguages(array)[dubbing, resource, segment],
      TargetLanguagesItem(string)[dubbing, resource, segment],
    DubbingMediaReference(ref)[dubbing, resource, segment],
    DubbingMediaReference(ref)[dubbing, resource, segment],
    DubbingResourceSpeakerTracks(class)[dubbing, resource, segment],
      SpeakerTrack(ref)[dubbing, resource, segment],
    DubbingResourceSpeakerSegments(class)[dubbing, resource, segment],
      SpeakerSegment(ref)[dubbing, resource, segment],
  SpeakerTrack(class)[dubbing, resource, segment],
    Id(string)[dubbing, resource, segment],
    DubbingMediaReference(ref)[dubbing, resource, segment],
    SpeakerName(string)[dubbing, resource, segment],
    Segments(array)[dubbing, resource, segment],
      SegmentsItem(string)[dubbing, resource, segment],
  SpeakerSegment(class)[dubbing, resource, segment],
    Id(string)[dubbing, resource, segment],
    StartTime(double)[dubbing, resource, segment],
    EndTime(double)[dubbing, resource, segment],
    Text(string)[dubbing, resource, segment],
    SpeakerSegmentDubs(class)[dubbing, resource, segment],
      DubbedSegment(ref)[dubbing, resource, segment],
  EditChapterResponseModel(class)[studio, projects],
    ChapterWithContentResponseModel(ref)[studio, projects],
  EditProjectResponseModel(class)[studio, projects],
    ProjectResponseModel(ref)[studio, projects],
  EditVoiceResponseModel(class)[voices],
    Status(string)[voices],
  EditVoiceSettingsResponseModel(class)[voices],
    Status(string)[voices],
  ExtendedSubscriptionResponseModel(class)[user],
    Tier(string)[user],
    CharacterCount(int)[user],
    CharacterLimit(int)[user],
    CanExtendCharacterLimit(bool)[user],
    AllowedToExtendCharacterLimit(bool)[user],
    NextCharacterCountResetUnix(int)[user],
    VoiceSlotsUsed(int)[user],
    VoiceLimit(int)[user],
    MaxVoiceAddEdits(int)[user],
    VoiceAddEditCounter(int)[user],
    ProfessionalVoiceLimit(int)[user],
    CanExtendVoiceLimit(bool)[user],
    CanUseInstantVoiceCloning(bool)[user],
    CanUseProfessionalVoiceCloning(bool)[user],
    ExtendedSubscriptionResponseModelCurrency(enum)[user],
    ExtendedSubscriptionResponseModelStatus(enum)[user],
    ExtendedSubscriptionResponseModelBillingPeriod(enum)[user],
    ExtendedSubscriptionResponseModelCharacterRefreshPeriod(enum)[user],
    InvoiceResponseModel(ref)[user],
    HasOpenInvoices(bool)[user],
  InvoiceResponseModel(class)[user],
    AmountDueCents(int)[user],
    NextPaymentAttemptUnix(int)[user],
  FeedbackResponseModel(class)[speech-history],
    ThumbsUp(bool)[speech-history],
    Feedback(string)[speech-history],
    Emotions(bool)[speech-history],
    InaccurateClone(bool)[speech-history],
    Glitches(bool)[speech-history],
    AudioQuality(bool)[speech-history],
    Other(bool)[speech-history],
    ReviewStatus(string)[speech-history],
  FineTuningResponseModel(class)[voice-generation, text-to-voice, voices],
    IsAllowedToFineTune(bool)[voice-generation, text-to-voice, voices],
    FineTuningResponseModelState(class)[voice-generation, text-to-voice, voices],
      FineTuningResponseModelState2(enum)[voice-generation, text-to-voice, voices],
    VerificationFailures(array)[voice-generation, text-to-voice, voices],
      VerificationFailuresItem(string)[voice-generation, text-to-voice, voices],
    VerificationAttemptsCount(int)[voice-generation, text-to-voice, voices],
    ManualVerificationRequested(bool)[voice-generation, text-to-voice, voices],
    Language(string)[voice-generation, text-to-voice, voices],
    FineTuningResponseModelProgress(class)[voice-generation, text-to-voice, voices],
      Progress(double)[voice-generation, text-to-voice, voices],
    FineTuningResponseModelMessage(class)[voice-generation, text-to-voice, voices],
      Message(string)[voice-generation, text-to-voice, voices],
    DatasetDurationSeconds(double)[voice-generation, text-to-voice, voices],
    VerificationAttempts(array)[voice-generation, text-to-voice, voices],
      VerificationAttemptResponseModel(ref)[voice-generation, text-to-voice, voices],
    SliceIds(array)[voice-generation, text-to-voice, voices],
      SliceIdsItem(string)[voice-generation, text-to-voice, voices],
    ManualVerificationResponseModel(ref)[voice-generation, text-to-voice, voices],
    MaxVerificationAttempts(int)[voice-generation, text-to-voice, voices],
    NextMaxVerificationAttemptsResetUnixMs(int)[voice-generation, text-to-voice, voices],
  VerificationAttemptResponseModel(class)[voice-generation, text-to-voice, voices],
    Text(string)[voice-generation, text-to-voice, voices],
    DateUnix(int)[voice-generation, text-to-voice, voices],
    Accepted(bool)[voice-generation, text-to-voice, voices],
    Similarity(double)[voice-generation, text-to-voice, voices],
    LevenshteinDistance(double)[voice-generation, text-to-voice, voices],
    RecordingResponseModel(ref)[voice-generation, text-to-voice, voices],
  RecordingResponseModel(class)[voice-generation, text-to-voice, voices],
    RecordingId(string)[voice-generation, text-to-voice, voices],
    MimeType(string)[voice-generation, text-to-voice, voices],
    SizeBytes(int)[voice-generation, text-to-voice, voices],
    UploadDateUnix(int)[voice-generation, text-to-voice, voices],
    Transcription(string)[voice-generation, text-to-voice, voices],
  ManualVerificationResponseModel(class)[voice-generation, text-to-voice, voices],
    ExtraText(string)[voice-generation, text-to-voice, voices],
    RequestTimeUnix(int)[voice-generation, text-to-voice, voices],
    Files(array)[voice-generation, text-to-voice, voices],
      ManualVerificationFileResponseModel(ref)[voice-generation, text-to-voice, voices],
  ManualVerificationFileResponseModel(class)[voice-generation, text-to-voice, voices],
    FileId(string)[voice-generation, text-to-voice, voices],
    FileName(string)[voice-generation, text-to-voice, voices],
    MimeType(string)[voice-generation, text-to-voice, voices],
    SizeBytes(int)[voice-generation, text-to-voice, voices],
    UploadDateUnix(int)[voice-generation, text-to-voice, voices],
  GetAgentEmbedResponseModel(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    WidgetConfigResponseModel(ref)[Conversational AI],
  WidgetConfigResponseModel(class)[Conversational AI],
    EmbedVariant(ref)[Conversational AI],
    WidgetExpandable(ref)[Conversational AI],
    Avatar2(anyOf)[Conversational AI],
      OrbAvatar(ref)[Conversational AI],
      URLAvatar(ref)[Conversational AI],
      ImageAvatar(ref)[Conversational AI],
    WidgetFeedbackMode(ref)[Conversational AI],
    BgColor(string)[Conversational AI],
    TextColor(string)[Conversational AI],
    BtnColor(string)[Conversational AI],
    BtnTextColor(string)[Conversational AI],
    BorderColor(string)[Conversational AI],
    FocusColor(string)[Conversational AI],
    BorderRadius(int)[Conversational AI],
    BtnRadius(int)[Conversational AI],
    ActionText(string)[Conversational AI],
    StartCallText(string)[Conversational AI],
    EndCallText(string)[Conversational AI],
    ExpandText(string)[Conversational AI],
    ListeningText(string)[Conversational AI],
    SpeakingText(string)[Conversational AI],
    ShareablePageText(string)[Conversational AI],
    ShareablePageShowTerms(bool)[Conversational AI],
    TermsText(string)[Conversational AI],
    TermsHtml(string)[Conversational AI],
    TermsKey(string)[Conversational AI],
    ShowAvatarWhenCollapsed(bool)[Conversational AI],
    DisableBanner(bool)[Conversational AI],
    MicMutingEnabled(bool)[Conversational AI],
    Language(string)[Conversational AI],
    SupportedLanguageOverrides(array)[Conversational AI],
      SupportedLanguageOverridesItem(string)[Conversational AI],
  GetAgentLinkResponseModel(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    ConversationTokenDBModel(ref)[Conversational AI],
  GetAgentResponseModel(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    Name(string)[Conversational AI],
    ConversationalConfigAPIModelOutput(ref)[Conversational AI],
    AgentMetadataResponseModel(ref)[Conversational AI],
    AgentPlatformSettingsResponseModel(ref)[Conversational AI],
    PhoneNumbers(array)[Conversational AI],
      GetPhoneNumberResponseModel(ref)[Conversational AI],
  GetPhoneNumberResponseModel(class)[Conversational AI],
    PhoneNumber(string)[Conversational AI],
    TelephonyProvider(ref)[Conversational AI],
    Label(string)[Conversational AI],
    PhoneNumberId(string)[Conversational AI],
    PhoneNumberAgentInfo(ref)[Conversational AI],
  PhoneNumberAgentInfo(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    AgentName(string)[Conversational AI],
  GetAgentsPageResponseModel(class)[Conversational AI],
    Agents(array)[Conversational AI],
      AgentSummaryResponseModel(ref)[Conversational AI],
    NextCursor(string)[Conversational AI],
    HasMore(bool)[Conversational AI],
  GetAudioNativeProjectSettingsResponseModel(class)[audio-native],
    Enabled(bool)[audio-native],
    SnapshotId(string)[audio-native],
    AudioNativeProjectSettingsResponseModel(ref)[audio-native],
  GetChaptersResponseModel(class)[studio, projects],
    Chapters(array)[studio, projects],
      ChapterResponseModel(ref)[studio, projects],
  GetConvAISettingsResponseModel(class)[Conversational AI],
    ConversationInitiationClientDataWebhook(ref)[Conversational AI],
    ConvAIWebhooks(ref)[Conversational AI],
  GetConversationResponseModel(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    ConversationId(string)[Conversational AI],
    GetConversationResponseModelStatus(enum)[Conversational AI],
    Transcript(array)[Conversational AI],
      ConversationHistoryTranscriptCommonModel(ref)[Conversational AI],
    ConversationHistoryMetadataCommonModel(ref)[Conversational AI],
    ConversationHistoryAnalysisCommonModel(ref)[Conversational AI],
    ConversationInitiationClientDataRequestOutput(ref)[Conversational AI],
  GetConversationsPageResponseModel(class)[Conversational AI],
    Conversations(array)[Conversational AI],
      ConversationSummaryResponseModel(ref)[Conversational AI],
    NextCursor(string)[Conversational AI],
    HasMore(bool)[Conversational AI],
  GetKnowledgeBaseDependentAgentsResponseModel(class)[Conversational AI],
    Agents(array)[Conversational AI],
      AgentsItem(oneOf)[Conversational AI],
        DependentAvailableAgentIdentifier(ref)[Conversational AI],
        DependentUnknownAgentIdentifier(ref)[Conversational AI],
        GetKnowledgeBaseDependentAgentsResponseModelAgentDiscriminator(class)[Conversational AI],
          GetKnowledgeBaseDependentAgentsResponseModelAgentDiscriminatorType(enum)[Conversational AI],
    NextCursor(string)[Conversational AI],
    HasMore(bool)[Conversational AI],
  GetKnowledgeBaseFileResponseModel(class)[Conversational AI],
    Id(string)[Conversational AI],
    Name(string)[Conversational AI],
    KnowledgeBaseDocumentMetadataResponseModel(ref)[Conversational AI],
    PromptInjectable(bool)[Conversational AI],
    ResourceAccessInfo(ref)[Conversational AI],
    ExtractedInnerHtml(string)[Conversational AI],
    GetKnowledgeBaseFileResponseModelType(enum)[Conversational AI],
  KnowledgeBaseDocumentMetadataResponseModel(class)[Conversational AI],
    CreatedAtUnixSecs(int)[Conversational AI],
    LastUpdatedAtUnixSecs(int)[Conversational AI],
    SizeBytes(int)[Conversational AI],
  GetKnowledgeBaseListResponseModel(class)[Conversational AI],
    Documents(array)[Conversational AI],
      DocumentsItem(oneOf)[Conversational AI],
        GetKnowledgeBaseSummaryURLResponseModel(ref)[Conversational AI],
        GetKnowledgeBaseSummaryFileResponseModel(ref)[Conversational AI],
        GetKnowledgeBaseListResponseModelDocumentDiscriminator(class)[Conversational AI],
          GetKnowledgeBaseListResponseModelDocumentDiscriminatorType(enum)[Conversational AI],
    NextCursor(string)[Conversational AI],
    HasMore(bool)[Conversational AI],
  GetKnowledgeBaseSummaryURLResponseModel(class)[Conversational AI],
    Id(string)[Conversational AI],
    Name(string)[Conversational AI],
    KnowledgeBaseDocumentMetadataResponseModel(ref)[Conversational AI],
    PromptInjectable(bool)[Conversational AI],
    ResourceAccessInfo(ref)[Conversational AI],
    DependentAgents(array)[Conversational AI],
      DependentAgentsItem2(oneOf)[Conversational AI],
        DependentAvailableAgentIdentifier(ref)[Conversational AI],
        DependentUnknownAgentIdentifier(ref)[Conversational AI],
        GetKnowledgeBaseSummaryURLResponseModelDependentAgentDiscriminator(class)[Conversational AI],
          GetKnowledgeBaseSummaryURLResponseModelDependentAgentDiscriminatorType(enum)[Conversational AI],
    GetKnowledgeBaseSummaryURLResponseModelType(enum)[Conversational AI],
    Url(string)[Conversational AI],
  GetKnowledgeBaseSummaryFileResponseModel(class)[Conversational AI],
    Id(string)[Conversational AI],
    Name(string)[Conversational AI],
    KnowledgeBaseDocumentMetadataResponseModel(ref)[Conversational AI],
    PromptInjectable(bool)[Conversational AI],
    ResourceAccessInfo(ref)[Conversational AI],
    DependentAgents(array)[Conversational AI],
      DependentAgentsItem(oneOf)[Conversational AI],
        DependentAvailableAgentIdentifier(ref)[Conversational AI],
        DependentUnknownAgentIdentifier(ref)[Conversational AI],
        GetKnowledgeBaseSummaryFileResponseModelDependentAgentDiscriminator(class)[Conversational AI],
          GetKnowledgeBaseSummaryFileResponseModelDependentAgentDiscriminatorType(enum)[Conversational AI],
    GetKnowledgeBaseSummaryFileResponseModelType(enum)[Conversational AI],
  GetKnowledgeBaseURLResponseModel(class)[Conversational AI],
    Id(string)[Conversational AI],
    Name(string)[Conversational AI],
    KnowledgeBaseDocumentMetadataResponseModel(ref)[Conversational AI],
    PromptInjectable(bool)[Conversational AI],
    ResourceAccessInfo(ref)[Conversational AI],
    ExtractedInnerHtml(string)[Conversational AI],
    GetKnowledgeBaseURLResponseModelType(enum)[Conversational AI],
    Url(string)[Conversational AI],
  GetLibraryVoicesResponseModel(class)[voices],
    Voices(array)[voices],
      LibraryVoiceResponseModel(ref)[voices],
    HasMore(bool)[voices],
    LastSortId(string)[voices],
  LibraryVoiceResponseModel(class)[voices],
    PublicOwnerId(string)[voices],
    VoiceId(string)[voices],
    DateUnix(int)[voices],
    Name(string)[voices],
    Accent(string)[voices],
    Gender(string)[voices],
    Age(string)[voices],
    Descriptive(string)[voices],
    UseCase(string)[voices],
    LibraryVoiceResponseModelCategory(enum)[voices],
    Language(string)[voices],
    Locale(string)[voices],
    Description(string)[voices],
    PreviewUrl(string)[voices],
    UsageCharacterCount1y(int)[voices],
    UsageCharacterCount7d(int)[voices],
    PlayApiUsageCharacterCount1y(int)[voices],
    ClonedByCount(int)[voices],
    Rate(double)[voices],
    FreeUsersAllowed(bool)[voices],
    LiveModerationEnabled(bool)[voices],
    Featured(bool)[voices],
    VerifiedLanguages(array)[voices],
      VerifiedVoiceLanguageResponseModel(ref)[voices],
    NoticePeriod(int)[voices],
    InstagramUsername(string)[voices],
    TwitterUsername(string)[voices],
    YoutubeUsername(string)[voices],
    TiktokUsername(string)[voices],
    ImageUrl(string)[voices],
    IsAddedByUser(bool)[voices],
  VerifiedVoiceLanguageResponseModel(class)[voice-generation, text-to-voice, voices],
    Language(string)[voice-generation, text-to-voice, voices],
    ModelId(string)[voice-generation, text-to-voice, voices],
    Accent(string)[voice-generation, text-to-voice, voices],
    PreviewUrl(string)[voice-generation, text-to-voice, voices],
  GetProjectsResponseModel(class)[studio, projects],
    Projects(array)[studio, projects],
      ProjectResponseModel(ref)[studio, projects],
  GetPronunciationDictionariesMetadataResponseModel(class)[Pronunciation Dictionary],
    PronunciationDictionaries(array)[Pronunciation Dictionary],
      GetPronunciationDictionaryMetadataResponseModel(ref)[Pronunciation Dictionary],
    NextCursor(string)[Pronunciation Dictionary],
    HasMore(bool)[Pronunciation Dictionary],
  GetPronunciationDictionaryMetadataResponseModel(class)[Pronunciation Dictionary],
    Id(string)[Pronunciation Dictionary],
    LatestVersionId(string)[Pronunciation Dictionary],
    LatestVersionRulesNum(int)[Pronunciation Dictionary],
    Name(string)[Pronunciation Dictionary],
    CreatedBy(string)[Pronunciation Dictionary],
    CreationTimeUnix(int)[Pronunciation Dictionary],
    ArchivedTimeUnix(int)[Pronunciation Dictionary],
    Description(string)[Pronunciation Dictionary],
  GetSpeechHistoryResponseModel(class)[speech-history],
    History(array)[speech-history],
      SpeechHistoryItemResponseModel(ref)[speech-history],
    LastHistoryItemId(string)[speech-history],
    HasMore(bool)[speech-history],
  SpeechHistoryItemResponseModel(class)[speech-history],
    HistoryItemId(string)[speech-history],
    RequestId(string)[speech-history],
    VoiceId(string)[speech-history],
    ModelId(string)[speech-history],
    VoiceName(string)[speech-history],
    SpeechHistoryItemResponseModelVoiceCategory(enum)[speech-history],
    Text(string)[speech-history],
    DateUnix(int)[speech-history],
    CharacterCountChangeFrom(int)[speech-history],
    CharacterCountChangeTo(int)[speech-history],
    ContentType(string)[speech-history],
    SpeechHistoryItemResponseModelState(enum)[speech-history],
    SpeechHistoryItemResponseModelSettings(class)[speech-history],
    FeedbackResponseModel(ref)[speech-history],
    ShareLinkId(string)[speech-history],
    SpeechHistoryItemResponseModelSource(enum)[speech-history],
    HistoryAlignmentsResponseModel(ref)[speech-history],
  HistoryAlignmentsResponseModel(class)[speech-history],
    HistoryAlignmentResponseModel(ref)[speech-history],
    HistoryAlignmentResponseModel(ref)[speech-history],
  HistoryAlignmentResponseModel(class)[speech-history],
    Characters(array)[speech-history],
      CharactersItem(string)[speech-history],
    CharacterStartTimesSeconds(array)[speech-history],
      CharacterStartTimesSecondsItem(double)[speech-history],
    CharacterEndTimesSeconds(array)[speech-history],
      CharacterEndTimesSecondsItem(double)[speech-history],
  GetVoicesResponseModel(class)[voices],
    Voices(array)[voices],
      VoiceResponseModel(ref)[voices],
  VoiceResponseModel(class)[voice-generation, text-to-voice, voices],
    VoiceId(string)[voice-generation, text-to-voice, voices],
    Name(string)[voice-generation, text-to-voice, voices],
    Samples(array)[voice-generation, text-to-voice, voices],
      SampleResponseModel(ref)[voice-generation, text-to-voice, voices],
    VoiceResponseModelCategory(enum)[voice-generation, text-to-voice, voices],
    FineTuningResponseModel(ref)[voice-generation, text-to-voice, voices],
    VoiceResponseModelLabels(class)[voice-generation, text-to-voice, voices],
      Labels(string)[voice-generation, text-to-voice, voices],
    Description(string)[voice-generation, text-to-voice, voices],
    PreviewUrl(string)[voice-generation, text-to-voice, voices],
    AvailableForTiers(array)[voice-generation, text-to-voice, voices],
      AvailableForTiersItem(string)[voice-generation, text-to-voice, voices],
    VoiceSettingsResponseModel(ref)[voice-generation, text-to-voice, voices],
    VoiceSharingResponseModel(ref)[voice-generation, text-to-voice, voices],
    HighQualityBaseModelIds(array)[voice-generation, text-to-voice, voices],
      HighQualityBaseModelIdsItem(string)[voice-generation, text-to-voice, voices],
    VerifiedLanguages(array)[voice-generation, text-to-voice, voices],
      VerifiedVoiceLanguageResponseModel(ref)[voice-generation, text-to-voice, voices],
    VoiceResponseModelSafetyControl(enum)[voice-generation, text-to-voice, voices],
    VoiceVerificationResponseModel(ref)[voice-generation, text-to-voice, voices],
    PermissionOnResource(string)[voice-generation, text-to-voice, voices],
    IsOwner(bool)[voice-generation, text-to-voice, voices],
    IsLegacy(bool)[voice-generation, text-to-voice, voices],
    IsMixed(bool)[voice-generation, text-to-voice, voices],
    CreatedAtUnix(int)[voice-generation, text-to-voice, voices],
  SampleResponseModel(class)[voice-generation, text-to-voice, voices],
    SampleId(string)[voice-generation, text-to-voice, voices],
    FileName(string)[voice-generation, text-to-voice, voices],
    MimeType(string)[voice-generation, text-to-voice, voices],
    SizeBytes(int)[voice-generation, text-to-voice, voices],
    Hash(string)[voice-generation, text-to-voice, voices],
    DurationSecs(double)[voice-generation, text-to-voice, voices],
    RemoveBackgroundNoise(bool)[voice-generation, text-to-voice, voices],
    HasIsolatedAudio(bool)[voice-generation, text-to-voice, voices],
    HasIsolatedAudioPreview(bool)[voice-generation, text-to-voice, voices],
    SpeakerSeparationResponseModel(ref)[voice-generation, text-to-voice, voices],
  SpeakerSeparationResponseModel(class)[voice-generation, text-to-voice, voices],
    VoiceId(string)[voice-generation, text-to-voice, voices],
    SampleId(string)[voice-generation, text-to-voice, voices],
    SpeakerSeparationResponseModelStatus(enum)[voice-generation, text-to-voice, voices],
    SpeakerSeparationResponseModelSpeakers(class)[voice-generation, text-to-voice, voices],
      SpeakerResponseModel(ref)[voice-generation, text-to-voice, voices],
    SelectedSpeakerIds(array)[voice-generation, text-to-voice, voices],
      SelectedSpeakerIdsItem(string)[voice-generation, text-to-voice, voices],
  SpeakerResponseModel(class)[voice-generation, text-to-voice, voices],
    SpeakerId(string)[voice-generation, text-to-voice, voices],
    DurationSecs(double)[voice-generation, text-to-voice, voices],
    Utterances(array)[voice-generation, text-to-voice, voices],
      UtteranceResponseModel(ref)[voice-generation, text-to-voice, voices],
  UtteranceResponseModel(class)[voice-generation, text-to-voice, voices],
    Start(double)[voice-generation, text-to-voice, voices],
    End(double)[voice-generation, text-to-voice, voices],
  VoiceSharingResponseModel(class)[voice-generation, text-to-voice, voices],
    VoiceSharingResponseModelStatus(enum)[voice-generation, text-to-voice, voices],
    HistoryItemSampleId(string)[voice-generation, text-to-voice, voices],
    DateUnix(int)[voice-generation, text-to-voice, voices],
    WhitelistedEmails(array)[voice-generation, text-to-voice, voices],
      WhitelistedEmailsItem(string)[voice-generation, text-to-voice, voices],
    PublicOwnerId(string)[voice-generation, text-to-voice, voices],
    OriginalVoiceId(string)[voice-generation, text-to-voice, voices],
    FinancialRewardsEnabled(bool)[voice-generation, text-to-voice, voices],
    FreeUsersAllowed(bool)[voice-generation, text-to-voice, voices],
    LiveModerationEnabled(bool)[voice-generation, text-to-voice, voices],
    Rate(double)[voice-generation, text-to-voice, voices],
    NoticePeriod(int)[voice-generation, text-to-voice, voices],
    DisableAtUnix(int)[voice-generation, text-to-voice, voices],
    VoiceMixingAllowed(bool)[voice-generation, text-to-voice, voices],
    Featured(bool)[voice-generation, text-to-voice, voices],
    VoiceSharingResponseModelCategory(enum)[voice-generation, text-to-voice, voices],
    ReaderAppEnabled(bool)[voice-generation, text-to-voice, voices],
    ImageUrl(string)[voice-generation, text-to-voice, voices],
    BanReason(string)[voice-generation, text-to-voice, voices],
    LikedByCount(int)[voice-generation, text-to-voice, voices],
    ClonedByCount(int)[voice-generation, text-to-voice, voices],
    Name(string)[voice-generation, text-to-voice, voices],
    Description(string)[voice-generation, text-to-voice, voices],
    VoiceSharingResponseModelLabels(class)[voice-generation, text-to-voice, voices],
      Labels(string)[voice-generation, text-to-voice, voices],
    VoiceSharingResponseModelReviewStatus(enum)[voice-generation, text-to-voice, voices],
    ReviewMessage(string)[voice-generation, text-to-voice, voices],
    EnabledInLibrary(bool)[voice-generation, text-to-voice, voices],
    InstagramUsername(string)[voice-generation, text-to-voice, voices],
    TwitterUsername(string)[voice-generation, text-to-voice, voices],
    YoutubeUsername(string)[voice-generation, text-to-voice, voices],
    TiktokUsername(string)[voice-generation, text-to-voice, voices],
    VoiceSharingModerationCheckResponseModel(ref)[voice-generation, text-to-voice, voices],
    ReaderRestrictedOn(array)[voice-generation, text-to-voice, voices],
      ReaderResourceResponseModel(ref)[voice-generation, text-to-voice, voices],
  VoiceSharingModerationCheckResponseModel(class)[voice-generation, text-to-voice, voices],
    DateCheckedUnix(int)[voice-generation, text-to-voice, voices],
    NameValue(string)[voice-generation, text-to-voice, voices],
    NameCheck(bool)[voice-generation, text-to-voice, voices],
    DescriptionValue(string)[voice-generation, text-to-voice, voices],
    DescriptionCheck(bool)[voice-generation, text-to-voice, voices],
    SampleIds(array)[voice-generation, text-to-voice, voices],
      SampleIdsItem(string)[voice-generation, text-to-voice, voices],
    SampleChecks(array)[voice-generation, text-to-voice, voices],
      SampleChecksItem(double)[voice-generation, text-to-voice, voices],
    CaptchaIds(array)[voice-generation, text-to-voice, voices],
      CaptchaIdsItem(string)[voice-generation, text-to-voice, voices],
    CaptchaChecks(array)[voice-generation, text-to-voice, voices],
      CaptchaChecksItem(double)[voice-generation, text-to-voice, voices],
  ReaderResourceResponseModel(class)[voice-generation, text-to-voice, voices],
    ReaderResourceResponseModelResourceType(enum)[voice-generation, text-to-voice, voices],
    ResourceId(string)[voice-generation, text-to-voice, voices],
  VoiceVerificationResponseModel(class)[voice-generation, text-to-voice, voices],
    RequiresVerification(bool)[voice-generation, text-to-voice, voices],
    IsVerified(bool)[voice-generation, text-to-voice, voices],
    VerificationFailures(array)[voice-generation, text-to-voice, voices],
      VerificationFailuresItem(string)[voice-generation, text-to-voice, voices],
    VerificationAttemptsCount(int)[voice-generation, text-to-voice, voices],
    Language(string)[voice-generation, text-to-voice, voices],
    VerificationAttempts(array)[voice-generation, text-to-voice, voices],
      VerificationAttemptResponseModel(ref)[voice-generation, text-to-voice, voices],
  GetVoicesV2ResponseModel(class)[voices],
    Voices(array)[voices],
      VoiceResponseModel(ref)[voices],
    HasMore(bool)[voices],
    TotalCount(int)[voices],
    NextPageToken(string)[voices],
  GetWorkspaceSecretsResponseModel(class)[],
    Secrets(array)[],
      ConvAIWorkspaceStoredSecretConfig(ref)[],
  HTTPValidationError(class)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
    Detail(array)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
      ValidationError(ref)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
  ValidationError(class)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
    Loc(array)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
      LocItem(anyOf)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
        LocItemVariant1(string)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
        LocItemVariant2(int)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
    Msg(string)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
    Type(string)[speech-history, sound-generation, audio-isolation, samples, text-to-speech, speech-to-speech, voice-generation, text-to-voice, user, voices, studio, projects, dubbing, resource, segment, models, audio-native, usage, Pronunciation Dictionary, workspace, speech-to-text, Conversational AI],
  KnowledgeBaseDocumentChunkResponseModel(class)[Conversational AI],
    Id(string)[Conversational AI],
    Name(string)[Conversational AI],
    Content(string)[Conversational AI],
  LanguageAddedResponse(class)[dubbing, resource, segment],
    Version(int)[dubbing, resource, segment],
  LanguageResponseModel(class)[models],
    LanguageId(string)[models],
    Name(string)[models],
  ModelRatesResponseModel(class)[models],
    CharacterCostMultiplier(double)[models],
  ModelResponseModel(class)[models],
    ModelId(string)[models],
    Name(string)[models],
    CanBeFinetuned(bool)[models],
    CanDoTextToSpeech(bool)[models],
    CanDoVoiceConversion(bool)[models],
    CanUseStyle(bool)[models],
    CanUseSpeakerBoost(bool)[models],
    ServesProVoices(bool)[models],
    TokenCostFactor(double)[models],
    Description(string)[models],
    RequiresAlphaAccess(bool)[models],
    MaxCharactersRequestFreeUser(int)[models],
    MaxCharactersRequestSubscribedUser(int)[models],
    MaximumTextLengthPerRequest(int)[models],
    Languages(array)[models],
      LanguageResponseModel(ref)[models],
    ModelRatesResponseModel(ref)[models],
    ModelResponseModelConcurrencyGroup(enum)[models],
  ModerationStatusResponseModel(class)[user],
    IsInProbation(bool)[user],
    EnterpriseCheckNogoVoice(bool)[user],
    EnterpriseCheckBlockNogoVoice(bool)[user],
    NeverLiveModerate(bool)[user],
    NogoVoiceSimilarVoiceUploadCount(int)[user],
    EnterpriseBackgroundModerationEnabled(bool)[user],
    ModerationStatusResponseModelSafetyStatus(enum)[user],
    ModerationStatusResponseModelWarningStatus(enum)[user],
    OnWatchlist(bool)[user],
  PatchConvAISettingsRequest(class)[Conversational AI],
    ConversationInitiationClientDataWebhook(ref)[Conversational AI],
    ConvAIWebhooks(ref)[Conversational AI],
  PodcastProjectResponseModel(class)[studio, projects],
    ProjectResponseModel(ref)[studio, projects],
  PostAgentAvatarResponseModel(class)[Conversational AI],
    AgentId(string)[Conversational AI],
    AvatarUrl(string)[Conversational AI],
  PostWorkspaceSecretRequest(class)[Conversational AI],
    PostWorkspaceSecretRequestType(enum)[Conversational AI],
    Name(string)[Conversational AI],
    Value(string)[Conversational AI],
  PostWorkspaceSecretResponseModel(class)[Conversational AI],
    PostWorkspaceSecretResponseModelType(enum)[Conversational AI],
    SecretId(string)[Conversational AI],
    Name(string)[Conversational AI],
  ProfilePageResponseModel(class)[voices],
    Handle(string)[voices],
    PublicUserId(string)[voices],
    Name(string)[voices],
    Bio(string)[voices],
    ProfilePicture(string)[voices],
  ProjectExtendedResponseModel(class)[studio, projects],
    ProjectId(string)[studio, projects],
    Name(string)[studio, projects],
    CreateDateUnix(int)[studio, projects],
    DefaultTitleVoiceId(string)[studio, projects],
    DefaultParagraphVoiceId(string)[studio, projects],
    DefaultModelId(string)[studio, projects],
    LastConversionDateUnix(int)[studio, projects],
    CanBeDownloaded(bool)[studio, projects],
    Title(string)[studio, projects],
    Author(string)[studio, projects],
    Description(string)[studio, projects],
    Genres(array)[studio, projects],
      GenresItem(string)[studio, projects],
    CoverImageUrl(string)[studio, projects],
    ProjectExtendedResponseModelTargetAudience(enum)[studio, projects],
    Language(string)[studio, projects],
    ContentType(string)[studio, projects],
    OriginalPublicationDate(string)[studio, projects],
    MatureContent(bool)[studio, projects],
    IsbnNumber(string)[studio, projects],
    VolumeNormalization(bool)[studio, projects],
    ProjectExtendedResponseModelState(enum)[studio, projects],
    ProjectExtendedResponseModelAccessLevel(enum)[studio, projects],
    ProjectExtendedResponseModelFiction(enum)[studio, projects],
    QualityCheckOn(bool)[studio, projects],
    QualityCheckOnWhenBulkConvert(bool)[studio, projects],
    ProjectCreationMetaResponseModel(ref)[studio, projects],
    ProjectExtendedResponseModelSourceType(enum)[studio, projects],
    ChaptersEnabled(bool)[studio, projects],
    ProjectExtendedResponseModelQualityPreset(enum)[studio, projects],
    Chapters(array)[studio, projects],
      ChapterResponseModel(ref)[studio, projects],
    PronunciationDictionaryVersions(array)[studio, projects],
      PronunciationDictionaryVersionResponseModel(ref)[studio, projects],
    ProjectExtendedResponseModelApplyTextNormalization(enum)[studio, projects],
    ProjectExtendedResponseModelExperimental(class)[studio, projects],
  PronunciationDictionaryVersionResponseModel(class)[studio, projects],
    VersionId(string)[studio, projects],
    VersionRulesNum(int)[studio, projects],
    PronunciationDictionaryId(string)[studio, projects],
    DictionaryName(string)[studio, projects],
    VersionName(string)[studio, projects],
    CreatedBy(string)[studio, projects],
    CreationTimeUnix(int)[studio, projects],
    ArchivedTimeUnix(int)[studio, projects],
  ProjectSnapshotExtendedResponseModel(class)[studio],
    ProjectSnapshotId(string)[studio],
    ProjectId(string)[studio],
    CreatedAtUnix(int)[studio],
    Name(string)[studio],
    ProjectSnapshotExtendedResponseModelAudioUpload(class)[studio],
    ProjectSnapshotExtendedResponseModelZipUpload(class)[studio],
    CharacterAlignments(array)[studio],
      CharacterAlignmentModel(ref)[studio],
  ProjectSnapshotResponseModel(class)[studio, projects],
    ProjectSnapshotId(string)[studio, projects],
    ProjectId(string)[studio, projects],
    CreatedAtUnix(int)[studio, projects],
    Name(string)[studio, projects],
    ProjectSnapshotResponseModelAudioUpload(class)[studio, projects],
    ProjectSnapshotResponseModelZipUpload(class)[studio, projects],
  ProjectSnapshotsResponseModel(class)[studio, projects],
    Snapshots(array)[studio, projects],
      ProjectSnapshotResponseModel(ref)[studio, projects],
  RAGIndexRequestModel(class)[Conversational AI],
    EmbeddingModelEnum(ref)[Conversational AI],
  RAGIndexResponseModel(class)[Conversational AI],
    RAGIndexStatus(ref)[Conversational AI],
    ProgressPercentage(double)[Conversational AI],
  RAGIndexStatus(enum)[Conversational AI],
  RemovePronunciationDictionaryRulesResponseModel(class)[Pronunciation Dictionary],
    Id(string)[Pronunciation Dictionary],
    VersionId(string)[Pronunciation Dictionary],
    VersionRulesNum(int)[Pronunciation Dictionary],
  ResourceMetadataResponseModel(class)[workspace],
    ResourceId(string)[workspace],
    WorkspaceResourceType(ref)[workspace],
    CreatorUserId(string)[workspace],
    ResourceMetadataResponseModelRoleToGroupIds(class)[workspace],
      RoleToGroupIds(array)[workspace],
        RoleToGroupIdsItem(string)[workspace],
    ShareOptions(array)[workspace],
      ShareOptionResponseModel(ref)[workspace],
  ShareOptionResponseModel(class)[workspace],
    Name(string)[workspace],
    Id(string)[workspace],
    ShareOptionResponseModelType(enum)[workspace],
  SafetyCommonModel(class)[],
    SafetyEvaluation(ref)[],
    SafetyEvaluation(ref)[],
  SafetyEvaluation(class)[],
    IsUnsafe(bool)[],
    LlmReason(string)[],
    SafetyPromptVersion(int)[],
    MatchedRuleId(array)[],
      SafetyRule(ref)[],
  SafetyRule(enum)[],
  SegmentCreatePayload(class)[dubbing, resource, segment],
    StartTime(double)[dubbing, resource, segment],
    EndTime(double)[dubbing, resource, segment],
    Text(string)[dubbing, resource, segment],
  SegmentCreateResponse(class)[dubbing, resource, segment],
    Version(int)[dubbing, resource, segment],
    NewSegment(string)[dubbing, resource, segment],
  SegmentDeleteResponse(class)[dubbing, resource, segment],
    Version(int)[dubbing, resource, segment],
  SegmentDubResponse(class)[dubbing, resource, segment],
    Version(int)[dubbing, resource, segment],
  SegmentTranscriptionResponse(class)[dubbing, resource, segment],
    Version(int)[dubbing, resource, segment],
  SegmentTranslationResponse(class)[dubbing, resource, segment],
    Version(int)[dubbing, resource, segment],
  SegmentUpdatePayload(class)[dubbing, resource, segment],
    StartTime(double)[dubbing, resource, segment],
    EndTime(double)[dubbing, resource, segment],
    Text(string)[dubbing, resource, segment],
  SegmentUpdateResponse(class)[dubbing, resource, segment],
    Version(int)[dubbing, resource, segment],
  SpeechToTextCharacterResponseModel(class)[speech-to-text],
    Text(string)[speech-to-text],
    Start(double)[speech-to-text],
    End(double)[speech-to-text],
  SpeechToTextChunkResponseModel(class)[speech-to-text],
    LanguageCode(string)[speech-to-text],
    LanguageProbability(double)[speech-to-text],
    Text(string)[speech-to-text],
    Words(array)[speech-to-text],
      SpeechToTextWordResponseModel(ref)[speech-to-text],
  SpeechToTextWordResponseModel(class)[speech-to-text],
    Text(string)[speech-to-text],
    Start(double)[speech-to-text],
    End(double)[speech-to-text],
    SpeechToTextWordResponseModelType(enum)[speech-to-text],
    SpeakerId(string)[speech-to-text],
    Characters(array)[speech-to-text],
      SpeechToTextCharacterResponseModel(ref)[speech-to-text],
  StreamingAudioChunkWithTimestampsResponseModel(class)[text-to-speech],
    AudioBase64(string)[text-to-speech],
    CharacterAlignmentResponseModel(ref)[text-to-speech],
    CharacterAlignmentResponseModel(ref)[text-to-speech],
  SubscriptionExtrasResponseModel(class)[user],
    Concurrency(int)[user],
    ConvaiConcurrency(int)[user],
    ConvaiCharsPerMinute(int)[user],
    ConvaiAsrCharsPerMinute(int)[user],
    ForceLoggingDisabled(bool)[user],
    CanRequestManualProVoiceVerification(bool)[user],
    CanBypassVoiceCaptcha(bool)[user],
    ModerationStatusResponseModel(ref)[user],
    UnusedCharactersRolledOverFromPreviousPeriod(int)[user],
    OverusedCharactersRolledOverFromPreviousPeriod(int)[user],
    SubscriptionUsageResponseModel(ref)[user],
  SubscriptionUsageResponseModel(class)[user],
    RolloverCreditsQuota(int)[user],
    SubscriptionCycleCreditsQuota(int)[user],
    ManuallyGiftedCreditsQuota(int)[user],
    RolloverCreditsUsed(int)[user],
    SubscriptionCycleCreditsUsed(int)[user],
    ManuallyGiftedCreditsUsed(int)[user],
    PaidUsageBasedCreditsUsed(int)[user],
    ActualReportedCredits(int)[user],
  SubscriptionResponseModel(class)[user],
    Tier(string)[user],
    CharacterCount(int)[user],
    CharacterLimit(int)[user],
    CanExtendCharacterLimit(bool)[user],
    AllowedToExtendCharacterLimit(bool)[user],
    NextCharacterCountResetUnix(int)[user],
    VoiceSlotsUsed(int)[user],
    VoiceLimit(int)[user],
    MaxVoiceAddEdits(int)[user],
    VoiceAddEditCounter(int)[user],
    ProfessionalVoiceLimit(int)[user],
    CanExtendVoiceLimit(bool)[user],
    CanUseInstantVoiceCloning(bool)[user],
    CanUseProfessionalVoiceCloning(bool)[user],
    SubscriptionResponseModelCurrency(enum)[user],
    SubscriptionResponseModelStatus(enum)[user],
    SubscriptionResponseModelBillingPeriod(enum)[user],
    SubscriptionResponseModelCharacterRefreshPeriod(enum)[user],
  TwilioOutboundCallResponse(class)[Conversational AI],
    Success(bool)[Conversational AI],
    Message(string)[Conversational AI],
    CallSid(string)[Conversational AI],
  UpdatePhoneNumberRequest(class)[Conversational AI],
    AgentId(string)[Conversational AI],
  UpdateWorkspaceMemberResponseModel(class)[workspace],
    Status(string)[workspace],
  UsageCharactersResponseModel(class)[usage],
    Time(array)[usage],
      TimeItem(int)[usage],
    UsageCharactersResponseModelUsage(class)[usage],
      Usage(array)[usage],
        UsageItem(int)[usage],
  UserResponseModel(class)[user],
    UserId(string)[user],
    SubscriptionResponseModel(ref)[user],
    SubscriptionExtrasResponseModel(ref)[user],
    IsNewUser(bool)[user],
    XiApiKey(string)[user],
    CanUseDelayedPaymentMethods(bool)[user],
    IsOnboardingCompleted(bool)[user],
    IsOnboardingChecklistCompleted(bool)[user],
    FirstName(string)[user],
    IsApiKeyHashed(bool)[user],
    XiApiKeyPreview(string)[user],
    ReferralLinkCode(string)[user],
    PartnerstackPartnerDefaultLink(string)[user],
  VoiceGenerationParameterOptionResponseModel(class)[voice-generation],
    Name(string)[voice-generation],
    Code(string)[voice-generation],
  VoiceGenerationParameterResponseModel(class)[voice-generation],
    Genders(array)[voice-generation],
      VoiceGenerationParameterOptionResponseModel(ref)[voice-generation],
    Accents(array)[voice-generation],
      VoiceGenerationParameterOptionResponseModel(ref)[voice-generation],
    Ages(array)[voice-generation],
      VoiceGenerationParameterOptionResponseModel(ref)[voice-generation],
    MinimumCharacters(int)[voice-generation],
    MaximumCharacters(int)[voice-generation],
    MinimumAccentStrength(double)[voice-generation],
    MaximumAccentStrength(double)[voice-generation],
  VoicePreviewResponseModel(class)[text-to-voice],
    AudioBase64(string)[text-to-voice],
    GeneratedVoiceId(string)[text-to-voice],
    MediaType(string)[text-to-voice],
    DurationSecs(double)[text-to-voice],
  VoicePreviewsRequestModel(class)[text-to-voice],
    VoiceDescription(string)[text-to-voice],
    Text(string)[text-to-voice],
    AutoGenerateText(bool)[text-to-voice],
    Loudness(double)[text-to-voice],
    Quality(double)[text-to-voice],
    Seed(int)[text-to-voice],
    GuidanceScale(double)[text-to-voice],
  VoicePreviewsResponseModel(class)[text-to-voice],
    Previews(array)[text-to-voice],
      VoicePreviewResponseModel(ref)[text-to-voice],
    Text(string)[text-to-voice],
  WorkspaceGroupByNameResponseModel(class)[workspace],
    Name(string)[workspace],
    Id(string)[workspace],
    MembersEmails(array)[workspace],
      MembersEmailsItem(string)[workspace],
  BodyDownloadHistoryItemsV1HistoryDownloadPost(ref)[speech-history],
  BodySoundGenerationV1SoundGenerationPost(ref)[sound-generation],
  BodyAudioIsolationV1AudioIsolationPost(ref)[audio-isolation],
  BodyAudioIsolationStreamV1AudioIsolationStreamPost(ref)[audio-isolation],
  BodyTextToSpeechV1TextToSpeechVoiceIdPost(ref)[text-to-speech],
  BodyTextToSpeechWithTimestampsV1TextToSpeechVoiceIdWithTimestampsPost(ref)[text-to-speech],
  BodyTextToSpeechStreamingV1TextToSpeechVoiceIdStreamPost(ref)[text-to-speech],
  BodyTextToSpeechStreamingWithTimestampsV1TextToSpeechVoiceIdStreamWithTimestampsPost(ref)[text-to-speech],
  BodySpeechToSpeechV1SpeechToSpeechVoiceIdPost(ref)[speech-to-speech],
  BodySpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPost(ref)[speech-to-speech],
  BodyGenerateARandomVoiceV1VoiceGenerationGenerateVoicePost(ref)[voice-generation],
  VoicePreviewsRequestModel(ref)[text-to-voice],
  BodyCreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePost(ref)[voice-generation],
  BodyCreateANewVoiceFromVoicePreviewV1TextToVoiceCreateVoiceFromPreviewPost(ref)[text-to-voice],
  VoiceSettingsResponseModel(ref)[voices],
  BodyAddVoiceV1VoicesAddPost(ref)[voices],
  BodyEditVoiceV1VoicesVoiceIdEditPost(ref)[voices],
  BodyAddSharedVoiceV1VoicesAddPublicUserIdVoiceIdPost(ref)[voices],
  BodyCreatePodcastV1StudioPodcastsPost(ref)[studio],
  BodyCreatePodcastV1ProjectsPodcastCreatePost(ref)[projects],
  BodyCreateStudioProjectV1StudioProjectsPost(ref)[studio],
  BodyAddProjectV1ProjectsAddPost(ref)[projects],
  BodyUpdateStudioProjectV1StudioProjectsProjectIdPost(ref)[studio],
  BodyEditBasicProjectInfoV1ProjectsProjectIdPost(ref)[projects],
  BodyUpdateStudioProjectContentV1StudioProjectsProjectIdContentPost(ref)[studio],
  BodyEditProjectContentV1ProjectsProjectIdContentPost(ref)[projects],
  BodyStreamStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(ref)[studio],
  BodyStreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPost(ref)[projects],
  BodyCreateChapterV1StudioProjectsProjectIdChaptersPost(ref)[studio],
  BodyUpdateChapterV1StudioProjectsProjectIdChaptersChapterIdPost(ref)[studio],
  BodyEditChapterV1ProjectsProjectIdChaptersChapterIdPatch(ref)[projects],
  BodyAddChapterToAProjectV1ProjectsProjectIdChaptersAddPost(ref)[projects],
  BodyStreamChapterAudioV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(ref)[studio],
  BodyStreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPost(ref)[projects],
  BodyCreatePronunciationDictionariesV1StudioProjectsProjectIdPronunciationDictionariesPost(ref)[studio],
  BodyUpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPost(ref)[projects],
  BodyAddALanguageToTheResourceV1DubbingResourceDubbingIdLanguagePost(ref)[dubbing, resource, segment],
  SegmentCreatePayload(ref)[dubbing, resource, segment],
  SegmentUpdatePayload(ref)[dubbing, resource, segment],
  BodyTranscribesSegmentsV1DubbingResourceDubbingIdTranscribePost(ref)[dubbing, resource, segment],
  BodyTranslatesAllOrSomeSegmentsAndLanguagesV1DubbingResourceDubbingIdTranslatePost(ref)[dubbing, resource, segment],
  BodyDubsAllOrSomeSegmentsAndLanguagesV1DubbingResourceDubbingIdDubPost(ref)[dubbing, resource, segment],
  BodyDubAVideoOrAnAudioFileV1DubbingPost(ref)[dubbing],
  BodyCreatesAudioNativeEnabledProjectV1AudioNativePost(ref)[audio-native],
  BodyUpdateAudioNativeProjectContentV1AudioNativeProjectIdContentPost(ref)[audio-native],
  BodyGetSimilarLibraryVoicesV1SimilarVoicesPost(ref)[voices],
  BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePost(ref)[Pronunciation Dictionary],
  BodyAddAPronunciationDictionaryV1PronunciationDictionariesAddFromRulesPost(ref)[Pronunciation Dictionary],
  BodyAddRulesToThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdAddRulesPost(ref)[Pronunciation Dictionary],
  BodyRemoveRulesFromThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdRemoveRulesPost(ref)[Pronunciation Dictionary],
  BodyDeleteMemberFromUserGroupV1WorkspaceGroupsGroupIdMembersRemovePost(ref)[workspace],
  BodyAddMemberToUserGroupV1WorkspaceGroupsGroupIdMembersPost(ref)[workspace],
  BodyInviteUserV1WorkspaceInvitesAddPost(ref)[workspace],
  BodyInviteMultipleUsersV1WorkspaceInvitesAddBulkPost(ref)[workspace],
  BodyDeleteExistingInvitationV1WorkspaceInvitesDelete(ref)[workspace],
  BodyUpdateMemberV1WorkspaceMembersPost(ref)[workspace],
  BodyShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePost(ref)[workspace],
  BodyUnshareWorkspaceResourceV1WorkspaceResourcesResourceIdUnsharePost(ref)[workspace],
  BodySpeechToTextV1SpeechToTextPost(ref)[speech-to-text],
  BodyHandleAnOutboundCallViaTwilioV1ConvaiTwilioOutboundCallPost(ref)[Conversational AI],
  BodyCreateAgentV1ConvaiAgentsCreatePost(ref)[Conversational AI],
  BodyPatchesAnAgentSettingsV1ConvaiAgentsAgentIdPatch(ref)[Conversational AI],
  BodyPostAgentAvatarV1ConvaiAgentsAgentIdAvatarPost(ref)[Conversational AI],
  BodyAddASecretToTheAgentWhichCanBeReferencedInToolCallsV1ConvaiAgentsAgentIdAddSecretPost(ref)[Conversational AI],
  BodySendConversationFeedbackV1ConvaiConversationsConversationIdFeedbackPost(ref)[Conversational AI],
  ImportPhoneNumberV1ConvaiPhoneNumbersCreatePostRequest(anyOf)[Conversational AI],
    CreateTwilioPhoneNumberRequest(ref)[Conversational AI],
    CreateSIPTrunkPhoneNumberRequest(ref)[Conversational AI],
  UpdatePhoneNumberRequest(ref)[Conversational AI],
  BodyAddToKnowledgeBaseV1ConvaiKnowledgeBasePost(ref)[Conversational AI],
  BodyAddToKnowledgeBaseV1ConvaiAddToKnowledgeBasePost(ref)[Conversational AI],
  BodyAddToKnowledgeBaseV1ConvaiAgentsAgentIdAddToKnowledgeBasePost(ref)[Conversational AI],
  RAGIndexRequestModel(ref)[Conversational AI],
  PatchConvAISettingsRequest(ref)[Conversational AI],
  PostWorkspaceSecretRequest(ref)[Conversational AI],
  ListGeneratedItemsV1HistoryGetPageSize(int)[speech-history],
  ListGeneratedItemsV1HistoryGetStartAfterHistoryItemId(string)[speech-history],
  ListGeneratedItemsV1HistoryGetVoiceId(string)[speech-history],
  ListGeneratedItemsV1HistoryGetSearch(string)[speech-history],
  ListGeneratedItemsV1HistoryGetSource(enum)[speech-history],
  ListGeneratedItemsV1HistoryGetXiApiKey(string)[speech-history],
  GetHistoryItemV1HistoryHistoryItemIdGetHistoryItemId(string)[speech-history],
  GetHistoryItemV1HistoryHistoryItemIdGetXiApiKey(string)[speech-history],
  DeleteHistoryItemV1HistoryHistoryItemIdDeleteHistoryItemId(string)[speech-history],
  DeleteHistoryItemV1HistoryHistoryItemIdDeleteXiApiKey(string)[speech-history],
  GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetHistoryItemId(string)[speech-history],
  GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetXiApiKey(string)[speech-history],
  DownloadHistoryItemsV1HistoryDownloadPostXiApiKey(string)[speech-history],
  SoundGenerationV1SoundGenerationPostOutputFormat(enum)[sound-generation],
  SoundGenerationV1SoundGenerationPostXiApiKey(string)[sound-generation],
  AudioIsolationV1AudioIsolationPostXiApiKey(string)[audio-isolation],
  AudioIsolationStreamV1AudioIsolationStreamPostXiApiKey(string)[audio-isolation],
  DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteVoiceId(string)[samples],
  DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteSampleId(string)[samples],
  DeleteSampleV1VoicesVoiceIdSamplesSampleIdDeleteXiApiKey(string)[samples],
  GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetVoiceId(string)[samples],
  GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetSampleId(string)[samples],
  GetAudioFromSampleV1VoicesVoiceIdSamplesSampleIdAudioGetXiApiKey(string)[samples],
  TextToSpeechV1TextToSpeechVoiceIdPostVoiceId(string)[text-to-speech],
  TextToSpeechV1TextToSpeechVoiceIdPostEnableLogging(bool)[text-to-speech],
  TextToSpeechV1TextToSpeechVoiceIdPostOptimizeStreamingLatency(int)[text-to-speech],
  TextToSpeechV1TextToSpeechVoiceIdPostOutputFormat(enum)[text-to-speech],
  TextToSpeechV1TextToSpeechVoiceIdPostXiApiKey(string)[text-to-speech],
  TextToSpeechWithTimestampsV1TextToSpeechVoiceIdWithTimestampsPostVoiceId(string)[text-to-speech],
  TextToSpeechWithTimestampsV1TextToSpeechVoiceIdWithTimestampsPostEnableLogging(bool)[text-to-speech],
  TextToSpeechWithTimestampsV1TextToSpeechVoiceIdWithTimestampsPostOptimizeStreamingLatency(int)[text-to-speech],
  TextToSpeechWithTimestampsV1TextToSpeechVoiceIdWithTimestampsPostOutputFormat(enum)[text-to-speech],
  TextToSpeechWithTimestampsV1TextToSpeechVoiceIdWithTimestampsPostXiApiKey(string)[text-to-speech],
  TextToSpeechStreamingV1TextToSpeechVoiceIdStreamPostVoiceId(string)[text-to-speech],
  TextToSpeechStreamingV1TextToSpeechVoiceIdStreamPostEnableLogging(bool)[text-to-speech],
  TextToSpeechStreamingV1TextToSpeechVoiceIdStreamPostOptimizeStreamingLatency(int)[text-to-speech],
  TextToSpeechStreamingV1TextToSpeechVoiceIdStreamPostOutputFormat(enum)[text-to-speech],
  TextToSpeechStreamingV1TextToSpeechVoiceIdStreamPostXiApiKey(string)[text-to-speech],
  TextToSpeechStreamingWithTimestampsV1TextToSpeechVoiceIdStreamWithTimestampsPostVoiceId(string)[text-to-speech],
  TextToSpeechStreamingWithTimestampsV1TextToSpeechVoiceIdStreamWithTimestampsPostEnableLogging(bool)[text-to-speech],
  TextToSpeechStreamingWithTimestampsV1TextToSpeechVoiceIdStreamWithTimestampsPostOptimizeStreamingLatency(int)[text-to-speech],
  TextToSpeechStreamingWithTimestampsV1TextToSpeechVoiceIdStreamWithTimestampsPostOutputFormat(enum)[text-to-speech],
  TextToSpeechStreamingWithTimestampsV1TextToSpeechVoiceIdStreamWithTimestampsPostXiApiKey(string)[text-to-speech],
  SpeechToSpeechV1SpeechToSpeechVoiceIdPostVoiceId(string)[speech-to-speech],
  SpeechToSpeechV1SpeechToSpeechVoiceIdPostEnableLogging(bool)[speech-to-speech],
  SpeechToSpeechV1SpeechToSpeechVoiceIdPostOptimizeStreamingLatency(int)[speech-to-speech],
  SpeechToSpeechV1SpeechToSpeechVoiceIdPostOutputFormat(enum)[speech-to-speech],
  SpeechToSpeechV1SpeechToSpeechVoiceIdPostXiApiKey(string)[speech-to-speech],
  SpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPostVoiceId(string)[speech-to-speech],
  SpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPostEnableLogging(bool)[speech-to-speech],
  SpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPostOptimizeStreamingLatency(int)[speech-to-speech],
  SpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPostOutputFormat(enum)[speech-to-speech],
  SpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPostXiApiKey(string)[speech-to-speech],
  GenerateARandomVoiceV1VoiceGenerationGenerateVoicePostXiApiKey(string)[voice-generation],
  GenerateAVoicePreviewFromDescriptionV1TextToVoiceCreatePreviewsPostOutputFormat(enum)[text-to-voice],
  GenerateAVoicePreviewFromDescriptionV1TextToVoiceCreatePreviewsPostXiApiKey(string)[text-to-voice],
  CreateAPreviouslyGeneratedVoiceV1VoiceGenerationCreateVoicePostXiApiKey(string)[voice-generation],
  CreateANewVoiceFromVoicePreviewV1TextToVoiceCreateVoiceFromPreviewPostXiApiKey(string)[text-to-voice],
  GetUserSubscriptionInfoV1UserSubscriptionGetXiApiKey(string)[user],
  GetUserInfoV1UserGetXiApiKey(string)[user],
  ListVoicesV1VoicesGetShowLegacy(bool)[voices],
  ListVoicesV1VoicesGetXiApiKey(string)[voices],
  GetVoicesV2V2VoicesGetNextPageToken(string)[voices],
  GetVoicesV2V2VoicesGetPageSize(int)[voices],
  GetVoicesV2V2VoicesGetSearch(string)[voices],
  GetVoicesV2V2VoicesGetSort(string)[voices],
  GetVoicesV2V2VoicesGetSortDirection(string)[voices],
  GetVoicesV2V2VoicesGetVoiceType(string)[voices],
  GetVoicesV2V2VoicesGetCategory(string)[voices],
  GetVoicesV2V2VoicesGetFineTuningState(string)[voices],
  GetVoicesV2V2VoicesGetIncludeTotalCount(bool)[voices],
  GetVoicesV2V2VoicesGetXiApiKey(string)[voices],
  GetVoiceSettingsV1VoicesVoiceIdSettingsGetVoiceId(string)[voices],
  GetVoiceSettingsV1VoicesVoiceIdSettingsGetXiApiKey(string)[voices],
  GetVoiceV1VoicesVoiceIdGetVoiceId(string)[voices],
  GetVoiceV1VoicesVoiceIdGetWithSettings(bool)[voices],
  GetVoiceV1VoicesVoiceIdGetXiApiKey(string)[voices],
  DeleteVoiceV1VoicesVoiceIdDeleteVoiceId(string)[voices],
  DeleteVoiceV1VoicesVoiceIdDeleteXiApiKey(string)[voices],
  EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostVoiceId(string)[voices],
  EditVoiceSettingsV1VoicesVoiceIdSettingsEditPostXiApiKey(string)[voices],
  AddVoiceV1VoicesAddPostXiApiKey(string)[voices],
  EditVoiceV1VoicesVoiceIdEditPostVoiceId(string)[voices],
  EditVoiceV1VoicesVoiceIdEditPostXiApiKey(string)[voices],
  AddSharedVoiceV1VoicesAddPublicUserIdVoiceIdPostPublicUserId(string)[voices],
  AddSharedVoiceV1VoicesAddPublicUserIdVoiceIdPostVoiceId(string)[voices],
  AddSharedVoiceV1VoicesAddPublicUserIdVoiceIdPostXiApiKey(string)[voices],
  CreatePodcastV1StudioPodcastsPostXiApiKey(string)[studio],
  CreatePodcastV1ProjectsPodcastCreatePostXiApiKey(string)[projects],
  ListStudioProjectsV1StudioProjectsGetXiApiKey(string)[studio],
  CreateStudioProjectV1StudioProjectsPostXiApiKey(string)[studio],
  GetProjectsV1ProjectsGetXiApiKey(string)[projects],
  AddProjectV1ProjectsAddPostXiApiKey(string)[projects],
  UpdateStudioProjectV1StudioProjectsProjectIdPostProjectId(string)[studio],
  UpdateStudioProjectV1StudioProjectsProjectIdPostXiApiKey(string)[studio],
  GetStudioProjectV1StudioProjectsProjectIdGetProjectId(string)[studio],
  GetStudioProjectV1StudioProjectsProjectIdGetXiApiKey(string)[studio],
  DeleteStudioProjectV1StudioProjectsProjectIdDeleteProjectId(string)[studio],
  DeleteStudioProjectV1StudioProjectsProjectIdDeleteXiApiKey(string)[studio],
  EditBasicProjectInfoV1ProjectsProjectIdPostProjectId(string)[projects],
  EditBasicProjectInfoV1ProjectsProjectIdPostXiApiKey(string)[projects],
  GetProjectByIDV1ProjectsProjectIdGetProjectId(string)[projects],
  GetProjectByIDV1ProjectsProjectIdGetXiApiKey(string)[projects],
  DeleteProjectV1ProjectsProjectIdDeleteProjectId(string)[projects],
  DeleteProjectV1ProjectsProjectIdDeleteXiApiKey(string)[projects],
  UpdateStudioProjectContentV1StudioProjectsProjectIdContentPostProjectId(string)[studio],
  UpdateStudioProjectContentV1StudioProjectsProjectIdContentPostXiApiKey(string)[studio],
  EditProjectContentV1ProjectsProjectIdContentPostProjectId(string)[projects],
  EditProjectContentV1ProjectsProjectIdContentPostXiApiKey(string)[projects],
  ConvertStudioProjectV1StudioProjectsProjectIdConvertPostProjectId(string)[studio],
  ConvertStudioProjectV1StudioProjectsProjectIdConvertPostXiApiKey(string)[studio],
  ConvertProjectV1ProjectsProjectIdConvertPostProjectId(string)[projects],
  ConvertProjectV1ProjectsProjectIdConvertPostXiApiKey(string)[projects],
  ListStudioProjectSnapshotsV1StudioProjectsProjectIdSnapshotsGetProjectId(string)[studio],
  ListStudioProjectSnapshotsV1StudioProjectsProjectIdSnapshotsGetXiApiKey(string)[studio],
  GetProjectSnapshotsV1ProjectsProjectIdSnapshotsGetProjectId(string)[projects],
  GetProjectSnapshotsV1ProjectsProjectIdSnapshotsGetXiApiKey(string)[projects],
  GetProjectSnapshotV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdGetProjectId(string)[studio],
  GetProjectSnapshotV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdGetProjectSnapshotId(string)[studio],
  GetProjectSnapshotV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdGetXiApiKey(string)[studio],
  StreamStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostProjectId(string)[studio],
  StreamStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostProjectSnapshotId(string)[studio],
  StreamStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostXiApiKey(string)[studio],
  StreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostProjectId(string)[projects],
  StreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostProjectSnapshotId(string)[projects],
  StreamProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdStreamPostXiApiKey(string)[projects],
  StreamArchiveWithStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdArchivePostProjectId(string)[studio],
  StreamArchiveWithStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdArchivePostProjectSnapshotId(string)[studio],
  StreamArchiveWithStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdArchivePostXiApiKey(string)[studio],
  StreamsArchiveWithProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdArchivePostProjectId(string)[projects],
  StreamsArchiveWithProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdArchivePostProjectSnapshotId(string)[projects],
  StreamsArchiveWithProjectAudioV1ProjectsProjectIdSnapshotsProjectSnapshotIdArchivePostXiApiKey(string)[projects],
  ListChaptersV1StudioProjectsProjectIdChaptersGetProjectId(string)[studio],
  ListChaptersV1StudioProjectsProjectIdChaptersGetXiApiKey(string)[studio],
  CreateChapterV1StudioProjectsProjectIdChaptersPostProjectId(string)[studio],
  CreateChapterV1StudioProjectsProjectIdChaptersPostXiApiKey(string)[studio],
  GetChaptersV1ProjectsProjectIdChaptersGetProjectId(string)[projects],
  GetChaptersV1ProjectsProjectIdChaptersGetXiApiKey(string)[projects],
  GetChapterV1StudioProjectsProjectIdChaptersChapterIdGetProjectId(string)[studio],
  GetChapterV1StudioProjectsProjectIdChaptersChapterIdGetChapterId(string)[studio],
  GetChapterV1StudioProjectsProjectIdChaptersChapterIdGetXiApiKey(string)[studio],
  UpdateChapterV1StudioProjectsProjectIdChaptersChapterIdPostProjectId(string)[studio],
  UpdateChapterV1StudioProjectsProjectIdChaptersChapterIdPostChapterId(string)[studio],
  UpdateChapterV1StudioProjectsProjectIdChaptersChapterIdPostXiApiKey(string)[studio],
  DeleteChapterV1StudioProjectsProjectIdChaptersChapterIdDeleteProjectId(string)[studio],
  DeleteChapterV1StudioProjectsProjectIdChaptersChapterIdDeleteChapterId(string)[studio],
  DeleteChapterV1StudioProjectsProjectIdChaptersChapterIdDeleteXiApiKey(string)[studio],
  GetChapterByIDV1ProjectsProjectIdChaptersChapterIdGetProjectId(string)[projects],
  GetChapterByIDV1ProjectsProjectIdChaptersChapterIdGetChapterId(string)[projects],
  GetChapterByIDV1ProjectsProjectIdChaptersChapterIdGetXiApiKey(string)[projects],
  EditChapterV1ProjectsProjectIdChaptersChapterIdPatchProjectId(string)[projects],
  EditChapterV1ProjectsProjectIdChaptersChapterIdPatchChapterId(string)[projects],
  EditChapterV1ProjectsProjectIdChaptersChapterIdPatchXiApiKey(string)[projects],
  DeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteProjectId(string)[projects],
  DeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteChapterId(string)[projects],
  DeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteXiApiKey(string)[projects],
  AddChapterToAProjectV1ProjectsProjectIdChaptersAddPostProjectId(string)[projects],
  AddChapterToAProjectV1ProjectsProjectIdChaptersAddPostXiApiKey(string)[projects],
  ConvertChapterV1StudioProjectsProjectIdChaptersChapterIdConvertPostProjectId(string)[studio],
  ConvertChapterV1StudioProjectsProjectIdChaptersChapterIdConvertPostChapterId(string)[studio],
  ConvertChapterV1StudioProjectsProjectIdChaptersChapterIdConvertPostXiApiKey(string)[studio],
  ConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostProjectId(string)[projects],
  ConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostChapterId(string)[projects],
  ConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostXiApiKey(string)[projects],
  ListChapterSnapshotsV1StudioProjectsProjectIdChaptersChapterIdSnapshotsGetProjectId(string)[studio],
  ListChapterSnapshotsV1StudioProjectsProjectIdChaptersChapterIdSnapshotsGetChapterId(string)[studio],
  ListChapterSnapshotsV1StudioProjectsProjectIdChaptersChapterIdSnapshotsGetXiApiKey(string)[studio],
  ListChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGetProjectId(string)[projects],
  ListChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGetChapterId(string)[projects],
  ListChapterSnapshotsV1ProjectsProjectIdChaptersChapterIdSnapshotsGetXiApiKey(string)[projects],
  GetChapterSnapshotV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdGetProjectId(string)[studio],
  GetChapterSnapshotV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdGetChapterId(string)[studio],
  GetChapterSnapshotV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdGetChapterSnapshotId(string)[studio],
  GetChapterSnapshotV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdGetXiApiKey(string)[studio],
  StreamChapterAudioV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostProjectId(string)[studio],
  StreamChapterAudioV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostChapterId(string)[studio],
  StreamChapterAudioV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostChapterSnapshotId(string)[studio],
  StreamChapterAudioV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostXiApiKey(string)[studio],
  StreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostProjectId(string)[projects],
  StreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostChapterId(string)[projects],
  StreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostChapterSnapshotId(string)[projects],
  StreamChapterAudioV1ProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostXiApiKey(string)[projects],
  CreatePronunciationDictionariesV1StudioProjectsProjectIdPronunciationDictionariesPostProjectId(string)[studio],
  CreatePronunciationDictionariesV1StudioProjectsProjectIdPronunciationDictionariesPostXiApiKey(string)[studio],
  UpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPostProjectId(string)[projects],
  UpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPostXiApiKey(string)[projects],
  GetTheDubbingResourceForAnIDV1DubbingResourceDubbingIdGetDubbingId(string)[dubbing, resource, segment],
  GetTheDubbingResourceForAnIDV1DubbingResourceDubbingIdGetXiApiKey(string)[dubbing, resource, segment],
  AddALanguageToTheResourceV1DubbingResourceDubbingIdLanguagePostDubbingId(string)[dubbing, resource, segment],
  AddALanguageToTheResourceV1DubbingResourceDubbingIdLanguagePostXiApiKey(string)[dubbing, resource, segment],
  CreateASegmentForTheSpeakerV1DubbingResourceDubbingIdSpeakerSpeakerIdSegmentPostDubbingId(string)[dubbing, resource, segment],
  CreateASegmentForTheSpeakerV1DubbingResourceDubbingIdSpeakerSpeakerIdSegmentPostSpeakerId(string)[dubbing, resource, segment],
  CreateASegmentForTheSpeakerV1DubbingResourceDubbingIdSpeakerSpeakerIdSegmentPostXiApiKey(string)[dubbing, resource, segment],
  ModifyASingleSegmentV1DubbingResourceDubbingIdSegmentSegmentIdLanguagePatchDubbingId(string)[dubbing, resource, segment],
  ModifyASingleSegmentV1DubbingResourceDubbingIdSegmentSegmentIdLanguagePatchSegmentId(string)[dubbing, resource, segment],
  ModifyASingleSegmentV1DubbingResourceDubbingIdSegmentSegmentIdLanguagePatchLanguage(string)[dubbing, resource, segment],
  ModifyASingleSegmentV1DubbingResourceDubbingIdSegmentSegmentIdLanguagePatchXiApiKey(string)[dubbing, resource, segment],
  DeletesASingleSegmentV1DubbingResourceDubbingIdSegmentSegmentIdDeleteDubbingId(string)[dubbing, resource, segment],
  DeletesASingleSegmentV1DubbingResourceDubbingIdSegmentSegmentIdDeleteSegmentId(string)[dubbing, resource, segment],
  DeletesASingleSegmentV1DubbingResourceDubbingIdSegmentSegmentIdDeleteXiApiKey(string)[dubbing, resource, segment],
  TranscribesSegmentsV1DubbingResourceDubbingIdTranscribePostDubbingId(string)[dubbing, resource, segment],
  TranscribesSegmentsV1DubbingResourceDubbingIdTranscribePostXiApiKey(string)[dubbing, resource, segment],
  TranslatesAllOrSomeSegmentsAndLanguagesV1DubbingResourceDubbingIdTranslatePostDubbingId(string)[dubbing, resource, segment],
  TranslatesAllOrSomeSegmentsAndLanguagesV1DubbingResourceDubbingIdTranslatePostXiApiKey(string)[dubbing, resource, segment],
  DubsAllOrSomeSegmentsAndLanguagesV1DubbingResourceDubbingIdDubPostDubbingId(string)[dubbing, resource, segment],
  DubsAllOrSomeSegmentsAndLanguagesV1DubbingResourceDubbingIdDubPostXiApiKey(string)[dubbing, resource, segment],
  DubAVideoOrAnAudioFileV1DubbingPostXiApiKey(string)[dubbing],
  GetDubbingV1DubbingDubbingIdGetDubbingId(string)[dubbing],
  GetDubbingV1DubbingDubbingIdGetXiApiKey(string)[dubbing],
  DeleteDubbingV1DubbingDubbingIdDeleteDubbingId(string)[dubbing],
  DeleteDubbingV1DubbingDubbingIdDeleteXiApiKey(string)[dubbing],
  GetDubbedFileV1DubbingDubbingIdAudioLanguageCodeGetDubbingId(string)[dubbing],
  GetDubbedFileV1DubbingDubbingIdAudioLanguageCodeGetLanguageCode(string)[dubbing],
  GetDubbedFileV1DubbingDubbingIdAudioLanguageCodeGetXiApiKey(string)[dubbing],
  GetDubbedTranscriptV1DubbingDubbingIdTranscriptLanguageCodeGetDubbingId(string)[dubbing],
  GetDubbedTranscriptV1DubbingDubbingIdTranscriptLanguageCodeGetLanguageCode(string)[dubbing],
  GetDubbedTranscriptV1DubbingDubbingIdTranscriptLanguageCodeGetFormatType(enum)[dubbing],
  GetDubbedTranscriptV1DubbingDubbingIdTranscriptLanguageCodeGetXiApiKey(string)[dubbing],
  GetModelsV1ModelsGetXiApiKey(string)[models],
  CreatesAudioNativeEnabledProjectV1AudioNativePostXiApiKey(string)[audio-native],
  GetAudioNativeProjectSettingsV1AudioNativeProjectIdSettingsGetProjectId(string)[audio-native],
  GetAudioNativeProjectSettingsV1AudioNativeProjectIdSettingsGetXiApiKey(string)[audio-native],
  UpdateAudioNativeProjectContentV1AudioNativeProjectIdContentPostProjectId(string)[audio-native],
  UpdateAudioNativeProjectContentV1AudioNativeProjectIdContentPostXiApiKey(string)[audio-native],
  GetVoicesV1SharedVoicesGetPageSize(int)[voices],
  GetVoicesV1SharedVoicesGetCategory(enum)[voices],
  GetVoicesV1SharedVoicesGetGender(string)[voices],
  GetVoicesV1SharedVoicesGetAge(string)[voices],
  GetVoicesV1SharedVoicesGetAccent(string)[voices],
  GetVoicesV1SharedVoicesGetLanguage(string)[voices],
  GetVoicesV1SharedVoicesGetLocale(string)[voices],
  GetVoicesV1SharedVoicesGetSearch(string)[voices],
  GetVoicesV1SharedVoicesGetUseCases(array)[voices],
    GetVoicesV1SharedVoicesGetUseCasesItem(string)[voices],
  GetVoicesV1SharedVoicesGetDescriptives(array)[voices],
    GetVoicesV1SharedVoicesGetDescriptivesItem(string)[voices],
  GetVoicesV1SharedVoicesGetFeatured(bool)[voices],
  GetVoicesV1SharedVoicesGetMinNoticePeriodDays(int)[voices],
  GetVoicesV1SharedVoicesGetReaderAppEnabled(bool)[voices],
  GetVoicesV1SharedVoicesGetOwnerId(string)[voices],
  GetVoicesV1SharedVoicesGetSort(string)[voices],
  GetVoicesV1SharedVoicesGetPage(int)[voices],
  GetVoicesV1SharedVoicesGetXiApiKey(string)[voices],
  GetSimilarLibraryVoicesV1SimilarVoicesPostXiApiKey(string)[voices],
  GetCharacterUsageMetricsV1UsageCharacterStatsGetStartUnix(int)[usage],
  GetCharacterUsageMetricsV1UsageCharacterStatsGetEndUnix(int)[usage],
  GetCharacterUsageMetricsV1UsageCharacterStatsGetIncludeWorkspaceMetrics(bool)[usage],
  BreakdownTypes(ref)[usage],
  GetCharacterUsageMetricsV1UsageCharacterStatsGetXiApiKey(string)[usage],
  AddAPronunciationDictionaryV1PronunciationDictionariesAddFromFilePostXiApiKey(string)[Pronunciation Dictionary],
  AddAPronunciationDictionaryV1PronunciationDictionariesAddFromRulesPostXiApiKey(string)[Pronunciation Dictionary],
  AddRulesToThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdAddRulesPostPronunciationDictionaryId(string)[Pronunciation Dictionary],
  AddRulesToThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdAddRulesPostXiApiKey(string)[Pronunciation Dictionary],
  RemoveRulesFromThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdRemoveRulesPostPronunciationDictionaryId(string)[Pronunciation Dictionary],
  RemoveRulesFromThePronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdRemoveRulesPostXiApiKey(string)[Pronunciation Dictionary],
  GetAPLSFileWithAPronunciationDictionaryVersionRulesV1PronunciationDictionariesDictionaryIdVersionIdDownloadGetDictionaryId(string)[Pronunciation Dictionary],
  GetAPLSFileWithAPronunciationDictionaryVersionRulesV1PronunciationDictionariesDictionaryIdVersionIdDownloadGetVersionId(string)[Pronunciation Dictionary],
  GetAPLSFileWithAPronunciationDictionaryVersionRulesV1PronunciationDictionariesDictionaryIdVersionIdDownloadGetXiApiKey(string)[Pronunciation Dictionary],
  GetMetadataForAPronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdGetPronunciationDictionaryId(string)[Pronunciation Dictionary],
  GetMetadataForAPronunciationDictionaryV1PronunciationDictionariesPronunciationDictionaryIdGetXiApiKey(string)[Pronunciation Dictionary],
  GetPronunciationDictionariesV1PronunciationDictionariesGetCursor(string)[Pronunciation Dictionary],
  GetPronunciationDictionariesV1PronunciationDictionariesGetPageSize(int)[Pronunciation Dictionary],
  GetPronunciationDictionariesV1PronunciationDictionariesGetSort(enum)[Pronunciation Dictionary],
  GetPronunciationDictionariesV1PronunciationDictionariesGetSortDirection(string)[Pronunciation Dictionary],
  GetPronunciationDictionariesV1PronunciationDictionariesGetXiApiKey(string)[Pronunciation Dictionary],
  SearchUserGroupsV1WorkspaceGroupsSearchGetName(string)[workspace],
  SearchUserGroupsV1WorkspaceGroupsSearchGetXiApiKey(string)[workspace],
  DeleteMemberFromUserGroupV1WorkspaceGroupsGroupIdMembersRemovePostGroupId(string)[workspace],
  DeleteMemberFromUserGroupV1WorkspaceGroupsGroupIdMembersRemovePostXiApiKey(string)[workspace],
  AddMemberToUserGroupV1WorkspaceGroupsGroupIdMembersPostGroupId(string)[workspace],
  AddMemberToUserGroupV1WorkspaceGroupsGroupIdMembersPostXiApiKey(string)[workspace],
  InviteUserV1WorkspaceInvitesAddPostXiApiKey(string)[workspace],
  InviteMultipleUsersV1WorkspaceInvitesAddBulkPostXiApiKey(string)[workspace],
  DeleteExistingInvitationV1WorkspaceInvitesDeleteXiApiKey(string)[workspace],
  UpdateMemberV1WorkspaceMembersPostXiApiKey(string)[workspace],
  GetResourceV1WorkspaceResourcesResourceIdGetResourceId(string)[workspace],
  WorkspaceResourceType(ref)[workspace],
  GetResourceV1WorkspaceResourcesResourceIdGetXiApiKey(string)[workspace],
  ShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePostResourceId(string)[workspace],
  ShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePostXiApiKey(string)[workspace],
  UnshareWorkspaceResourceV1WorkspaceResourcesResourceIdUnsharePostResourceId(string)[workspace],
  UnshareWorkspaceResourceV1WorkspaceResourcesResourceIdUnsharePostXiApiKey(string)[workspace],
  GetAProfilePageProfileHandleGetHandle(string)[voices],
  SpeechToTextV1SpeechToTextPostEnableLogging(bool)[speech-to-text],
  SpeechToTextV1SpeechToTextPostXiApiKey(string)[speech-to-text],
  GetSignedUrlV1ConvaiConversationGetSignedUrlGetAgentId(string)[Conversational AI],
  GetSignedUrlV1ConvaiConversationGetSignedUrlGetXiApiKey(string)[Conversational AI],
  HandleAnOutboundCallViaTwilioV1ConvaiTwilioOutboundCallPostXiApiKey(string)[Conversational AI],
  CreateAgentV1ConvaiAgentsCreatePostUseToolIds(bool)[Conversational AI],
  CreateAgentV1ConvaiAgentsCreatePostXiApiKey(string)[Conversational AI],
  GetAgentV1ConvaiAgentsAgentIdGetAgentId(string)[Conversational AI],
  GetAgentV1ConvaiAgentsAgentIdGetXiApiKey(string)[Conversational AI],
  PatchesAnAgentSettingsV1ConvaiAgentsAgentIdPatchAgentId(string)[Conversational AI],
  PatchesAnAgentSettingsV1ConvaiAgentsAgentIdPatchUseToolIds(bool)[Conversational AI],
  PatchesAnAgentSettingsV1ConvaiAgentsAgentIdPatchXiApiKey(string)[Conversational AI],
  DeleteAgentV1ConvaiAgentsAgentIdDeleteAgentId(string)[Conversational AI],
  DeleteAgentV1ConvaiAgentsAgentIdDeleteXiApiKey(string)[Conversational AI],
  GetAgentWidgetConfigV1ConvaiAgentsAgentIdWidgetGetAgentId(string)[Conversational AI],
  GetAgentWidgetConfigV1ConvaiAgentsAgentIdWidgetGetConversationSignature(string)[Conversational AI],
  GetAgentWidgetConfigV1ConvaiAgentsAgentIdWidgetGetXiApiKey(string)[Conversational AI],
  GetShareableAgentLinkV1ConvaiAgentsAgentIdLinkGetAgentId(string)[Conversational AI],
  GetShareableAgentLinkV1ConvaiAgentsAgentIdLinkGetXiApiKey(string)[Conversational AI],
  PostAgentAvatarV1ConvaiAgentsAgentIdAvatarPostAgentId(string)[Conversational AI],
  PostAgentAvatarV1ConvaiAgentsAgentIdAvatarPostXiApiKey(string)[Conversational AI],
  AddASecretToTheAgentWhichCanBeReferencedInToolCallsV1ConvaiAgentsAgentIdAddSecretPostAgentId(string)[Conversational AI],
  AddASecretToTheAgentWhichCanBeReferencedInToolCallsV1ConvaiAgentsAgentIdAddSecretPostXiApiKey(string)[Conversational AI],
  ListAgentsV1ConvaiAgentsGetCursor(string)[Conversational AI],
  ListAgentsV1ConvaiAgentsGetPageSize(int)[Conversational AI],
  ListAgentsV1ConvaiAgentsGetSearch(string)[Conversational AI],
  ListAgentsV1ConvaiAgentsGetXiApiKey(string)[Conversational AI],
  GetConversationsV1ConvaiConversationsGetCursor(string)[Conversational AI],
  GetConversationsV1ConvaiConversationsGetAgentId(string)[Conversational AI],
  EvaluationSuccessResult(ref)[Conversational AI],
  GetConversationsV1ConvaiConversationsGetPageSize(int)[Conversational AI],
  GetConversationsV1ConvaiConversationsGetXiApiKey(string)[Conversational AI],
  GetConversationDetailsV1ConvaiConversationsConversationIdGetConversationId(string)[Conversational AI],
  GetConversationDetailsV1ConvaiConversationsConversationIdGetXiApiKey(string)[Conversational AI],
  DeleteConversationV1ConvaiConversationsConversationIdDeleteConversationId(string)[Conversational AI],
  DeleteConversationV1ConvaiConversationsConversationIdDeleteXiApiKey(string)[Conversational AI],
  GetConversationAudioV1ConvaiConversationsConversationIdAudioGetConversationId(string)[Conversational AI],
  GetConversationAudioV1ConvaiConversationsConversationIdAudioGetXiApiKey(string)[Conversational AI],
  SendConversationFeedbackV1ConvaiConversationsConversationIdFeedbackPostConversationId(string)[Conversational AI],
  ImportPhoneNumberV1ConvaiPhoneNumbersCreatePostXiApiKey(string)[Conversational AI],
  GetPhoneNumberV1ConvaiPhoneNumbersPhoneNumberIdGetPhoneNumberId(string)[Conversational AI],
  GetPhoneNumberV1ConvaiPhoneNumbersPhoneNumberIdGetXiApiKey(string)[Conversational AI],
  DeletePhoneNumberV1ConvaiPhoneNumbersPhoneNumberIdDeletePhoneNumberId(string)[Conversational AI],
  DeletePhoneNumberV1ConvaiPhoneNumbersPhoneNumberIdDeleteXiApiKey(string)[Conversational AI],
  UpdatePhoneNumberV1ConvaiPhoneNumbersPhoneNumberIdPatchPhoneNumberId(string)[Conversational AI],
  UpdatePhoneNumberV1ConvaiPhoneNumbersPhoneNumberIdPatchXiApiKey(string)[Conversational AI],
  ListPhoneNumbersV1ConvaiPhoneNumbersGetXiApiKey(string)[Conversational AI],
  AddToKnowledgeBaseV1ConvaiKnowledgeBasePostXiApiKey(string)[Conversational AI],
  GetKnowledgeBaseListV1ConvaiKnowledgeBaseGetCursor(string)[Conversational AI],
  GetKnowledgeBaseListV1ConvaiKnowledgeBaseGetPageSize(int)[Conversational AI],
  GetKnowledgeBaseListV1ConvaiKnowledgeBaseGetSearch(string)[Conversational AI],
  GetKnowledgeBaseListV1ConvaiKnowledgeBaseGetShowOnlyOwnedDocuments(bool)[Conversational AI],
  GetKnowledgeBaseListV1ConvaiKnowledgeBaseGetUseTypesense(bool)[Conversational AI],
  GetKnowledgeBaseListV1ConvaiKnowledgeBaseGetXiApiKey(string)[Conversational AI],
  AddToKnowledgeBaseV1ConvaiAddToKnowledgeBasePostXiApiKey(string)[Conversational AI],
  AddToKnowledgeBaseV1ConvaiAgentsAgentIdAddToKnowledgeBasePostXiApiKey(string)[Conversational AI],
  AddToKnowledgeBaseV1ConvaiAgentsAgentIdAddToKnowledgeBasePostAgentId(string)[Conversational AI],
  ComputeRAGIndexV1ConvaiKnowledgeBaseDocumentationIdRagIndexPostDocumentationId(string)[Conversational AI],
  ComputeRAGIndexV1ConvaiKnowledgeBaseDocumentationIdRagIndexPostXiApiKey(string)[Conversational AI],
  GetDocumentationFromKnowledgeBaseV1ConvaiKnowledgeBaseDocumentationIdGetDocumentationId(string)[Conversational AI],
  GetDocumentationFromKnowledgeBaseV1ConvaiKnowledgeBaseDocumentationIdGetXiApiKey(string)[Conversational AI],
  DeleteKnowledgeBaseDocumentV1ConvaiKnowledgeBaseDocumentationIdDeleteDocumentationId(string)[Conversational AI],
  DeleteKnowledgeBaseDocumentV1ConvaiKnowledgeBaseDocumentationIdDeleteXiApiKey(string)[Conversational AI],
  GetDocumentationFromKnowledgeBaseV1ConvaiAgentsAgentIdKnowledgeBaseDocumentationIdGetDocumentationId(string)[Conversational AI],
  GetDocumentationFromKnowledgeBaseV1ConvaiAgentsAgentIdKnowledgeBaseDocumentationIdGetXiApiKey(string)[Conversational AI],
  GetDocumentationFromKnowledgeBaseV1ConvaiAgentsAgentIdKnowledgeBaseDocumentationIdGetAgentId(string)[Conversational AI],
  GetDependentAgentsListV1ConvaiKnowledgeBaseDocumentationIdDependentAgentsGetDocumentationId(string)[Conversational AI],
  GetDependentAgentsListV1ConvaiKnowledgeBaseDocumentationIdDependentAgentsGetCursor(string)[Conversational AI],
  GetDependentAgentsListV1ConvaiKnowledgeBaseDocumentationIdDependentAgentsGetPageSize(int)[Conversational AI],
  GetDependentAgentsListV1ConvaiKnowledgeBaseDocumentationIdDependentAgentsGetXiApiKey(string)[Conversational AI],
  GetDocumentContentV1ConvaiKnowledgeBaseDocumentationIdContentGetDocumentationId(string)[Conversational AI],
  GetDocumentContentV1ConvaiKnowledgeBaseDocumentationIdContentGetXiApiKey(string)[Conversational AI],
  GetDocumentationChunkFromKnowledgeBaseV1ConvaiKnowledgeBaseDocumentationIdChunkChunkIdGetDocumentationId(string)[Conversational AI],
  GetDocumentationChunkFromKnowledgeBaseV1ConvaiKnowledgeBaseDocumentationIdChunkChunkIdGetChunkId(string)[Conversational AI],
  GetDocumentationChunkFromKnowledgeBaseV1ConvaiKnowledgeBaseDocumentationIdChunkChunkIdGetXiApiKey(string)[Conversational AI],
  GetConvaiSettingsV1ConvaiSettingsGetXiApiKey(string)[Conversational AI],
  UpdateConvaiSettingsV1ConvaiSettingsPatchXiApiKey(string)[Conversational AI],
  CreateConvAIWorkspaceSecretV1ConvaiSecretsPostXiApiKey(string)[Conversational AI],
  GetConvAIWorkspaceSecretsV1ConvaiSecretsGetXiApiKey(string)[],
  DeleteConvAIWorkspaceSecretV1ConvaiSecretsSecretIdDeleteSecretId(string)[Conversational AI],
  DeleteConvAIWorkspaceSecretV1ConvaiSecretsSecretIdDeleteXiApiKey(string)[Conversational AI],
  GetSpeechHistoryResponseModel(ref)[speech-history],
  HTTPValidationError(ref)[speech-history],
  SpeechHistoryItemResponseModel(ref)[speech-history],
  HTTPValidationError(ref)[speech-history],
  DeleteHistoryItemResponse(ref)[speech-history],
  HTTPValidationError(ref)[speech-history],
  GetAudioFromHistoryItemV1HistoryHistoryItemIdAudioGetResponse(byte[])[speech-history],
  HTTPValidationError(ref)[speech-history],
  DownloadHistoryItemsV1HistoryDownloadPostResponse(byte[])[speech-history],
  HTTPValidationError(ref)[speech-history],
  SoundGenerationV1SoundGenerationPostResponse(byte[])[sound-generation],
  HTTPValidationError(ref)[sound-generation],
  HTTPValidationError(ref)[audio-isolation],
  HTTPValidationError(ref)[audio-isolation],
  DeleteSampleResponseModel(ref)[samples],
  HTTPValidationError(ref)[samples],
  HTTPValidationError(ref)[samples],
  TextToSpeechV1TextToSpeechVoiceIdPostResponse(byte[])[text-to-speech],
  HTTPValidationError(ref)[text-to-speech],
  AudioWithTimestampsResponseModel(ref)[text-to-speech],
  HTTPValidationError(ref)[text-to-speech],
  TextToSpeechStreamingV1TextToSpeechVoiceIdStreamPostResponse(byte[])[text-to-speech],
  HTTPValidationError(ref)[text-to-speech],
  StreamingAudioChunkWithTimestampsResponseModel(ref)[text-to-speech],
  HTTPValidationError(ref)[text-to-speech],
  SpeechToSpeechV1SpeechToSpeechVoiceIdPostResponse(byte[])[speech-to-speech],
  HTTPValidationError(ref)[speech-to-speech],
  SpeechToSpeechStreamingV1SpeechToSpeechVoiceIdStreamPostResponse(byte[])[speech-to-speech],
  HTTPValidationError(ref)[speech-to-speech],
  VoiceGenerationParameterResponseModel(ref)[voice-generation],
  HTTPValidationError(ref)[voice-generation],
  VoicePreviewsResponseModel(ref)[text-to-voice],
  HTTPValidationError(ref)[text-to-voice],
  VoiceResponseModel(ref)[voice-generation],
  HTTPValidationError(ref)[voice-generation],
  VoiceResponseModel(ref)[text-to-voice],
  HTTPValidationError(ref)[text-to-voice],
  ExtendedSubscriptionResponseModel(ref)[user],
  HTTPValidationError(ref)[user],
  UserResponseModel(ref)[user],
  HTTPValidationError(ref)[user],
  GetVoicesResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  GetVoicesV2ResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  VoiceSettingsResponseModel(ref)[voices],
  VoiceSettingsResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  VoiceResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  DeleteVoiceResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  EditVoiceSettingsResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  AddVoiceIVCResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  EditVoiceResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  AddVoiceResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  PodcastProjectResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  PodcastProjectResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  GetProjectsResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  AddProjectResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  GetProjectsResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  AddProjectResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  EditProjectResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  ProjectExtendedResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  DeleteProjectResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  EditProjectResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  ProjectExtendedResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  DeleteProjectV1ProjectsProjectIdDeleteResponse(class)[projects],
  HTTPValidationError(ref)[projects],
  EditProjectResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  EditProjectResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  ConvertProjectResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  ConvertProjectV1ProjectsProjectIdConvertPostResponse(class)[projects],
  HTTPValidationError(ref)[projects],
  ProjectSnapshotsResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  ProjectSnapshotsResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  ProjectSnapshotExtendedResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  HTTPValidationError(ref)[studio],
  HTTPValidationError(ref)[projects],
  StreamArchiveWithStudioProjectAudioV1StudioProjectsProjectIdSnapshotsProjectSnapshotIdArchivePostResponse(byte[])[studio],
  HTTPValidationError(ref)[studio],
  HTTPValidationError(ref)[projects],
  GetChaptersResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  AddChapterResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  GetChaptersResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  ChapterWithContentResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  EditChapterResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  DeleteChapterResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  ChapterWithContentResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  EditChapterResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  DeleteChapterV1ProjectsProjectIdChaptersChapterIdDeleteResponse(class)[projects],
  HTTPValidationError(ref)[projects],
  AddChapterResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  ConvertChapterResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  ConvertChapterV1ProjectsProjectIdChaptersChapterIdConvertPostResponse(class)[projects],
  HTTPValidationError(ref)[projects],
  ChapterSnapshotsResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  ChapterSnapshotsResponseModel(ref)[projects],
  HTTPValidationError(ref)[projects],
  ChapterSnapshotExtendedResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  StreamChapterAudioV1StudioProjectsProjectIdChaptersChapterIdSnapshotsChapterSnapshotIdStreamPostResponse(byte[])[studio],
  HTTPValidationError(ref)[studio],
  HTTPValidationError(ref)[projects],
  CreatePronunciationDictionaryResponseModel(ref)[studio],
  HTTPValidationError(ref)[studio],
  UpdatePronunciationDictionariesV1ProjectsProjectIdUpdatePronunciationDictionariesPostResponse(class)[projects],
  HTTPValidationError(ref)[projects],
  DubbingResource(ref)[dubbing, resource, segment],
  HTTPValidationError(ref)[dubbing, resource, segment],
  LanguageAddedResponse(ref)[dubbing, resource, segment],
  HTTPValidationError(ref)[dubbing, resource, segment],
  SegmentCreateResponse(ref)[dubbing, resource, segment],
  HTTPValidationError(ref)[dubbing, resource, segment],
  SegmentUpdateResponse(ref)[dubbing, resource, segment],
  HTTPValidationError(ref)[dubbing, resource, segment],
  SegmentDeleteResponse(ref)[dubbing, resource, segment],
  HTTPValidationError(ref)[dubbing, resource, segment],
  SegmentTranscriptionResponse(ref)[dubbing, resource, segment],
  HTTPValidationError(ref)[dubbing, resource, segment],
  SegmentTranslationResponse(ref)[dubbing, resource, segment],
  HTTPValidationError(ref)[dubbing, resource, segment],
  SegmentDubResponse(ref)[dubbing, resource, segment],
  HTTPValidationError(ref)[dubbing, resource, segment],
  DoDubbingResponseModel(ref)[dubbing],
  HTTPValidationError(ref)[dubbing],
  DubbingMetadataResponse(ref)[dubbing],
  HTTPValidationError(ref)[dubbing],
  DeleteDubbingResponseModel(ref)[dubbing],
  HTTPValidationError(ref)[dubbing],
  GetDubbedFileV1DubbingDubbingIdAudioLanguageCodeGetResponse(byte[])[dubbing],
  GetDubbedFileV1DubbingDubbingIdAudioLanguageCodeGetResponse(byte[])[dubbing],
  HTTPValidationError(ref)[dubbing],
  GetDubbedTranscriptV1DubbingDubbingIdTranscriptLanguageCodeGetResponse(string)[dubbing],
  GetDubbedTranscriptV1DubbingDubbingIdTranscriptLanguageCodeGetResponse(string)[dubbing],
  HTTPValidationError(ref)[dubbing],
  GetModelsV1ModelsGetResponse(array)[models],
    ModelResponseModel(ref)[models],
  HTTPValidationError(ref)[models],
  AudioNativeCreateProjectResponseModel(ref)[audio-native],
  HTTPValidationError(ref)[audio-native],
  GetAudioNativeProjectSettingsResponseModel(ref)[audio-native],
  HTTPValidationError(ref)[audio-native],
  AudioNativeEditContentResponseModel(ref)[audio-native],
  HTTPValidationError(ref)[audio-native],
  GetLibraryVoicesResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  GetLibraryVoicesResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  UsageCharactersResponseModel(ref)[usage],
  HTTPValidationError(ref)[usage],
  AddPronunciationDictionaryResponseModel(ref)[Pronunciation Dictionary],
  HTTPValidationError(ref)[Pronunciation Dictionary],
  AddPronunciationDictionaryResponseModel(ref)[Pronunciation Dictionary],
  HTTPValidationError(ref)[Pronunciation Dictionary],
  AddPronunciationDictionaryRulesResponseModel(ref)[Pronunciation Dictionary],
  HTTPValidationError(ref)[Pronunciation Dictionary],
  RemovePronunciationDictionaryRulesResponseModel(ref)[Pronunciation Dictionary],
  HTTPValidationError(ref)[Pronunciation Dictionary],
  GetAPLSFileWithAPronunciationDictionaryVersionRulesV1PronunciationDictionariesDictionaryIdVersionIdDownloadGetResponse(byte[])[Pronunciation Dictionary],
  HTTPValidationError(ref)[Pronunciation Dictionary],
  GetPronunciationDictionaryMetadataResponseModel(ref)[Pronunciation Dictionary],
  HTTPValidationError(ref)[Pronunciation Dictionary],
  GetPronunciationDictionariesMetadataResponseModel(ref)[Pronunciation Dictionary],
  HTTPValidationError(ref)[Pronunciation Dictionary],
  SearchUserGroupsV1WorkspaceGroupsSearchGetResponse(array)[workspace],
    WorkspaceGroupByNameResponseModel(ref)[workspace],
  HTTPValidationError(ref)[workspace],
  DeleteWorkspaceGroupMemberResponseModel(ref)[workspace],
  HTTPValidationError(ref)[workspace],
  AddWorkspaceGroupMemberResponseModel(ref)[workspace],
  HTTPValidationError(ref)[workspace],
  AddWorkspaceInviteResponseModel(ref)[workspace],
  HTTPValidationError(ref)[workspace],
  AddWorkspaceInviteResponseModel(ref)[workspace],
  HTTPValidationError(ref)[workspace],
  DeleteWorkspaceInviteResponseModel(ref)[workspace],
  HTTPValidationError(ref)[workspace],
  UpdateWorkspaceMemberResponseModel(ref)[workspace],
  HTTPValidationError(ref)[workspace],
  ResourceMetadataResponseModel(ref)[workspace],
  HTTPValidationError(ref)[workspace],
  ShareWorkspaceResourceV1WorkspaceResourcesResourceIdSharePostResponse(class)[workspace],
  HTTPValidationError(ref)[workspace],
  UnshareWorkspaceResourceV1WorkspaceResourcesResourceIdUnsharePostResponse(class)[workspace],
  HTTPValidationError(ref)[workspace],
  ProfilePageResponseModel(ref)[voices],
  HTTPValidationError(ref)[voices],
  SpeechToTextChunkResponseModel(ref)[speech-to-text],
  HTTPValidationError(ref)[speech-to-text],
  ConversationSignedUrlResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  TwilioOutboundCallResponse(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  CreateAgentResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetAgentResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetAgentResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetAgentEmbedResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetAgentLinkResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  PostAgentAvatarResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  AddAgentSecretResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetAgentsPageResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetConversationsPageResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetConversationResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  DeleteConversationV1ConvaiConversationsConversationIdDeleteResponse(class)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  SendConversationFeedbackV1ConvaiConversationsConversationIdFeedbackPostResponse(class)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  CreatePhoneNumberResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetPhoneNumberResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  DeletePhoneNumberV1ConvaiPhoneNumbersPhoneNumberIdDeleteResponse(class)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetPhoneNumberResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  ListPhoneNumbersV1ConvaiPhoneNumbersGetResponse(array)[Conversational AI],
    GetPhoneNumberResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  AddKnowledgeBaseResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetKnowledgeBaseListResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  AddKnowledgeBaseResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  AddKnowledgeBaseResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  RAGIndexResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetDocumentationFromKnowledgeBaseV1ConvaiKnowledgeBaseDocumentationIdGetResponse(oneOf)[Conversational AI],
    GetKnowledgeBaseURLResponseModel(ref)[Conversational AI],
    GetKnowledgeBaseFileResponseModel(ref)[Conversational AI],
    GetDocumentationFromKnowledgeBaseV1ConvaiKnowledgeBaseDocumentationIdGetResponseDiscriminator(class)[Conversational AI],
      GetDocumentationFromKnowledgeBaseV1ConvaiKnowledgeBaseDocumentationIdGetResponseDiscriminatorType(enum)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  DeleteKnowledgeBaseDocumentV1ConvaiKnowledgeBaseDocumentationIdDeleteResponse(class)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetDocumentationFromKnowledgeBaseV1ConvaiAgentsAgentIdKnowledgeBaseDocumentationIdGetResponse(oneOf)[Conversational AI],
    GetKnowledgeBaseURLResponseModel(ref)[Conversational AI],
    GetKnowledgeBaseFileResponseModel(ref)[Conversational AI],
    GetDocumentationFromKnowledgeBaseV1ConvaiAgentsAgentIdKnowledgeBaseDocumentationIdGetResponseDiscriminator(class)[Conversational AI],
      GetDocumentationFromKnowledgeBaseV1ConvaiAgentsAgentIdKnowledgeBaseDocumentationIdGetResponseDiscriminatorType(enum)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetKnowledgeBaseDependentAgentsResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  KnowledgeBaseDocumentChunkResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetConvAISettingsResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetConvAISettingsResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  PostWorkspaceSecretResponseModel(ref)[Conversational AI],
  HTTPValidationError(ref)[Conversational AI],
  GetWorkspaceSecretsResponseModel(ref)[],
  HTTPValidationError(ref)[],
  HTTPValidationError(ref)[Conversational AI],
  RedirectToMintlifyDocsGetResponse(class)[]
]