components:
  schemas:
    AddUploadPartRequest:
      additionalProperties: false
      properties:
        data:
          description: "The chunk of bytes for this Part.\n"
          format: binary
          type: string
      required:
        - data
      type: object
    AdminApiKey:
      properties:
        created_at:
          example: 1711471533
          format: int64
          type: integer
        id:
          example: key_abc
          type: string
        name:
          example: Administration Key
          type: string
        object:
          example: organization.admin_api_key
          type: string
        owner:
          properties:
            created_at:
              example: 1711471533
              format: int64
              type: integer
            id:
              example: sa_456
              type: string
            name:
              example: My Service Account
              type: string
            role:
              example: member
              type: string
            type:
              example: service_account
              type: string
          type: object
        redacted_value:
          example: sk-admin...def
          type: string
        value:
          example: sk-admin-1234abcd
          type: string
      type: object
    Annotation:
      oneOf:
        - $ref: '#/components/schemas/FileCitation'
        - $ref: '#/components/schemas/UrlCitation'
        - $ref: '#/components/schemas/FilePath'
    ApiKeyList:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AdminApiKey'
          type: array
        first_id:
          example: key_abc
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: key_xyz
          type: string
        object:
          example: list
          type: string
      type: object
    AssistantObject:
      description: Represents an `assistant` that can call the model and use tools.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the assistant was created.
          type: integer
        description:
          description: "The description of the assistant. The maximum length is 512 characters.\n"
          maxLength: 512
          nullable: true
          type: string
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        instructions:
          description: "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n"
          maxLength: 256000
          nullable: true
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          description: "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n"
          type: string
        name:
          description: "The name of the assistant. The maximum length is 256 characters.\n"
          maxLength: 256
          nullable: true
          type: string
        object:
          description: The object type, which is always `assistant`.
          enum:
            - assistant
          type: string
          x-stainless-const: true
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        temperature:
          default: 1
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        tool_resources:
          description: "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter`` tool. There can be a maximum of 20 files associated with the tool.\n"
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: "The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
        tools:
          default: []
          description: "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n"
          items:
            oneOf:
              - $ref: '#/components/schemas/AssistantToolsCode'
              - $ref: '#/components/schemas/AssistantToolsFileSearch'
              - $ref: '#/components/schemas/AssistantToolsFunction'
            x-oaiExpandable: true
          maxItems: 128
          type: array
        top_p:
          default: 1
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
      required:
        - id
        - object
        - created_at
        - name
        - description
        - model
        - instructions
        - tools
        - metadata
      title: Assistant
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"asst_abc123\",\n  \"object\": \"assistant\",\n  \"created_at\": 1698984975,\n  \"name\": \"Math Tutor\",\n  \"description\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n  \"tools\": [\n    {\n      \"type\": \"code_interpreter\"\n    }\n  ],\n  \"metadata\": {},\n  \"top_p\": 1.0,\n  \"temperature\": 1.0,\n  \"response_format\": \"auto\"\n}\n"
        name: The assistant object
    AssistantStreamEvent:
      description: "Represents an event emitted when streaming a Run.\n\nEach event in a server-sent events stream has an `event` and `data` property:\n\n```\nevent: thread.created\ndata: {\"id\": \"thread_123\", \"object\": \"thread\", ...}\n```\n\nWe emit events whenever a new object is created, transitions to a new state, or is being\nstreamed in parts (deltas). For example, we emit `thread.run.created` when a new run\nis created, `thread.run.completed` when a run completes, and so on. When an Assistant chooses\nto create a message during a run, we emit a `thread.message.created event`, a\n`thread.message.in_progress` event, many `thread.message.delta` events, and finally a\n`thread.message.completed` event.\n\nWe may add additional events over time, so we recommend handling unknown events gracefully\nin your code. See the [Assistants API quickstart](/docs/assistants/overview) to learn how to\nintegrate the Assistants API with streaming.\n"
      oneOf:
        - $ref: '#/components/schemas/ThreadStreamEvent'
        - $ref: '#/components/schemas/RunStreamEvent'
        - $ref: '#/components/schemas/RunStepStreamEvent'
        - $ref: '#/components/schemas/MessageStreamEvent'
        - $ref: '#/components/schemas/ErrorEvent'
        - $ref: '#/components/schemas/DoneEvent'
      x-oaiMeta:
        beta: true
        name: Assistant stream events
    AssistantSupportedModels:
      enum:
        - o3-mini
        - o3-mini-2025-01-31
        - o1
        - o1-2024-12-17
        - gpt-4o
        - gpt-4o-2024-11-20
        - gpt-4o-2024-08-06
        - gpt-4o-2024-05-13
        - gpt-4o-mini
        - gpt-4o-mini-2024-07-18
        - gpt-4.5-preview
        - gpt-4.5-preview-2025-02-27
        - gpt-4-turbo
        - gpt-4-turbo-2024-04-09
        - gpt-4-0125-preview
        - gpt-4-turbo-preview
        - gpt-4-1106-preview
        - gpt-4-vision-preview
        - gpt-4
        - gpt-4-0314
        - gpt-4-0613
        - gpt-4-32k
        - gpt-4-32k-0314
        - gpt-4-32k-0613
        - gpt-3.5-turbo
        - gpt-3.5-turbo-16k
        - gpt-3.5-turbo-0613
        - gpt-3.5-turbo-1106
        - gpt-3.5-turbo-0125
        - gpt-3.5-turbo-16k-0613
      type: string
    AssistantToolsCode:
      properties:
        type:
          description: 'The type of tool being defined: `code_interpreter`'
          enum:
            - code_interpreter
          type: string
          x-stainless-const: true
      required:
        - type
      title: Code interpreter tool
      type: object
    AssistantToolsFileSearch:
      properties:
        file_search:
          description: Overrides for the file search tool.
          properties:
            max_num_results:
              description: "The maximum number of results the file search tool should output. The default is 20 for `gpt-4*` models and 5 for `gpt-3.5-turbo`. This number should be between 1 and 50 inclusive.\n\nNote that the file search tool may output fewer than `max_num_results` results. See the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
              maximum: 50
              minimum: 1
              type: integer
            ranking_options:
              $ref: '#/components/schemas/FileSearchRankingOptions'
          type: object
        type:
          description: 'The type of tool being defined: `file_search`'
          enum:
            - file_search
          type: string
          x-stainless-const: true
      required:
        - type
      title: FileSearch tool
      type: object
    AssistantToolsFileSearchTypeOnly:
      properties:
        type:
          description: 'The type of tool being defined: `file_search`'
          enum:
            - file_search
          type: string
          x-stainless-const: true
      required:
        - type
      title: FileSearch tool
      type: object
    AssistantToolsFunction:
      properties:
        function:
          $ref: '#/components/schemas/FunctionObject'
        type:
          description: 'The type of tool being defined: `function`'
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - type
        - function
      title: Function tool
      type: object
    AssistantsApiResponseFormatOption:
      description: "Specifies the format that the model must output. Compatible with [GPT-4o](/docs/models#gpt-4o), [GPT-4 Turbo](/docs/models#gpt-4-turbo-and-gpt-4), and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.\n\n**Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.\n"
      oneOf:
        - description: "`auto` is the default value\n"
          enum:
            - auto
          type: string
          x-stainless-const: true
        - $ref: '#/components/schemas/ResponseFormatText'
        - $ref: '#/components/schemas/ResponseFormatJsonObject'
        - $ref: '#/components/schemas/ResponseFormatJsonSchema'
      x-oaiExpandable: true
    AssistantsApiToolChoiceOption:
      description: "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tools and instead generates a message.\n`auto` is the default value and means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools before responding to the user.\nSpecifying a particular tool like `{\"type\": \"file_search\"}` or `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n"
      oneOf:
        - description: "`none` means the model will not call any tools and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools before responding to the user.\n"
          enum:
            - none
            - auto
            - required
          type: string
        - $ref: '#/components/schemas/AssistantsNamedToolChoice'
      x-oaiExpandable: true
    AssistantsNamedToolChoice:
      description: Specifies a tool the model should use. Use to force the model to call a specific tool.
      properties:
        function:
          properties:
            name:
              description: The name of the function to call.
              type: string
          required:
            - name
          type: object
        type:
          description: The type of the tool. If type is `function`, the function name must be set
          enum:
            - function
            - code_interpreter
            - file_search
          type: string
      required:
        - type
      type: object
    AudioResponseFormat:
      default: json
      description: "The format of the output, in one of these options: `json`, `text`, `srt`, `verbose_json`, or `vtt`.\n"
      enum:
        - json
        - text
        - srt
        - verbose_json
        - vtt
      type: string
    AuditLog:
      description: A log of a user action or configuration change within this organization.
      properties:
        actor:
          $ref: '#/components/schemas/AuditLogActor'
        api_key.created:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to create the API key.
              properties:
                scopes:
                  description: A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                  items:
                    type: string
                  type: array
              type: object
            id:
              description: The tracking ID of the API key.
              type: string
          type: object
        api_key.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The tracking ID of the API key.
              type: string
          type: object
        api_key.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the API key.
              properties:
                scopes:
                  description: A list of scopes allowed for the API key, e.g. `["api.model.request"]`
                  items:
                    type: string
                  type: array
              type: object
            id:
              description: The tracking ID of the API key.
              type: string
          type: object
        effective_at:
          description: The Unix timestamp (in seconds) of the event.
          type: integer
        id:
          description: The ID of this log.
          type: string
        invite.accepted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The ID of the invite.
              type: string
          type: object
        invite.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The ID of the invite.
              type: string
          type: object
        invite.sent:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to create the invite.
              properties:
                email:
                  description: The email invited to the organization.
                  type: string
                role:
                  description: The role the email was invited to be. Is either `owner` or `member`.
                  type: string
              type: object
            id:
              description: The ID of the invite.
              type: string
          type: object
        login.failed:
          description: The details for events with this `type`.
          properties:
            error_code:
              description: The error code of the failure.
              type: string
            error_message:
              description: The error message of the failure.
              type: string
          type: object
        logout.failed:
          description: The details for events with this `type`.
          properties:
            error_code:
              description: The error code of the failure.
              type: string
            error_message:
              description: The error message of the failure.
              type: string
          type: object
        organization.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the organization settings.
              properties:
                description:
                  description: The organization description.
                  type: string
                name:
                  description: The organization name.
                  type: string
                settings:
                  properties:
                    threads_ui_visibility:
                      description: Visibility of the threads page which shows messages created with the Assistants API and Playground. One of `ANY_ROLE`, `OWNERS`, or `NONE`.
                      type: string
                    usage_dashboard_visibility:
                      description: Visibility of the usage dashboard which shows activity and costs for your organization. One of `ANY_ROLE` or `OWNERS`.
                      type: string
                  type: object
                title:
                  description: The organization title.
                  type: string
              type: object
            id:
              description: The organization ID.
              type: string
          type: object
        project:
          description: The project that the action was scoped to. Absent for actions not scoped to projects.
          properties:
            id:
              description: The project ID.
              type: string
            name:
              description: The project title.
              type: string
          type: object
        project.archived:
          description: The details for events with this `type`.
          properties:
            id:
              description: The project ID.
              type: string
          type: object
        project.created:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to create the project.
              properties:
                name:
                  description: The project name.
                  type: string
                title:
                  description: The title of the project as seen on the dashboard.
                  type: string
              type: object
            id:
              description: The project ID.
              type: string
          type: object
        project.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the project.
              properties:
                title:
                  description: The title of the project as seen on the dashboard.
                  type: string
              type: object
            id:
              description: The project ID.
              type: string
          type: object
        rate_limit.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The rate limit ID
              type: string
          type: object
        rate_limit.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the rate limits.
              properties:
                batch_1_day_max_input_tokens:
                  description: The maximum batch input tokens per day. Only relevant for certain models.
                  type: integer
                max_audio_megabytes_per_1_minute:
                  description: The maximum audio megabytes per minute. Only relevant for certain models.
                  type: integer
                max_images_per_1_minute:
                  description: The maximum images per minute. Only relevant for certain models.
                  type: integer
                max_requests_per_1_day:
                  description: The maximum requests per day. Only relevant for certain models.
                  type: integer
                max_requests_per_1_minute:
                  description: The maximum requests per minute.
                  type: integer
                max_tokens_per_1_minute:
                  description: The maximum tokens per minute.
                  type: integer
              type: object
            id:
              description: The rate limit ID
              type: string
          type: object
        service_account.created:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to create the service account.
              properties:
                role:
                  description: The role of the service account. Is either `owner` or `member`.
                  type: string
              type: object
            id:
              description: The service account ID.
              type: string
          type: object
        service_account.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The service account ID.
              type: string
          type: object
        service_account.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to updated the service account.
              properties:
                role:
                  description: The role of the service account. Is either `owner` or `member`.
                  type: string
              type: object
            id:
              description: The service account ID.
              type: string
          type: object
        type:
          $ref: '#/components/schemas/AuditLogEventType'
        user.added:
          description: The details for events with this `type`.
          properties:
            data:
              description: The payload used to add the user to the project.
              properties:
                role:
                  description: The role of the user. Is either `owner` or `member`.
                  type: string
              type: object
            id:
              description: The user ID.
              type: string
          type: object
        user.deleted:
          description: The details for events with this `type`.
          properties:
            id:
              description: The user ID.
              type: string
          type: object
        user.updated:
          description: The details for events with this `type`.
          properties:
            changes_requested:
              description: The payload used to update the user.
              properties:
                role:
                  description: The role of the user. Is either `owner` or `member`.
                  type: string
              type: object
            id:
              description: The project ID.
              type: string
          type: object
      required:
        - id
        - type
        - effective_at
        - actor
      type: object
      x-oaiMeta:
        example: "{\n    \"id\": \"req_xxx_20240101\",\n    \"type\": \"api_key.created\",\n    \"effective_at\": 1720804090,\n    \"actor\": {\n        \"type\": \"session\",\n        \"session\": {\n            \"user\": {\n                \"id\": \"user-xxx\",\n                \"email\": \"user@example.com\"\n            },\n            \"ip_address\": \"127.0.0.1\",\n            \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\"\n        }\n    },\n    \"api_key.created\": {\n        \"id\": \"key_xxxx\",\n        \"data\": {\n            \"scopes\": [\"resource.operation\"]\n        }\n    }\n}\n"
        name: The audit log object
    AuditLogActor:
      description: The actor who performed the audit logged action.
      properties:
        api_key:
          $ref: '#/components/schemas/AuditLogActorApiKey'
        session:
          $ref: '#/components/schemas/AuditLogActorSession'
        type:
          description: The type of actor. Is either `session` or `api_key`.
          enum:
            - session
            - api_key
          type: string
      type: object
    AuditLogActorApiKey:
      description: The API Key used to perform the audit logged action.
      properties:
        id:
          description: The tracking id of the API key.
          type: string
        service_account:
          $ref: '#/components/schemas/AuditLogActorServiceAccount'
        type:
          description: The type of API key. Can be either `user` or `service_account`.
          enum:
            - user
            - service_account
          type: string
        user:
          $ref: '#/components/schemas/AuditLogActorUser'
      type: object
    AuditLogActorServiceAccount:
      description: The service account that performed the audit logged action.
      properties:
        id:
          description: The service account id.
          type: string
      type: object
    AuditLogActorSession:
      description: The session in which the audit logged action was performed.
      properties:
        ip_address:
          description: The IP address from which the action was performed.
          type: string
        user:
          $ref: '#/components/schemas/AuditLogActorUser'
      type: object
    AuditLogActorUser:
      description: The user who performed the audit logged action.
      properties:
        email:
          description: The user email.
          type: string
        id:
          description: The user id.
          type: string
      type: object
    AuditLogEventType:
      description: The event type.
      enum:
        - api_key.created
        - api_key.updated
        - api_key.deleted
        - invite.sent
        - invite.accepted
        - invite.deleted
        - login.succeeded
        - login.failed
        - logout.succeeded
        - logout.failed
        - organization.updated
        - project.created
        - project.updated
        - project.archived
        - service_account.created
        - service_account.updated
        - service_account.deleted
        - rate_limit.updated
        - rate_limit.deleted
        - user.added
        - user.updated
        - user.deleted
      type: string
      x-oaiExpandable: true
    AutoChunkingStrategyRequestParam:
      additionalProperties: false
      description: The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
      properties:
        type:
          description: Always `auto`.
          enum:
            - auto
          type: string
          x-stainless-const: true
      required:
        - type
      title: Auto Chunking Strategy
      type: object
    Batch:
      properties:
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the batch was cancelled.
          type: integer
        cancelling_at:
          description: The Unix timestamp (in seconds) for when the batch started cancelling.
          type: integer
        completed_at:
          description: The Unix timestamp (in seconds) for when the batch was completed.
          type: integer
        completion_window:
          description: The time frame within which the batch should be processed.
          type: string
        created_at:
          description: The Unix timestamp (in seconds) for when the batch was created.
          type: integer
        endpoint:
          description: The OpenAI API endpoint used by the batch.
          type: string
        error_file_id:
          description: The ID of the file containing the outputs of requests with errors.
          type: string
        errors:
          properties:
            data:
              items:
                properties:
                  code:
                    description: An error code identifying the error type.
                    type: string
                  line:
                    description: The line number of the input file where the error occurred, if applicable.
                    nullable: true
                    type: integer
                  message:
                    description: A human-readable message providing more details about the error.
                    type: string
                  param:
                    description: The name of the parameter that caused the error, if applicable.
                    nullable: true
                    type: string
                type: object
              type: array
            object:
              description: The object type, which is always `list`.
              type: string
          type: object
        expired_at:
          description: The Unix timestamp (in seconds) for when the batch expired.
          type: integer
        expires_at:
          description: The Unix timestamp (in seconds) for when the batch will expire.
          type: integer
        failed_at:
          description: The Unix timestamp (in seconds) for when the batch failed.
          type: integer
        finalizing_at:
          description: The Unix timestamp (in seconds) for when the batch started finalizing.
          type: integer
        id:
          type: string
        in_progress_at:
          description: The Unix timestamp (in seconds) for when the batch started processing.
          type: integer
        input_file_id:
          description: The ID of the input file for the batch.
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        object:
          description: The object type, which is always `batch`.
          enum:
            - batch
          type: string
          x-stainless-const: true
        output_file_id:
          description: The ID of the file containing the outputs of successfully executed requests.
          type: string
        request_counts:
          description: The request counts for different statuses within the batch.
          properties:
            completed:
              description: Number of requests that have been completed successfully.
              type: integer
            failed:
              description: Number of requests that have failed.
              type: integer
            total:
              description: Total number of requests in the batch.
              type: integer
          required:
            - total
            - completed
            - failed
          type: object
        status:
          description: The current status of the batch.
          enum:
            - validating
            - failed
            - in_progress
            - finalizing
            - completed
            - expired
            - cancelling
            - cancelled
          type: string
      required:
        - id
        - object
        - endpoint
        - input_file_id
        - completion_window
        - status
        - created_at
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"batch_abc123\",\n  \"object\": \"batch\",\n  \"endpoint\": \"/v1/completions\",\n  \"errors\": null,\n  \"input_file_id\": \"file-abc123\",\n  \"completion_window\": \"24h\",\n  \"status\": \"completed\",\n  \"output_file_id\": \"file-cvaTdG\",\n  \"error_file_id\": \"file-HOWS94\",\n  \"created_at\": 1711471533,\n  \"in_progress_at\": 1711471538,\n  \"expires_at\": 1711557933,\n  \"finalizing_at\": 1711493133,\n  \"completed_at\": 1711493163,\n  \"failed_at\": null,\n  \"expired_at\": null,\n  \"cancelling_at\": null,\n  \"cancelled_at\": null,\n  \"request_counts\": {\n    \"total\": 100,\n    \"completed\": 95,\n    \"failed\": 5\n  },\n  \"metadata\": {\n    \"customer_id\": \"user_123456789\",\n    \"batch_description\": \"Nightly eval job\",\n  }\n}\n"
        name: The batch object
    BatchRequestInput:
      description: The per-line object of the batch input file
      properties:
        custom_id:
          description: A developer-provided per-request id that will be used to match outputs to inputs. Must be unique for each request in a batch.
          type: string
        method:
          description: The HTTP method to be used for the request. Currently only `POST` is supported.
          enum:
            - POST
          type: string
          x-stainless-const: true
        url:
          description: The OpenAI API relative URL to be used for the request. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported.
          type: string
      type: object
      x-oaiMeta:
        example: "{\"custom_id\": \"request-1\", \"method\": \"POST\", \"url\": \"/v1/chat/completions\", \"body\": {\"model\": \"gpt-4o-mini\", \"messages\": [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"}, {\"role\": \"user\", \"content\": \"What is 2+2?\"}]}}\n"
        name: The request input object
    BatchRequestOutput:
      description: The per-line object of the batch output and error files
      properties:
        custom_id:
          description: A developer-provided per-request id that will be used to match outputs to inputs.
          type: string
        error:
          description: For requests that failed with a non-HTTP error, this will contain more information on the cause of the failure.
          nullable: true
          properties:
            code:
              description: A machine-readable error code.
              type: string
            message:
              description: A human-readable error message.
              type: string
          type: object
        id:
          type: string
        response:
          nullable: true
          properties:
            body:
              description: The JSON body of the response
              type: object
              x-oaiTypeLabel: map
            request_id:
              description: An unique identifier for the OpenAI API request. Please include this request ID when contacting support.
              type: string
            status_code:
              description: The HTTP status code of the response
              type: integer
          type: object
      type: object
      x-oaiMeta:
        example: "{\"id\": \"batch_req_wnaDys\", \"custom_id\": \"request-2\", \"response\": {\"status_code\": 200, \"request_id\": \"req_c187b3\", \"body\": {\"id\": \"chatcmpl-9758Iw\", \"object\": \"chat.completion\", \"created\": 1711475054, \"model\": \"gpt-4o-mini\", \"choices\": [{\"index\": 0, \"message\": {\"role\": \"assistant\", \"content\": \"2 + 2 equals 4.\"}, \"finish_reason\": \"stop\"}], \"usage\": {\"prompt_tokens\": 24, \"completion_tokens\": 15, \"total_tokens\": 39}, \"system_fingerprint\": null}}, \"error\": null}\n"
        name: The request output object
    CancelUploadRequest:
      additionalProperties: false
      type: object
    ChatCompletionDeleted:
      properties:
        deleted:
          description: Whether the chat completion was deleted.
          type: boolean
        id:
          description: The ID of the chat completion that was deleted.
          type: string
        object:
          description: The type of object being deleted.
          enum:
            - chat.completion.deleted
          type: string
          x-stainless-const: true
      required:
        - object
        - id
        - deleted
      type: object
    ChatCompletionFunctionCallOption:
      description: "Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.\n"
      properties:
        name:
          description: The name of the function to call.
          type: string
      required:
        - name
      type: object
    ChatCompletionFunctions:
      deprecated: true
      properties:
        description:
          description: A description of what the function does, used by the model to choose when and how to call the function.
          type: string
        name:
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
          type: string
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
      required:
        - name
      type: object
    ChatCompletionList:
      description: "An object representing a list of Chat Completions.\n"
      properties:
        data:
          description: "An array of chat completion objects.\n"
          items:
            $ref: '#/components/schemas/CreateChatCompletionResponse'
          type: array
        first_id:
          description: The identifier of the first chat completion in the data array.
          type: string
        has_more:
          description: Indicates whether there are more Chat Completions available.
          type: boolean
        last_id:
          description: The identifier of the last chat completion in the data array.
          type: string
        object:
          default: list
          description: "The type of this object. It is always set to \"list\".\n"
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      title: ChatCompletionList
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"chat.completion\",\n      \"id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n      \"model\": \"gpt-4o-2024-08-06\",\n      \"created\": 1738960610,\n      \"request_id\": \"req_ded8ab984ec4bf840f37566c1011c417\",\n      \"tool_choice\": null,\n      \"usage\": {\n        \"total_tokens\": 31,\n        \"completion_tokens\": 18,\n        \"prompt_tokens\": 13\n      },\n      \"seed\": 4944116822809979520,\n      \"top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"presence_penalty\": 0.0,\n      \"frequency_penalty\": 0.0,\n      \"system_fingerprint\": \"fp_50cad350e4\",\n      \"input_user\": null,\n      \"service_tier\": \"default\",\n      \"tools\": null,\n      \"metadata\": {},\n      \"choices\": [\n        {\n          \"index\": 0,\n          \"message\": {\n            \"content\": \"Mind of circuits hum,  \\nLearning patterns in silence—  \\nFuture's quiet spark.\",\n            \"role\": \"assistant\",\n            \"tool_calls\": null,\n            \"function_call\": null\n          },\n          \"finish_reason\": \"stop\",\n          \"logprobs\": null\n        }\n      ],\n      \"response_format\": null\n    }\n  ],\n  \"first_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n  \"last_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n  \"has_more\": false\n}\n"
        group: chat
        name: The chat completion list object
    ChatCompletionMessageList:
      description: "An object representing a list of chat completion messages.\n"
      properties:
        data:
          description: "An array of chat completion message objects.\n"
          items:
            allOf:
              - $ref: '#/components/schemas/ChatCompletionResponseMessage'
              - properties:
                  id:
                    description: The identifier of the chat message.
                    type: string
                required:
                  - id
                type: object
          type: array
        first_id:
          description: The identifier of the first chat message in the data array.
          type: string
        has_more:
          description: Indicates whether there are more chat messages available.
          type: boolean
        last_id:
          description: The identifier of the last chat message in the data array.
          type: string
        object:
          default: list
          description: "The type of this object. It is always set to \"list\".\n"
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      title: ChatCompletionMessageList
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0\",\n      \"role\": \"user\",\n      \"content\": \"write a haiku about ai\",\n      \"name\": null,\n      \"content_parts\": null\n    }\n  ],\n  \"first_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0\",\n  \"last_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0\",\n  \"has_more\": false\n}\n"
        group: chat
        name: The chat completion message list object
    ChatCompletionMessageToolCall:
      properties:
        function:
          description: The function that the model called.
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          required:
            - name
            - arguments
          type: object
        id:
          description: The ID of the tool call.
          type: string
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - function
      type: object
    ChatCompletionMessageToolCallChunk:
      properties:
        function:
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          type: object
        id:
          description: The ID of the tool call.
          type: string
        index:
          type: integer
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - index
      type: object
    ChatCompletionMessageToolCalls:
      description: The tool calls generated by the model, such as function calls.
      items:
        $ref: '#/components/schemas/ChatCompletionMessageToolCall'
      type: array
    ChatCompletionModalities:
      description: "Output types that you would like the model to generate for this request.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to [generate audio](/docs/guides/audio). To\nrequest that this model generate both text and audio responses, you can\nuse:\n\n`[\"text\", \"audio\"]`\n"
      items:
        enum:
          - text
          - audio
        type: string
      nullable: true
      type: array
    ChatCompletionNamedToolChoice:
      description: Specifies a tool the model should use. Use to force the model to call a specific function.
      properties:
        function:
          properties:
            name:
              description: The name of the function to call.
              type: string
          required:
            - name
          type: object
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - type
        - function
      type: object
    ChatCompletionRequestAssistantMessage:
      description: "Messages sent by the model in response to user messages.\n"
      properties:
        audio:
          description: "Data about a previous audio response from the model. \n[Learn more](/docs/guides/audio).\n"
          nullable: true
          properties:
            id:
              description: "Unique identifier for a previous audio response from the model.\n"
              type: string
          required:
            - id
          type: object
          x-oaiExpandable: true
        content:
          description: "The contents of the assistant message. Required unless `tool_calls` or `function_call` is specified.\n"
          nullable: true
          oneOf:
            - description: The contents of the assistant message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. Can be one or more of type `text`, or exactly one of type `refusal`.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestAssistantMessageContentPart'
              minItems: 1
              title: Array of content parts
              type: array
          x-oaiExpandable: true
        function_call:
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          nullable: true
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          required:
            - arguments
            - name
          type: object
        name:
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
          type: string
        refusal:
          description: The refusal message by the assistant.
          nullable: true
          type: string
        role:
          description: The role of the messages author, in this case `assistant`.
          enum:
            - assistant
          type: string
          x-stainless-const: true
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
      required:
        - role
      title: Assistant message
      type: object
    ChatCompletionRequestAssistantMessageContentPart:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartRefusal'
      x-oaiExpandable: true
    ChatCompletionRequestDeveloperMessage:
      description: "Developer-provided instructions that the model should follow, regardless of\nmessages sent by the user. With o1 models and newer, `developer` messages\nreplace the previous `system` messages.\n"
      properties:
        content:
          description: The contents of the developer message.
          oneOf:
            - description: The contents of the developer message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. For developer messages, only type `text` is supported.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
              minItems: 1
              title: Array of content parts
              type: array
        name:
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
          type: string
        role:
          description: The role of the messages author, in this case `developer`.
          enum:
            - developer
          type: string
          x-stainless-const: true
      required:
        - content
        - role
      title: Developer message
      type: object
    ChatCompletionRequestFunctionMessage:
      deprecated: true
      properties:
        content:
          description: The contents of the function message.
          nullable: true
          type: string
        name:
          description: The name of the function to call.
          type: string
        role:
          description: The role of the messages author, in this case `function`.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - role
        - content
        - name
      title: Function message
      type: object
    ChatCompletionRequestMessage:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestDeveloperMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
        - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
      x-oaiExpandable: true
    ChatCompletionRequestMessageContentPartAudio:
      description: "Learn about [audio inputs](/docs/guides/audio).\n"
      properties:
        input_audio:
          properties:
            data:
              description: Base64 encoded audio data.
              type: string
            format:
              description: "The format of the encoded audio data. Currently supports \"wav\" and \"mp3\".\n"
              enum:
                - wav
                - mp3
              type: string
          required:
            - data
            - format
          type: object
        type:
          description: The type of the content part. Always `input_audio`.
          enum:
            - input_audio
          type: string
          x-stainless-const: true
      required:
        - type
        - input_audio
      title: Audio content part
      type: object
    ChatCompletionRequestMessageContentPartFile:
      description: "Learn about [file inputs](/docs/guides/text) for text generation.\n"
      properties:
        file:
          properties:
            file_data:
              description: "The base64 encoded file data, used when passing the file to the model \nas a string.\n"
              type: string
            file_id:
              description: "The ID of an uploaded file to use as input.\n"
              type: string
            file_name:
              description: "The name of the file, used when passing the file to the model as a \nstring.\n"
              type: string
          type: object
        type:
          description: The type of the content part. Always `file`.
          enum:
            - file
          type: string
          x-stainless-const: true
      required:
        - type
        - file
      title: File content part
      type: object
    ChatCompletionRequestMessageContentPartImage:
      description: "Learn about [image inputs](/docs/guides/vision).\n"
      properties:
        image_url:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image. Learn more in the [Vision guide](/docs/guides/vision#low-or-high-fidelity-image-understanding).
              enum:
                - auto
                - low
                - high
              type: string
            url:
              description: Either a URL of the image or the base64 encoded image data.
              format: uri
              type: string
          required:
            - url
          type: object
        type:
          description: The type of the content part.
          enum:
            - image_url
          type: string
          x-stainless-const: true
      required:
        - type
        - image_url
      title: Image content part
      type: object
    ChatCompletionRequestMessageContentPartRefusal:
      properties:
        refusal:
          description: The refusal message generated by the model.
          type: string
        type:
          description: The type of the content part.
          enum:
            - refusal
          type: string
          x-stainless-const: true
      required:
        - type
        - refusal
      title: Refusal content part
      type: object
    ChatCompletionRequestMessageContentPartText:
      description: "Learn about [text inputs](/docs/guides/text-generation).\n"
      properties:
        text:
          description: The text content.
          type: string
        type:
          description: The type of the content part.
          enum:
            - text
          type: string
          x-stainless-const: true
      required:
        - type
        - text
      title: Text content part
      type: object
    ChatCompletionRequestSystemMessage:
      description: "Developer-provided instructions that the model should follow, regardless of\nmessages sent by the user. With o1 models and newer, use `developer` messages\nfor this purpose instead.\n"
      properties:
        content:
          description: The contents of the system message.
          oneOf:
            - description: The contents of the system message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. For system messages, only type `text` is supported.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestSystemMessageContentPart'
              minItems: 1
              title: Array of content parts
              type: array
        name:
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
          type: string
        role:
          description: The role of the messages author, in this case `system`.
          enum:
            - system
          type: string
          x-stainless-const: true
      required:
        - content
        - role
      title: System message
      type: object
    ChatCompletionRequestSystemMessageContentPart:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      x-oaiExpandable: true
    ChatCompletionRequestToolMessage:
      properties:
        content:
          description: The contents of the tool message.
          oneOf:
            - description: The contents of the tool message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. For tool messages, only type `text` is supported.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestToolMessageContentPart'
              minItems: 1
              title: Array of content parts
              type: array
        role:
          description: The role of the messages author, in this case `tool`.
          enum:
            - tool
          type: string
          x-stainless-const: true
        tool_call_id:
          description: Tool call that this message is responding to.
          type: string
      required:
        - role
        - content
        - tool_call_id
      title: Tool message
      type: object
    ChatCompletionRequestToolMessageContentPart:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
      x-oaiExpandable: true
    ChatCompletionRequestUserMessage:
      description: "Messages sent by an end user, containing prompts or additional context\ninformation.\n"
      properties:
        content:
          description: "The contents of the user message.\n"
          oneOf:
            - description: The text contents of the message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text, image, or audio inputs.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestUserMessageContentPart'
              minItems: 1
              title: Array of content parts
              type: array
          x-oaiExpandable: true
        name:
          description: An optional name for the participant. Provides the model information to differentiate between participants of the same role.
          type: string
        role:
          description: The role of the messages author, in this case `user`.
          enum:
            - user
          type: string
          x-stainless-const: true
      required:
        - content
        - role
      title: User message
      type: object
    ChatCompletionRequestUserMessageContentPart:
      oneOf:
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartImage'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartAudio'
        - $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartFile'
      x-oaiExpandable: true
    ChatCompletionResponseMessage:
      description: A chat completion message generated by the model.
      properties:
        annotations:
          description: "Annotations for the message, when applicable, as when using the\n[web search tool](/docs/guides/tools-web-search?api-mode=chat).\n"
          items:
            description: "A URL citation when using web search.\n"
            properties:
              type:
                description: The type of the URL citation. Always `url_citation`.
                enum:
                  - url_citation
                type: string
                x-stainless-const: true
              url_citation:
                description: A URL citation when using web search.
                properties:
                  end_index:
                    description: The index of the last character of the URL citation in the message.
                    type: integer
                  start_index:
                    description: The index of the first character of the URL citation in the message.
                    type: integer
                  title:
                    description: The title of the web resource.
                    type: string
                  url:
                    description: The URL of the web resource.
                    type: string
                required:
                  - end_index
                  - start_index
                  - url
                  - title
                type: object
            required:
              - type
              - url_citation
            type: object
          type: array
        audio:
          description: "If the audio output modality is requested, this object contains data\nabout the audio response from the model. [Learn more](/docs/guides/audio).\n"
          nullable: true
          properties:
            data:
              description: "Base64 encoded audio bytes generated by the model, in the format\nspecified in the request.\n"
              type: string
            expires_at:
              description: "The Unix timestamp (in seconds) for when this audio response will\nno longer be accessible on the server for use in multi-turn\nconversations.\n"
              type: integer
            id:
              description: Unique identifier for this audio response.
              type: string
            transcript:
              description: Transcript of the audio generated by the model.
              type: string
          required:
            - id
            - expires_at
            - data
            - transcript
          type: object
          x-oaiExpandable: true
        content:
          description: The contents of the message.
          nullable: true
          type: string
        function_call:
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          required:
            - name
            - arguments
          type: object
        refusal:
          description: The refusal message generated by the model.
          nullable: true
          type: string
        role:
          description: The role of the author of this message.
          enum:
            - assistant
          type: string
          x-stainless-const: true
        tool_calls:
          $ref: '#/components/schemas/ChatCompletionMessageToolCalls'
      required:
        - role
        - content
        - refusal
      type: object
    ChatCompletionRole:
      description: The role of the author of a message
      enum:
        - developer
        - system
        - user
        - assistant
        - tool
        - function
      type: string
    ChatCompletionStreamOptions:
      default: null
      description: "Options for streaming response. Only set this when you set `stream: true`.\n"
      nullable: true
      properties:
        include_usage:
          description: "If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.\n"
          type: boolean
      type: object
    ChatCompletionStreamResponseDelta:
      description: A chat completion delta generated by streamed model responses.
      properties:
        content:
          description: The contents of the chunk message.
          nullable: true
          type: string
        function_call:
          deprecated: true
          description: Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
          properties:
            arguments:
              description: The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
              type: string
            name:
              description: The name of the function to call.
              type: string
          type: object
        refusal:
          description: The refusal message generated by the model.
          nullable: true
          type: string
        role:
          description: The role of the author of this message.
          enum:
            - developer
            - system
            - user
            - assistant
            - tool
          type: string
        tool_calls:
          items:
            $ref: '#/components/schemas/ChatCompletionMessageToolCallChunk'
          type: array
      type: object
    ChatCompletionTokenLogprob:
      properties:
        bytes: &o2985
          description: A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
          items:
            type: integer
          nullable: true
          type: array
        logprob: &o2996
          description: The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
          type: number
        token: &o3002
          description: The token.
          type: string
        top_logprobs:
          description: List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
          items:
            properties:
              bytes: *o2985
              logprob: *o2996
              token: *o3002
            required:
              - token
              - logprob
              - bytes
            type: object
          type: array
      required:
        - token
        - logprob
        - bytes
        - top_logprobs
      type: object
    ChatCompletionTool:
      properties:
        function:
          $ref: '#/components/schemas/FunctionObject'
        type:
          description: The type of the tool. Currently, only `function` is supported.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - type
        - function
      type: object
    ChatCompletionToolChoiceOption:
      description: "Controls which (if any) tool is called by the model.\n`none` means the model will not call any tool and instead generates a message.\n`auto` means the model can pick between generating a message or calling one or more tools.\n`required` means the model must call one or more tools.\nSpecifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.\n\n`none` is the default when no tools are present. `auto` is the default if tools are present.\n"
      oneOf:
        - description: "`none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools.\n"
          enum:
            - none
            - auto
            - required
          type: string
        - $ref: '#/components/schemas/ChatCompletionNamedToolChoice'
      x-oaiExpandable: true
    ChunkingStrategyRequestParam:
      description: The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
      oneOf:
        - $ref: '#/components/schemas/AutoChunkingStrategyRequestParam'
        - $ref: '#/components/schemas/StaticChunkingStrategyRequestParam'
      type: object
      x-oaiExpandable: true
    Click:
      description: "A click action.\n"
      properties:
        button:
          description: "Indicates which mouse button was pressed during the click. One of `left`, `right`, `wheel`, `back`, or `forward`.\n"
          enum:
            - left
            - right
            - wheel
            - back
            - forward
          type: string
        type:
          default: click
          description: "Specifies the event type. For a click action, this property is \nalways set to `click`.\n"
          enum:
            - click
          type: string
          x-stainless-const: true
        x:
          description: "The x-coordinate where the click occurred.\n"
          type: integer
        y:
          description: "The y-coordinate where the click occurred.\n"
          type: integer
      required:
        - type
        - button
        - x
        - y
      title: Click
      type: object
    CodeInterpreterFileOutput:
      description: "The output of a code interpreter tool call that is a file.\n"
      properties:
        files:
          items:
            properties:
              file_id:
                description: "The ID of the file.\n"
                type: string
              mime_type:
                description: "The MIME type of the file.\n"
                type: string
            required:
              - mime_type
              - file_id
            type: object
          type: array
        type:
          description: "The type of the code interpreter file output. Always `files`.\n"
          enum:
            - files
          type: string
          x-stainless-const: true
      required:
        - type
        - files
      title: Code interpreter file output
      type: object
    CodeInterpreterTextOutput:
      description: "The output of a code interpreter tool call that is text.\n"
      properties:
        logs:
          description: "The logs of the code interpreter tool call.\n"
          type: string
        type:
          description: "The type of the code interpreter text output. Always `logs`.\n"
          enum:
            - logs
          type: string
          x-stainless-const: true
      required:
        - type
        - logs
      title: Code interpreter text output
      type: object
    CodeInterpreterTool:
      description: "A tool that runs code.\n"
      properties:
        file_ids:
          description: "The IDs of the files to run the code on.\n"
          items:
            type: string
          type: array
        type:
          description: "The type of the code interpreter tool. Always `code_interpreter`.\n"
          enum:
            - code_interpreter
          type: string
          x-stainless-const: true
      required:
        - type
        - file_ids
      title: Code interpreter
      type: object
    CodeInterpreterToolCall:
      description: "A tool call to run code.\n"
      properties:
        code:
          description: "The code to run.\n"
          type: string
        id:
          description: "The unique ID of the code interpreter tool call.\n"
          type: string
        results:
          description: "The results of the code interpreter tool call.\n"
          items:
            $ref: '#/components/schemas/CodeInterpreterToolOutput'
            x-oaiExpandable: true
          type: array
        status:
          description: "The status of the code interpreter tool call.\n"
          enum:
            - in_progress
            - interpreting
            - completed
          type: string
        type:
          description: "The type of the code interpreter tool call. Always `code_interpreter_call`.\n"
          enum:
            - code_interpreter_call
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - code
        - status
        - results
      title: Code interpreter tool call
      type: object
    CodeInterpreterToolOutput:
      oneOf:
        - $ref: '#/components/schemas/CodeInterpreterTextOutput'
        - $ref: '#/components/schemas/CodeInterpreterFileOutput'
    ComparisonFilter:
      additionalProperties: false
      description: "A filter used to compare a specified attribute key to a given value using a defined comparison operation.\n"
      properties:
        key:
          description: The key to compare against the value.
          type: string
        type:
          default: eq
          description: "Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\n- `eq`: equals\n- `ne`: not equal\n- `gt`: greater than\n- `gte`: greater than or equal\n- `lt`: less than\n- `lte`: less than or equal\n"
          enum:
            - eq
            - ne
            - gt
            - gte
            - lt
            - lte
          type: string
        value:
          description: The value to compare against the attribute key; supports string, number, or boolean types.
          oneOf:
            - type: string
            - type: number
            - type: boolean
      required:
        - type
        - key
        - value
      title: Comparison Filter
      type: object
      x-oaiMeta:
        name: ComparisonFilter
    CompleteUploadRequest:
      additionalProperties: false
      properties:
        md5:
          description: "The optional md5 checksum for the file contents to verify if the bytes uploaded matches what you expect.\n"
          type: string
        part_ids:
          description: "The ordered list of Part IDs.\n"
          items:
            type: string
          type: array
      required:
        - part_ids
      type: object
    CompletionUsage:
      description: Usage statistics for the completion request.
      properties:
        completion_tokens:
          default: 0
          description: Number of tokens in the generated completion.
          type: integer
        completion_tokens_details:
          description: Breakdown of tokens used in a completion.
          properties:
            accepted_prediction_tokens:
              default: 0
              description: "When using Predicted Outputs, the number of tokens in the\nprediction that appeared in the completion.\n"
              type: integer
            audio_tokens:
              default: 0
              description: Audio input tokens generated by the model.
              type: integer
            reasoning_tokens:
              default: 0
              description: Tokens generated by the model for reasoning.
              type: integer
            rejected_prediction_tokens:
              default: 0
              description: "When using Predicted Outputs, the number of tokens in the\nprediction that did not appear in the completion. However, like\nreasoning tokens, these tokens are still counted in the total\ncompletion tokens for purposes of billing, output, and context window\nlimits.\n"
              type: integer
          type: object
        prompt_tokens:
          default: 0
          description: Number of tokens in the prompt.
          type: integer
        prompt_tokens_details:
          description: Breakdown of tokens used in the prompt.
          properties:
            audio_tokens:
              default: 0
              description: Audio input tokens present in the prompt.
              type: integer
            cached_tokens:
              default: 0
              description: Cached tokens present in the prompt.
              type: integer
          type: object
        total_tokens:
          default: 0
          description: Total number of tokens used in the request (prompt + completion).
          type: integer
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
    CompoundFilter:
      additionalProperties: false
      description: Combine multiple filters using `and` or `or`.
      properties:
        filters:
          description: Array of filters to combine. Items can be `ComparisonFilter` or `CompoundFilter`.
          items:
            oneOf:
              - $ref: '#/components/schemas/ComparisonFilter'
          type: array
        type:
          description: 'Type of operation: `and` or `or`.'
          enum:
            - and
            - or
          type: string
      required:
        - type
        - filters
      title: Compound Filter
      type: object
      x-oaiMeta:
        name: CompoundFilter
    ComputerAction:
      oneOf:
        - $ref: '#/components/schemas/Click'
        - $ref: '#/components/schemas/DoubleClick'
        - $ref: '#/components/schemas/Drag'
        - $ref: '#/components/schemas/KeyPress'
        - $ref: '#/components/schemas/Move'
        - $ref: '#/components/schemas/Screenshot'
        - $ref: '#/components/schemas/Scroll'
        - $ref: '#/components/schemas/Type'
        - $ref: '#/components/schemas/Wait'
    ComputerScreenshotImage:
      description: "A computer screenshot image used with the computer use tool.\n"
      properties:
        file_id:
          description: The identifier of an uploaded file that contains the screenshot.
          type: string
        image_url:
          description: The URL of the screenshot image.
          type: string
        type:
          default: computer_screenshot
          description: "Specifies the event type. For a computer screenshot, this property is \nalways set to `computer_screenshot`.\n"
          enum:
            - computer_screenshot
          type: string
          x-stainless-const: true
      required:
        - type
      type: object
    ComputerTool:
      description: "A tool that controls a virtual computer. Learn more about the \n[computer tool](/docs/guides/tools-computer-use).\n"
      properties:
        display_height:
          description: "The height of the computer display.\n"
          type: number
        display_width:
          description: "The width of the computer display.\n"
          type: number
        environment:
          description: "The type of computer environment to control.\n"
          enum:
            - mac
            - windows
            - ubuntu
            - browser
          type: string
        type:
          description: "The type of the computer use tool. Always `computer_use_preview`.\n"
          enum:
            - computer-preview
          type: string
          x-stainless-const: true
      required:
        - type
        - display_width
        - display_height
        - environment
      title: Computer use
      type: object
    ComputerToolCall:
      description: "A tool call to a computer use tool. See the \n[computer use guide](/docs/guides/tools-computer-use) for more information.\n"
      properties:
        action:
          $ref: '#/components/schemas/ComputerAction'
          x-oaiExpandable: true
        call_id:
          description: "An identifier used when responding to the tool call with output.\n"
          type: string
        id:
          description: The unique ID of the computer call.
          type: string
        pending_safety_checks:
          description: "The pending safety checks for the computer call.\n"
          items:
            $ref: '#/components/schemas/ComputerToolCallSafetyCheck'
          type: array
          x-oaiExpandable: true
        status:
          description: "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
          enum:
            - in_progress
            - completed
            - incomplete
          type: string
        type:
          default: computer_call
          description: The type of the computer call. Always `computer_call`.
          enum:
            - computer_call
          type: string
      required:
        - type
        - id
        - action
        - call_id
        - pending_safety_checks
        - status
      title: Computer tool call
      type: object
    ComputerToolCallOutput:
      description: "The output of a computer tool call.\n"
      properties:
        acknowledged_safety_checks:
          description: "The safety checks reported by the API that have been acknowledged by the \ndeveloper.\n"
          items:
            $ref: '#/components/schemas/ComputerToolCallSafetyCheck'
          type: array
          x-oaiExpandable: true
        call_id:
          description: "The ID of the computer tool call that produced the output.\n"
          type: string
        id:
          description: "The ID of the computer tool call output.\n"
          type: string
        output:
          $ref: '#/components/schemas/ComputerScreenshotImage'
        status:
          description: "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n"
          enum:
            - in_progress
            - completed
            - incomplete
          type: string
        type:
          default: computer_call_output
          description: "The type of the computer tool call output. Always `computer_call_output`.\n"
          enum:
            - computer_call_output
          type: string
          x-stainless-const: true
      required:
        - type
        - call_id
        - output
      title: Computer tool call output
      type: object
    ComputerToolCallOutputResource:
      allOf:
        - $ref: '#/components/schemas/ComputerToolCallOutput'
        - properties:
            id:
              description: "The unique ID of the computer call tool output.\n"
              type: string
          required:
            - id
          type: object
    ComputerToolCallSafetyCheck:
      description: "A pending safety check for the computer call.\n"
      properties:
        code:
          description: The type of the pending safety check.
          type: string
        id:
          description: The ID of the pending safety check.
          type: string
        message:
          description: Details about the pending safety check.
          type: string
      required:
        - id
        - code
        - message
      type: object
    Content:
      description: "Multi-modal input and output contents.\n"
      oneOf:
        - $ref: '#/components/schemas/InputContent'
          title: Input content types
          x-oaiExpandable: true
        - $ref: '#/components/schemas/OutputContent'
          title: Output content types
          x-oaiExpandable: true
    Coordinate:
      description: "An x/y coordinate pair, e.g. `{ x: 100, y: 200 }`.\n"
      properties:
        x:
          description: "The x-coordinate.\n"
          type: integer
        y:
          description: "The y-coordinate.\n"
          type: integer
      required:
        - x
        - y
      title: Coordinate
      type: object
    CostsResult:
      description: The aggregated costs details of the specific time bucket.
      properties:
        amount:
          description: The monetary value in its associated currency.
          properties:
            currency:
              description: Lowercase ISO-4217 currency e.g. "usd"
              type: string
            value:
              description: The numeric value of the cost.
              type: number
          type: object
        line_item:
          description: When `group_by=line_item`, this field provides the line item of the grouped costs result.
          nullable: true
          type: string
        object:
          enum:
            - organization.costs.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project ID of the grouped costs result.
          nullable: true
          type: string
      required:
        - object
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.costs.result\",\n    \"amount\": {\n      \"value\": 0.06,\n      \"currency\": \"usd\"\n    },\n    \"line_item\": \"Image models\",\n    \"project_id\": \"proj_abc\"\n}\n"
        name: Costs object
    CreateAssistantRequest:
      additionalProperties: false
      properties:
        description:
          description: "The description of the assistant. The maximum length is 512 characters.\n"
          maxLength: 512
          nullable: true
          type: string
        instructions:
          description: "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n"
          maxLength: 256000
          nullable: true
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          anyOf:
            - type: string
            - $ref: '#/components/schemas/AssistantSupportedModels'
          description: "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n"
          example: gpt-4o
          x-oaiTypeLabel: string
        name:
          description: "The name of the assistant. The maximum length is 256 characters.\n"
          maxLength: 256
          nullable: true
          type: string
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        temperature:
          default: 1
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        tool_resources:
          description: "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              oneOf:
                - required:
                    - vector_store_ids
                - required:
                    - vector_stores
              properties:
                vector_store_ids:
                  description: "The [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                  items:
                    type: string
                  maxItems: 1
                  type: array
                vector_stores:
                  description: "A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                  items:
                    properties:
                      chunking_strategy:
                        description: The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
                        oneOf:
                          - additionalProperties: false
                            description: The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
                            properties:
                              type:
                                description: Always `auto`.
                                enum:
                                  - auto
                                type: string
                                x-stainless-const: true
                            required:
                              - type
                            title: Auto Chunking Strategy
                            type: object
                          - additionalProperties: false
                            properties:
                              static:
                                additionalProperties: false
                                properties:
                                  chunk_overlap_tokens:
                                    description: "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                    type: integer
                                  max_chunk_size_tokens:
                                    description: The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
                                    maximum: 4096
                                    minimum: 100
                                    type: integer
                                required:
                                  - max_chunk_size_tokens
                                  - chunk_overlap_tokens
                                type: object
                              type:
                                description: Always `static`.
                                enum:
                                  - static
                                type: string
                                x-stainless-const: true
                            required:
                              - type
                              - static
                            title: Static Chunking Strategy
                            type: object
                        type: object
                        x-oaiExpandable: true
                      file_ids:
                        description: "A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n"
                        items:
                          type: string
                        maxItems: 10000
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                    type: object
                  maxItems: 1
                  type: array
              type: object
          type: object
        tools:
          default: []
          description: "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n"
          items:
            oneOf:
              - $ref: '#/components/schemas/AssistantToolsCode'
              - $ref: '#/components/schemas/AssistantToolsFileSearch'
              - $ref: '#/components/schemas/AssistantToolsFunction'
            x-oaiExpandable: true
          maxItems: 128
          type: array
        top_p:
          default: 1
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
      required:
        - model
      type: object
    CreateChatCompletionFunctionResponse:
      description: Represents a chat completion response returned by model, based on the provided input.
      properties:
        choices:
          description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
          items:
            properties:
              finish_reason:
                description: "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, or `function_call` if the model called a function.\n"
                enum:
                  - stop
                  - length
                  - function_call
                  - content_filter
                type: string
              index:
                description: The index of the choice in the list of choices.
                type: integer
              message:
                $ref: '#/components/schemas/ChatCompletionResponseMessage'
            required:
              - finish_reason
              - index
              - message
            type: object
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion was created.
          type: integer
        id:
          description: A unique identifier for the chat completion.
          type: string
        model:
          description: The model used for the chat completion.
          type: string
        object:
          description: The object type, which is always `chat.completion`.
          enum:
            - chat.completion
          type: string
          x-stainless-const: true
        system_fingerprint:
          description: "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
        - choices
        - created
        - id
        - model
        - object
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"chatcmpl-abc123\",\n  \"object\": \"chat.completion\",\n  \"created\": 1699896916,\n  \"model\": \"gpt-4o-mini\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": null,\n        \"tool_calls\": [\n          {\n            \"id\": \"call_abc123\",\n            \"type\": \"function\",\n            \"function\": {\n              \"name\": \"get_current_weather\",\n              \"arguments\": \"{\\n\\\"location\\\": \\\"Boston, MA\\\"\\n}\"\n            }\n          }\n        ]\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"tool_calls\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 82,\n    \"completion_tokens\": 17,\n    \"total_tokens\": 99,\n    \"completion_tokens_details\": {\n      \"reasoning_tokens\": 0,\n      \"accepted_prediction_tokens\": 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  }\n}\n"
        group: chat
        name: The chat completion object
    CreateChatCompletionImageResponse:
      description: Represents a streamed chunk of a chat completion response returned by model, based on the provided input. [Learn more](/docs/guides/streaming-responses).
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"chatcmpl-123\",\n  \"object\": \"chat.completion\",\n  \"created\": 1677652288,\n  \"model\": \"gpt-4o-mini\",\n  \"system_fingerprint\": \"fp_44709d6fcb\",\n  \"choices\": [{\n    \"index\": 0,\n    \"message\": {\n      \"role\": \"assistant\",\n      \"content\": \"\\n\\nThis image shows a wooden boardwalk extending through a lush green marshland.\",\n    },\n    \"logprobs\": null,\n    \"finish_reason\": \"stop\"\n  }],\n  \"usage\": {\n    \"prompt_tokens\": 9,\n    \"completion_tokens\": 12,\n    \"total_tokens\": 21,\n    \"completion_tokens_details\": {\n      \"reasoning_tokens\": 0,\n      \"accepted_prediction_tokens\": 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  }\n}\n"
        group: chat
        name: The chat completion chunk object
    CreateChatCompletionRequest:
      allOf:
        - $ref: '#/components/schemas/CreateModelResponseProperties'
        - properties:
            audio:
              description: "Parameters for audio output. Required when audio output is requested with\n`modalities: [\"audio\"]`. [Learn more](/docs/guides/audio).\n"
              nullable: true
              properties:
                format:
                  description: "Specifies the output audio format. Must be one of `wav`, `mp3`, `flac`,\n`opus`, or `pcm16`.\n"
                  enum:
                    - wav
                    - mp3
                    - flac
                    - opus
                    - pcm16
                  type: string
                voice:
                  description: "The voice the model uses to respond. Supported voices are \n`alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`, and `shimmer`.\n"
                  enum:
                    - alloy
                    - ash
                    - ballad
                    - coral
                    - echo
                    - sage
                    - shimmer
                    - verse
                  type: string
              required:
                - voice
                - format
              type: object
              x-oaiExpandable: true
            frequency_penalty:
              default: 0
              description: "Number between -2.0 and 2.0. Positive values penalize new tokens based on\ntheir existing frequency in the text so far, decreasing the model's\nlikelihood to repeat the same line verbatim.\n"
              maximum: 2
              minimum: -2
              nullable: true
              type: number
            function_call:
              deprecated: true
              description: "Deprecated in favor of `tool_choice`.\n\nControls which (if any) function is called by the model.\n\n`none` means the model will not call a function and instead generates a\nmessage.\n\n`auto` means the model can pick between generating a message or calling a\nfunction.\n\nSpecifying a particular function via `{\"name\": \"my_function\"}` forces the\nmodel to call that function.\n\n`none` is the default when no functions are present. `auto` is the default\nif functions are present.\n"
              oneOf:
                - description: "`none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function.\n"
                  enum:
                    - none
                    - auto
                  type: string
                - $ref: '#/components/schemas/ChatCompletionFunctionCallOption'
              x-oaiExpandable: true
            functions:
              deprecated: true
              description: "Deprecated in favor of `tools`.\n\nA list of functions the model may generate JSON inputs for.\n"
              items:
                $ref: '#/components/schemas/ChatCompletionFunctions'
              maxItems: 128
              minItems: 1
              type: array
            logit_bias:
              additionalProperties:
                type: integer
              default: null
              description: "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the\ntokenizer) to an associated bias value from -100 to 100. Mathematically,\nthe bias is added to the logits generated by the model prior to sampling.\nThe exact effect will vary per model, but values between -1 and 1 should\ndecrease or increase likelihood of selection; values like -100 or 100\nshould result in a ban or exclusive selection of the relevant token.\n"
              nullable: true
              type: object
              x-oaiTypeLabel: map
            logprobs:
              default: false
              description: "Whether to return log probabilities of the output tokens or not. If true,\nreturns the log probabilities of each output token returned in the\n`content` of `message`.\n"
              nullable: true
              type: boolean
            max_completion_tokens:
              description: "An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n"
              nullable: true
              type: integer
            max_tokens:
              deprecated: true
              description: "The maximum number of [tokens](/tokenizer) that can be generated in the\nchat completion. This value can be used to control\n[costs](https://openai.com/api/pricing/) for text generated via API.\n\nThis value is now deprecated in favor of `max_completion_tokens`, and is\nnot compatible with [o1 series models](/docs/guides/reasoning).\n"
              nullable: true
              type: integer
            messages:
              description: "A list of messages comprising the conversation so far. Depending on the\n[model](/docs/models) you use, different message types (modalities) are\nsupported, like [text](/docs/guides/text-generation),\n[images](/docs/guides/vision), and [audio](/docs/guides/audio).\n"
              items:
                $ref: '#/components/schemas/ChatCompletionRequestMessage'
              minItems: 1
              type: array
            modalities:
              $ref: '#/components/schemas/ResponseModalities'
            n:
              default: 1
              description: How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
              example: 1
              maximum: 128
              minimum: 1
              nullable: true
              type: integer
            parallel_tool_calls:
              $ref: '#/components/schemas/ParallelToolCalls'
            prediction:
              description: "Configuration for a [Predicted Output](/docs/guides/predicted-outputs),\nwhich can greatly improve response times when large parts of the model\nresponse are known ahead of time. This is most common when you are\nregenerating a file with only minor changes to most of the content.\n"
              nullable: true
              oneOf:
                - $ref: '#/components/schemas/PredictionContent'
              x-oaiExpandable: true
            presence_penalty:
              default: 0
              description: "Number between -2.0 and 2.0. Positive values penalize new tokens based on\nwhether they appear in the text so far, increasing the model's likelihood\nto talk about new topics.\n"
              maximum: 2
              minimum: -2
              nullable: true
              type: number
            reasoning_effort:
              $ref: '#/components/schemas/ReasoningEffort'
            response_format:
              description: "An object specifying the format that the model must output.\n\nSetting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables\nStructured Outputs which ensures the model will match your supplied JSON\nschema. Learn more in the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n"
              oneOf:
                - $ref: '#/components/schemas/ResponseFormatText'
                - $ref: '#/components/schemas/ResponseFormatJsonSchema'
                - $ref: '#/components/schemas/ResponseFormatJsonObject'
              x-oaiExpandable: true
            seed:
              description: "This feature is in Beta.\nIf specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
              nullable: true
              type: integer
              x-oaiMeta:
                beta: true
            service_tier:
              default: auto
              description: "Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:\n  - If set to 'auto', and the Project is Scale tier enabled, the system\n    will utilize scale tier credits until they are exhausted.\n  - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n  - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.\n  - When not set, the default behavior is 'auto'.\n\n  When this parameter is set, the response body will include the `service_tier` utilized.\n"
              enum:
                - auto
                - default
              nullable: true
              type: string
            stop:
              $ref: '#/components/schemas/StopConfiguration'
            store:
              default: false
              description: "Whether or not to store the output of this chat completion request for \nuse in our [model distillation](/docs/guides/distillation) or\n[evals](/docs/guides/evals) products.\n"
              nullable: true
              type: boolean
            stream:
              default: false
              description: "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](/docs/api-reference/chat/streaming)\nfor more information, along with the [streaming responses](/docs/guides/streaming-responses)\nguide for more information on how to handle the streaming events.\n"
              nullable: true
              type: boolean
            stream_options:
              $ref: '#/components/schemas/ChatCompletionStreamOptions'
            tool_choice:
              $ref: '#/components/schemas/ChatCompletionToolChoiceOption'
            tools:
              description: "A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.\n"
              items:
                $ref: '#/components/schemas/ChatCompletionTool'
              type: array
            top_logprobs:
              description: "An integer between 0 and 20 specifying the number of most likely tokens to\nreturn at each token position, each with an associated log probability.\n`logprobs` must be set to `true` if this parameter is used.\n"
              maximum: 20
              minimum: 0
              nullable: true
              type: integer
            web_search_options:
              description: "This tool searches the web for relevant results to use in a response.\nLearn more about the [web search tool](/docs/guides/tools-web-search?api-mode=chat).\n"
              properties:
                search_context_size:
                  $ref: '#/components/schemas/WebSearchContextSize'
                user_location:
                  description: "Approximate location parameters for the search.\n"
                  nullable: true
                  properties:
                    approximate:
                      $ref: '#/components/schemas/WebSearchLocation'
                    type:
                      description: "The type of location approximation. Always `approximate`.\n"
                      enum:
                        - approximate
                      type: string
                      x-stainless-const: true
                  required:
                    - type
                    - approximate
                  type: object
              title: Web search
              type: object
          required:
            - model
            - messages
          type: object
    CreateChatCompletionResponse:
      description: Represents a chat completion response returned by model, based on the provided input.
      properties:
        choices:
          description: A list of chat completion choices. Can be more than one if `n` is greater than 1.
          items:
            properties:
              finish_reason:
                description: "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n"
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                type: string
              index:
                description: The index of the choice in the list of choices.
                type: integer
              logprobs:
                description: Log probability information for the choice.
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                  refusal:
                    description: A list of message refusal tokens with log probability information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                required:
                  - content
                  - refusal
                type: object
              message:
                $ref: '#/components/schemas/ChatCompletionResponseMessage'
            required:
              - finish_reason
              - index
              - message
              - logprobs
            type: object
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion was created.
          type: integer
        id:
          description: A unique identifier for the chat completion.
          type: string
        model:
          description: The model used for the chat completion.
          type: string
        object:
          description: The object type, which is always `chat.completion`.
          enum:
            - chat.completion
          type: string
          x-stainless-const: true
        service_tier:
          description: The service tier used for processing the request.
          enum:
            - scale
            - default
          example: scale
          nullable: true
          type: string
        system_fingerprint:
          description: "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
        - choices
        - created
        - id
        - model
        - object
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"chatcmpl-B9MHDbslfkBeAs8l4bebGdFOJ6PeG\",\n  \"object\": \"chat.completion\",\n  \"created\": 1741570283,\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"The image shows a wooden boardwalk path running through a lush green field or meadow. The sky is bright blue with some scattered clouds, giving the scene a serene and peaceful atmosphere. Trees and shrubs are visible in the background.\",\n        \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 1117,\n    \"completion_tokens\": 46,\n    \"total_tokens\": 1163,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\": {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\": 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\": \"default\",\n  \"system_fingerprint\": \"fp_fc9f1d7035\"\n}\n"
        group: chat
        name: The chat completion object
    CreateChatCompletionStreamResponse:
      description: "Represents a streamed chunk of a chat completion response returned\nby the model, based on the provided input. \n[Learn more](/docs/guides/streaming-responses).\n"
      properties:
        choices:
          description: "A list of chat completion choices. Can contain more than one elements if `n` is greater than 1. Can also be empty for the\nlast chunk if you set `stream_options: {\"include_usage\": true}`.\n"
          items:
            properties:
              delta:
                $ref: '#/components/schemas/ChatCompletionStreamResponseDelta'
              finish_reason:
                description: "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\n`content_filter` if content was omitted due to a flag from our content filters,\n`tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.\n"
                enum:
                  - stop
                  - length
                  - tool_calls
                  - content_filter
                  - function_call
                nullable: true
                type: string
              index:
                description: The index of the choice in the list of choices.
                type: integer
              logprobs:
                description: Log probability information for the choice.
                nullable: true
                properties:
                  content:
                    description: A list of message content tokens with log probability information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                  refusal:
                    description: A list of message refusal tokens with log probability information.
                    items:
                      $ref: '#/components/schemas/ChatCompletionTokenLogprob'
                    nullable: true
                    type: array
                required:
                  - content
                  - refusal
                type: object
            required:
              - delta
              - finish_reason
              - index
            type: object
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the chat completion was created. Each chunk has the same timestamp.
          type: integer
        id:
          description: A unique identifier for the chat completion. Each chunk has the same ID.
          type: string
        model:
          description: The model to generate the completion.
          type: string
        object:
          description: The object type, which is always `chat.completion.chunk`.
          enum:
            - chat.completion.chunk
          type: string
          x-stainless-const: true
        service_tier:
          description: The service tier used for processing the request.
          enum:
            - scale
            - default
          example: scale
          nullable: true
          type: string
        system_fingerprint:
          description: "This fingerprint represents the backend configuration that the model runs with.\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          type: string
        usage:
          description: "An optional field that will only be present when you set `stream_options: {\"include_usage\": true}` in your request.\nWhen present, it contains a null value except for the last chunk which contains the token usage statistics for the entire request.\n"
          nullable: true
          properties:
            completion_tokens:
              description: Number of tokens in the generated completion.
              type: integer
            prompt_tokens:
              description: Number of tokens in the prompt.
              type: integer
            total_tokens:
              description: Total number of tokens used in the request (prompt + completion).
              type: integer
          required:
            - prompt_tokens
            - completion_tokens
            - total_tokens
          type: object
      required:
        - choices
        - created
        - id
        - model
        - object
      type: object
      x-oaiMeta:
        example: "{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"role\":\"assistant\",\"content\":\"\"},\"logprobs\":null,\"finish_reason\":null}]}\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{\"content\":\"Hello\"},\"logprobs\":null,\"finish_reason\":null}]}\n\n....\n\n{\"id\":\"chatcmpl-123\",\"object\":\"chat.completion.chunk\",\"created\":1694268190,\"model\":\"gpt-4o-mini\", \"system_fingerprint\": \"fp_44709d6fcb\", \"choices\":[{\"index\":0,\"delta\":{},\"logprobs\":null,\"finish_reason\":\"stop\"}]}\n"
        group: chat
        name: The chat completion chunk object
    CreateCompletionRequest:
      properties:
        best_of:
          default: 1
          description: "Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.\n\nWhen used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
          maximum: 20
          minimum: 0
          nullable: true
          type: integer
        echo:
          default: false
          description: "Echo back the prompt in addition to the completion\n"
          nullable: true
          type: boolean
        frequency_penalty:
          default: 0
          description: "Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n"
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        logit_bias:
          additionalProperties:
            type: integer
          default: null
          description: "Modify the likelihood of specified tokens appearing in the completion.\n\nAccepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.\n\nAs an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.\n"
          nullable: true
          type: object
          x-oaiTypeLabel: map
        logprobs:
          default: null
          description: "Include the log probabilities on the `logprobs` most likely output tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.\n\nThe maximum value for `logprobs` is 5.\n"
          maximum: 5
          minimum: 0
          nullable: true
          type: integer
        max_tokens:
          default: 16
          description: "The maximum number of [tokens](/tokenizer) that can be generated in the completion.\n\nThe token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.\n"
          example: 16
          minimum: 0
          nullable: true
          type: integer
        model:
          anyOf:
            - type: string
            - enum:
                - gpt-3.5-turbo-instruct
                - davinci-002
                - babbage-002
              type: string
          description: "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n"
          x-oaiTypeLabel: string
        n:
          default: 1
          description: "How many completions to generate for each prompt.\n\n**Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.\n"
          example: 1
          maximum: 128
          minimum: 1
          nullable: true
          type: integer
        presence_penalty:
          default: 0
          description: "Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.\n\n[See more information about frequency and presence penalties.](/docs/guides/text-generation)\n"
          maximum: 2
          minimum: -2
          nullable: true
          type: number
        prompt:
          default: <|endoftext|>
          description: "The prompt(s) to generate completions for, encoded as a string, array of strings, array of tokens, or array of token arrays.\n\nNote that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document.\n"
          nullable: true
          oneOf:
            - default: &o5103 
              example: This is a test.
              type: string
            - items:
                default: *o5103
                example: This is a test.
                type: string
              type: array
            - example: '[1212, 318, 257, 1332, 13]'
              items:
                type: integer
              minItems: 1
              type: array
            - example: '[[1212, 318, 257, 1332, 13]]'
              items:
                items:
                  type: integer
                minItems: 1
                type: array
              minItems: 1
              type: array
        seed:
          description: "If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.\n\nDeterminism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.\n"
          format: int64
          nullable: true
          type: integer
        stop:
          $ref: '#/components/schemas/StopConfiguration'
        stream:
          default: false
          description: "Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n"
          nullable: true
          type: boolean
        stream_options:
          $ref: '#/components/schemas/ChatCompletionStreamOptions'
        suffix:
          default: null
          description: "The suffix that comes after a completion of inserted text.\n\nThis parameter is only supported for `gpt-3.5-turbo-instruct`.\n"
          example: test.
          nullable: true
          type: string
        temperature:
          default: 1
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n\nWe generally recommend altering this or `top_p` but not both.\n"
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_p:
          default: 1
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        user:
          description: "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
          example: user-1234
          type: string
      required:
        - model
        - prompt
      type: object
    CreateCompletionResponse:
      description: "Represents a completion response from the API. Note: both the streamed and non-streamed response objects share the same shape (unlike the chat endpoint).\n"
      properties:
        choices:
          description: The list of completion choices the model generated for the input prompt.
          items:
            properties:
              finish_reason:
                description: "The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence,\n`length` if the maximum number of tokens specified in the request was reached,\nor `content_filter` if content was omitted due to a flag from our content filters.\n"
                enum:
                  - stop
                  - length
                  - content_filter
                type: string
              index:
                type: integer
              logprobs:
                nullable: true
                properties:
                  text_offset:
                    items:
                      type: integer
                    type: array
                  token_logprobs:
                    items:
                      type: number
                    type: array
                  tokens:
                    items:
                      type: string
                    type: array
                  top_logprobs:
                    items:
                      additionalProperties:
                        type: number
                      type: object
                    type: array
                type: object
              text:
                type: string
            required:
              - finish_reason
              - index
              - logprobs
              - text
            type: object
          type: array
        created:
          description: The Unix timestamp (in seconds) of when the completion was created.
          type: integer
        id:
          description: A unique identifier for the completion.
          type: string
        model:
          description: The model used for completion.
          type: string
        object:
          description: The object type, which is always "text_completion"
          enum:
            - text_completion
          type: string
          x-stainless-const: true
        system_fingerprint:
          description: "This fingerprint represents the backend configuration that the model runs with.\n\nCan be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.\n"
          type: string
        usage:
          $ref: '#/components/schemas/CompletionUsage'
      required:
        - id
        - object
        - created
        - model
        - choices
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7\",\n  \"object\": \"text_completion\",\n  \"created\": 1589478378,\n  \"model\": \"gpt-4-turbo\",\n  \"choices\": [\n    {\n      \"text\": \"\\n\\nThis is indeed a test\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"finish_reason\": \"length\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 5,\n    \"completion_tokens\": 7,\n    \"total_tokens\": 12\n  }\n}\n"
        legacy: true
        name: The completion object
    CreateEmbeddingRequest:
      additionalProperties: false
      properties:
        dimensions:
          description: "The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.\n"
          minimum: 1
          type: integer
        encoding_format:
          default: float
          description: The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/).
          enum:
            - float
            - base64
          example: float
          type: string
        input:
          description: "Input text to embed, encoded as a string or array of tokens. To embed multiple inputs in a single request, pass an array of strings or array of token arrays. The input must not exceed the max input tokens for the model (8192 tokens for `text-embedding-ada-002`), cannot be an empty string, and any array must be 2048 dimensions or less. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens. Some models may also impose a limit on total number of tokens summed across inputs.\n"
          example: The quick brown fox jumped over the lazy dog
          oneOf:
            - default: *o5103
              description: The string that will be turned into an embedding.
              example: This is a test.
              title: string
              type: string
            - description: The array of strings that will be turned into an embedding.
              items:
                default: *o5103
                example: '[''This is a test.'']'
                type: string
              maxItems: 2048
              minItems: 1
              title: array
              type: array
            - description: The array of integers that will be turned into an embedding.
              example: '[1212, 318, 257, 1332, 13]'
              items:
                type: integer
              maxItems: 2048
              minItems: 1
              title: array
              type: array
            - description: The array of arrays containing integers that will be turned into an embedding.
              example: '[[1212, 318, 257, 1332, 13]]'
              items:
                items:
                  type: integer
                minItems: 1
                type: array
              maxItems: 2048
              minItems: 1
              title: array
              type: array
          x-oaiExpandable: true
        model:
          anyOf:
            - type: string
            - enum:
                - text-embedding-ada-002
                - text-embedding-3-small
                - text-embedding-3-large
              type: string
          description: "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n"
          example: text-embedding-3-small
          x-oaiTypeLabel: string
        user:
          description: "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
          example: user-1234
          type: string
      required:
        - model
        - input
      type: object
    CreateEmbeddingResponse:
      properties:
        data:
          description: The list of embeddings generated by the model.
          items:
            $ref: '#/components/schemas/Embedding'
          type: array
        model:
          description: The name of the model used to generate the embedding.
          type: string
        object:
          description: The object type, which is always "list".
          enum:
            - list
          type: string
          x-stainless-const: true
        usage:
          description: The usage information for the request.
          properties:
            prompt_tokens:
              description: The number of tokens used by the prompt.
              type: integer
            total_tokens:
              description: The total number of tokens used by the request.
              type: integer
          required:
            - prompt_tokens
            - total_tokens
          type: object
      required:
        - object
        - model
        - data
        - usage
      type: object
    CreateFileRequest:
      additionalProperties: false
      properties:
        file:
          description: "The File object (not file name) to be uploaded.\n"
          format: binary
          type: string
        purpose:
          description: "The intended purpose of the uploaded file. One of: - `assistants`: Used in the Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`: Flexible file type for any purpose - `evals`: Used for eval data sets\n"
          enum:
            - assistants
            - batch
            - fine-tune
            - vision
            - user_data
            - evals
          type: string
      required:
        - file
        - purpose
      type: object
    CreateFineTuningJobRequest:
      properties:
        hyperparameters:
          deprecated: true
          description: "The hyperparameters used for the fine-tuning job.\nThis value is now deprecated in favor of `method`, and should be passed in under the `method` parameter.\n"
          properties:
            batch_size:
              default: auto
              description: "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - maximum: 256
                  minimum: 1
                  type: integer
            learning_rate_multiplier:
              default: auto
              description: "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - exclusiveMinimum: true
                  minimum: 0
                  type: number
            n_epochs:
              default: auto
              description: "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - maximum: 50
                  minimum: 1
                  type: integer
          type: object
        integrations:
          description: A list of integrations to enable for your fine-tuning job.
          items:
            properties:
              type:
                description: "The type of integration to enable. Currently, only \"wandb\" (Weights and Biases) is supported.\n"
                oneOf:
                  - enum:
                      - wandb
                    type: string
                    x-stainless-const: true
              wandb:
                description: "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n"
                properties:
                  entity:
                    description: "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n"
                    nullable: true
                    type: string
                  name:
                    description: "A display name to set for the run. If not set, we will use the Job ID as the name.\n"
                    nullable: true
                    type: string
                  project:
                    description: "The name of the project that the new run will be created under.\n"
                    example: my-wandb-project
                    type: string
                  tags:
                    description: "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n"
                    items:
                      example: custom-tag
                      type: string
                    type: array
                required:
                  - project
                type: object
            required:
              - type
              - wandb
            type: object
          nullable: true
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        method:
          $ref: '#/components/schemas/FineTuneMethod'
        model:
          anyOf:
            - type: string
            - enum:
                - babbage-002
                - davinci-002
                - gpt-3.5-turbo
                - gpt-4o-mini
              type: string
          description: "The name of the model to fine-tune. You can select one of the\n[supported models](/docs/guides/fine-tuning#which-models-can-be-fine-tuned).\n"
          example: gpt-4o-mini
          x-oaiTypeLabel: string
        seed:
          description: "The seed controls the reproducibility of the job. Passing in the same seed and job parameters should produce the same results, but may differ in rare cases.\nIf a seed is not specified, one will be generated for you.\n"
          example: 42
          maximum: 2147483647
          minimum: 0
          nullable: true
          type: integer
        suffix:
          default: null
          description: "A string of up to 64 characters that will be added to your fine-tuned model name.\n\nFor example, a `suffix` of \"custom-model-name\" would produce a model name like `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.\n"
          maxLength: 64
          minLength: 1
          nullable: true
          type: string
        training_file:
          description: "The ID of an uploaded file that contains training data.\n\nSee [upload file](/docs/api-reference/files/create) for how to upload a file.\n\nYour dataset must be formatted as a JSONL file. Additionally, you must upload your file with the purpose `fine-tune`.\n\nThe contents of the file should differ depending on if the model uses the [chat](/docs/api-reference/fine-tuning/chat-input), [completions](/docs/api-reference/fine-tuning/completions-input) format, or if the fine-tuning method uses the [preference](/docs/api-reference/fine-tuning/preference-input) format.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n"
          example: file-abc123
          type: string
        validation_file:
          description: "The ID of an uploaded file that contains validation data.\n\nIf you provide this file, the data is used to generate validation\nmetrics periodically during fine-tuning. These metrics can be viewed in\nthe fine-tuning results file.\nThe same data should not be present in both train and validation files.\n\nYour dataset must be formatted as a JSONL file. You must upload your file with the purpose `fine-tune`.\n\nSee the [fine-tuning guide](/docs/guides/fine-tuning) for more details.\n"
          example: file-abc123
          nullable: true
          type: string
      required:
        - model
        - training_file
      type: object
    CreateImageEditRequest:
      properties:
        image:
          description: The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.
          format: binary
          type: string
        mask:
          description: An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`.
          format: binary
          type: string
        model:
          anyOf:
            - type: string
            - enum:
                - dall-e-2
              type: string
              x-stainless-const: true
          default: dall-e-2
          description: The model to use for image generation. Only `dall-e-2` is supported at this time.
          example: dall-e-2
          nullable: true
          x-oaiTypeLabel: string
        n:
          default: 1
          description: The number of images to generate. Must be between 1 and 10.
          example: 1
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        prompt:
          description: A text description of the desired image(s). The maximum length is 1000 characters.
          example: A cute baby sea otter wearing a beret
          type: string
        response_format:
          default: url
          description: The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
          enum:
            - url
            - b64_json
          example: url
          nullable: true
          type: string
        size:
          default: 1024x1024
          description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
          enum:
            - 256x256
            - 512x512
            - 1024x1024
          example: 1024x1024
          nullable: true
          type: string
        user:
          description: "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
          example: user-1234
          type: string
      required:
        - prompt
        - image
      type: object
    CreateImageRequest:
      properties:
        model:
          anyOf:
            - type: string
            - enum:
                - dall-e-2
                - dall-e-3
              type: string
          default: dall-e-2
          description: The model to use for image generation.
          example: dall-e-3
          nullable: true
          x-oaiTypeLabel: string
        n:
          default: 1
          description: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
          example: 1
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        prompt:
          description: A text description of the desired image(s). The maximum length is 1000 characters for `dall-e-2` and 4000 characters for `dall-e-3`.
          example: A cute baby sea otter
          type: string
        quality:
          default: standard
          description: The quality of the image that will be generated. `hd` creates images with finer details and greater consistency across the image. This param is only supported for `dall-e-3`.
          enum:
            - standard
            - hd
          example: standard
          type: string
        response_format:
          default: url
          description: The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
          enum:
            - url
            - b64_json
          example: url
          nullable: true
          type: string
        size:
          default: 1024x1024
          description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024` for `dall-e-2`. Must be one of `1024x1024`, `1792x1024`, or `1024x1792` for `dall-e-3` models.
          enum:
            - 256x256
            - 512x512
            - 1024x1024
            - 1792x1024
            - 1024x1792
          example: 1024x1024
          nullable: true
          type: string
        style:
          default: vivid
          description: The style of the generated images. Must be one of `vivid` or `natural`. Vivid causes the model to lean towards generating hyper-real and dramatic images. Natural causes the model to produce more natural, less hyper-real looking images. This param is only supported for `dall-e-3`.
          enum:
            - vivid
            - natural
          example: vivid
          nullable: true
          type: string
        user:
          description: "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
          example: user-1234
          type: string
      required:
        - prompt
      type: object
    CreateImageVariationRequest:
      properties:
        image:
          description: The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.
          format: binary
          type: string
        model:
          anyOf:
            - type: string
            - enum:
                - dall-e-2
              type: string
              x-stainless-const: true
          default: dall-e-2
          description: The model to use for image generation. Only `dall-e-2` is supported at this time.
          example: dall-e-2
          nullable: true
          x-oaiTypeLabel: string
        n:
          default: 1
          description: The number of images to generate. Must be between 1 and 10. For `dall-e-3`, only `n=1` is supported.
          example: 1
          maximum: 10
          minimum: 1
          nullable: true
          type: integer
        response_format:
          default: url
          description: The format in which the generated images are returned. Must be one of `url` or `b64_json`. URLs are only valid for 60 minutes after the image has been generated.
          enum:
            - url
            - b64_json
          example: url
          nullable: true
          type: string
        size:
          default: 1024x1024
          description: The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`.
          enum:
            - 256x256
            - 512x512
            - 1024x1024
          example: 1024x1024
          nullable: true
          type: string
        user:
          description: "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
          example: user-1234
          type: string
      required:
        - image
      type: object
    CreateMessageRequest:
      additionalProperties: false
      properties:
        attachments:
          description: A list of files attached to the message, and the tools they should be added to.
          items:
            properties:
              file_id:
                description: The ID of the file to attach to the message.
                type: string
              tools:
                description: The tools to add this file to.
                items:
                  oneOf:
                    - $ref: '#/components/schemas/AssistantToolsCode'
                    - $ref: '#/components/schemas/AssistantToolsFileSearchTypeOnly'
                  x-oaiExpandable: true
                type: array
            type: object
          nullable: true
          required:
            - file_id
            - tools
          type: array
        content:
          oneOf:
            - description: The text contents of the message.
              title: Text content
              type: string
            - description: An array of content parts with a defined type, each can be of type `text` or images can be passed with `image_url` or `image_file`. Image types are only supported on [Vision-compatible models](/docs/models).
              items:
                oneOf:
                  - $ref: '#/components/schemas/MessageContentImageFileObject'
                  - $ref: '#/components/schemas/MessageContentImageUrlObject'
                  - $ref: '#/components/schemas/MessageRequestContentTextObject'
                x-oaiExpandable: true
              minItems: 1
              title: Array of content parts
              type: array
          x-oaiExpandable: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        role:
          description: "The role of the entity that is creating the message. Allowed values include:\n- `user`: Indicates the message is sent by an actual user and should be used in most cases to represent user-generated messages.\n- `assistant`: Indicates the message is generated by the assistant. Use this value to insert messages from the assistant into the conversation.\n"
          enum:
            - user
            - assistant
          type: string
      required:
        - role
        - content
      type: object
    CreateModelResponseProperties:
      allOf:
        - $ref: '#/components/schemas/ModelResponseProperties'
    CreateModerationRequest:
      properties:
        input:
          description: "Input (or inputs) to classify. Can be a single string, an array of strings, or\nan array of multi-modal input objects similar to other models.\n"
          oneOf:
            - default: *o5103
              description: A string of text to classify for moderation.
              example: I want to kill them.
              type: string
            - description: An array of strings to classify for moderation.
              items:
                default: *o5103
                example: I want to kill them.
                type: string
              type: array
            - description: An array of multi-modal inputs to the moderation model.
              items:
                oneOf:
                  - description: An object describing an image to classify.
                    properties:
                      image_url:
                        description: Contains either an image URL or a data URL for a base64 encoded image.
                        properties:
                          url:
                            description: Either a URL of the image or the base64 encoded image data.
                            example: https://example.com/image.jpg
                            format: uri
                            type: string
                        required:
                          - url
                        type: object
                      type:
                        description: Always `image_url`.
                        enum:
                          - image_url
                        type: string
                        x-stainless-const: true
                    required:
                      - type
                      - image_url
                    type: object
                  - description: An object describing text to classify.
                    properties:
                      text:
                        description: A string of text to classify.
                        example: I want to kill them
                        type: string
                      type:
                        description: Always `text`.
                        enum:
                          - text
                        type: string
                        x-stainless-const: true
                    required:
                      - type
                      - text
                    type: object
                x-oaiExpandable: true
              type: array
          x-oaiExpandable: true
        model:
          anyOf:
            - type: string
            - enum:
                - omni-moderation-latest
                - omni-moderation-2024-09-26
                - text-moderation-latest
                - text-moderation-stable
              type: string
          default: omni-moderation-latest
          description: "The content moderation model you would like to use. Learn more in\n[the moderation guide](/docs/guides/moderation), and learn about\navailable models [here](/docs/models#moderation).\n"
          example: omni-moderation-2024-09-26
          nullable: false
          x-oaiTypeLabel: string
      required:
        - input
      type: object
    CreateModerationResponse:
      description: Represents if a given text input is potentially harmful.
      properties:
        id:
          description: The unique identifier for the moderation request.
          type: string
        model:
          description: The model used to generate the moderation results.
          type: string
        results:
          description: A list of moderation objects.
          items:
            properties:
              categories:
                description: A list of the categories, and whether they are flagged or not.
                properties:
                  harassment:
                    description: Content that expresses, incites, or promotes harassing language towards any target.
                    type: boolean
                  harassment/threatening:
                    description: Harassment content that also includes violence or serious harm towards any target.
                    type: boolean
                  hate:
                    description: Content that expresses, incites, or promotes hate based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste. Hateful content aimed at non-protected groups (e.g., chess players) is harassment.
                    type: boolean
                  hate/threatening:
                    description: Hateful content that also includes violence or serious harm towards the targeted group based on race, gender, ethnicity, religion, nationality, sexual orientation, disability status, or caste.
                    type: boolean
                  illicit:
                    description: Content that includes instructions or advice that facilitate the planning or execution of wrongdoing, or that gives advice or instruction on how to commit illicit acts. For example, "how to shoplift" would fit this category.
                    nullable: true
                    type: boolean
                  illicit/violent:
                    description: Content that includes instructions or advice that facilitate the planning or execution of wrongdoing that also includes violence, or that gives advice or instruction on the procurement of any weapon.
                    nullable: true
                    type: boolean
                  self-harm:
                    description: Content that promotes, encourages, or depicts acts of self-harm, such as suicide, cutting, and eating disorders.
                    type: boolean
                  self-harm/instructions:
                    description: Content that encourages performing acts of self-harm, such as suicide, cutting, and eating disorders, or that gives instructions or advice on how to commit such acts.
                    type: boolean
                  self-harm/intent:
                    description: Content where the speaker expresses that they are engaging or intend to engage in acts of self-harm, such as suicide, cutting, and eating disorders.
                    type: boolean
                  sexual:
                    description: Content meant to arouse sexual excitement, such as the description of sexual activity, or that promotes sexual services (excluding sex education and wellness).
                    type: boolean
                  sexual/minors:
                    description: Sexual content that includes an individual who is under 18 years old.
                    type: boolean
                  violence:
                    description: Content that depicts death, violence, or physical injury.
                    type: boolean
                  violence/graphic:
                    description: Content that depicts death, violence, or physical injury in graphic detail.
                    type: boolean
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - illicit
                  - illicit/violent
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
                type: object
              category_applied_input_types:
                description: A list of the categories along with the input type(s) that the score applies to.
                properties:
                  harassment:
                    description: The applied input type(s) for the category 'harassment'.
                    items:
                      enum:
                        - text
                      type: string
                      x-stainless-const: true
                    type: array
                  harassment/threatening:
                    description: The applied input type(s) for the category 'harassment/threatening'.
                    items:
                      enum:
                        - text
                      type: string
                      x-stainless-const: true
                    type: array
                  hate:
                    description: The applied input type(s) for the category 'hate'.
                    items:
                      enum:
                        - text
                      type: string
                      x-stainless-const: true
                    type: array
                  hate/threatening:
                    description: The applied input type(s) for the category 'hate/threatening'.
                    items:
                      enum:
                        - text
                      type: string
                      x-stainless-const: true
                    type: array
                  illicit:
                    description: The applied input type(s) for the category 'illicit'.
                    items:
                      enum:
                        - text
                      type: string
                      x-stainless-const: true
                    type: array
                  illicit/violent:
                    description: The applied input type(s) for the category 'illicit/violent'.
                    items:
                      enum:
                        - text
                      type: string
                      x-stainless-const: true
                    type: array
                  self-harm:
                    description: The applied input type(s) for the category 'self-harm'.
                    items:
                      enum:
                        - text
                        - image
                      type: string
                    type: array
                  self-harm/instructions:
                    description: The applied input type(s) for the category 'self-harm/instructions'.
                    items:
                      enum:
                        - text
                        - image
                      type: string
                    type: array
                  self-harm/intent:
                    description: The applied input type(s) for the category 'self-harm/intent'.
                    items:
                      enum:
                        - text
                        - image
                      type: string
                    type: array
                  sexual:
                    description: The applied input type(s) for the category 'sexual'.
                    items:
                      enum:
                        - text
                        - image
                      type: string
                    type: array
                  sexual/minors:
                    description: The applied input type(s) for the category 'sexual/minors'.
                    items:
                      enum:
                        - text
                      type: string
                      x-stainless-const: true
                    type: array
                  violence:
                    description: The applied input type(s) for the category 'violence'.
                    items:
                      enum:
                        - text
                        - image
                      type: string
                    type: array
                  violence/graphic:
                    description: The applied input type(s) for the category 'violence/graphic'.
                    items:
                      enum:
                        - text
                        - image
                      type: string
                    type: array
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - illicit
                  - illicit/violent
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
                type: object
              category_scores:
                description: A list of the categories along with their scores as predicted by model.
                properties:
                  harassment:
                    description: The score for the category 'harassment'.
                    type: number
                  harassment/threatening:
                    description: The score for the category 'harassment/threatening'.
                    type: number
                  hate:
                    description: The score for the category 'hate'.
                    type: number
                  hate/threatening:
                    description: The score for the category 'hate/threatening'.
                    type: number
                  illicit:
                    description: The score for the category 'illicit'.
                    type: number
                  illicit/violent:
                    description: The score for the category 'illicit/violent'.
                    type: number
                  self-harm:
                    description: The score for the category 'self-harm'.
                    type: number
                  self-harm/instructions:
                    description: The score for the category 'self-harm/instructions'.
                    type: number
                  self-harm/intent:
                    description: The score for the category 'self-harm/intent'.
                    type: number
                  sexual:
                    description: The score for the category 'sexual'.
                    type: number
                  sexual/minors:
                    description: The score for the category 'sexual/minors'.
                    type: number
                  violence:
                    description: The score for the category 'violence'.
                    type: number
                  violence/graphic:
                    description: The score for the category 'violence/graphic'.
                    type: number
                required:
                  - hate
                  - hate/threatening
                  - harassment
                  - harassment/threatening
                  - illicit
                  - illicit/violent
                  - self-harm
                  - self-harm/intent
                  - self-harm/instructions
                  - sexual
                  - sexual/minors
                  - violence
                  - violence/graphic
                type: object
              flagged:
                description: Whether any of the below categories are flagged.
                type: boolean
            required:
              - flagged
              - categories
              - category_scores
              - category_applied_input_types
            type: object
          type: array
      required:
        - id
        - model
        - results
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"modr-0d9740456c391e43c445bf0f010940c7\",\n  \"model\": \"omni-moderation-latest\",\n  \"results\": [\n    {\n      \"flagged\": true,\n      \"categories\": {\n        \"harassment\": true,\n        \"harassment/threatening\": true,\n        \"sexual\": false,\n        \"hate\": false,\n        \"hate/threatening\": false,\n        \"illicit\": false,\n        \"illicit/violent\": false,\n        \"self-harm/intent\": false,\n        \"self-harm/instructions\": false,\n        \"self-harm\": false,\n        \"sexual/minors\": false,\n        \"violence\": true,\n        \"violence/graphic\": true\n      },\n      \"category_scores\": {\n        \"harassment\": 0.8189693396524255,\n        \"harassment/threatening\": 0.804985420696006,\n        \"sexual\": 1.573112165348997e-6,\n        \"hate\": 0.007562942636942845,\n        \"hate/threatening\": 0.004208854591835476,\n        \"illicit\": 0.030535955153511665,\n        \"illicit/violent\": 0.008925306722380033,\n        \"self-harm/intent\": 0.00023023930975076432,\n        \"self-harm/instructions\": 0.0002293869201073356,\n        \"self-harm\": 0.012598046106750154,\n        \"sexual/minors\": 2.212566909570261e-8,\n        \"violence\": 0.9999992735124786,\n        \"violence/graphic\": 0.843064871157054\n      },\n      \"category_applied_input_types\": {\n        \"harassment\": [\n          \"text\"\n        ],\n        \"harassment/threatening\": [\n          \"text\"\n        ],\n        \"sexual\": [\n          \"text\",\n          \"image\"\n        ],\n        \"hate\": [\n          \"text\"\n        ],\n        \"hate/threatening\": [\n          \"text\"\n        ],\n        \"illicit\": [\n          \"text\"\n        ],\n        \"illicit/violent\": [\n          \"text\"\n        ],\n        \"self-harm/intent\": [\n          \"text\",\n          \"image\"\n        ],\n        \"self-harm/instructions\": [\n          \"text\",\n          \"image\"\n        ],\n        \"self-harm\": [\n          \"text\",\n          \"image\"\n        ],\n        \"sexual/minors\": [\n          \"text\"\n        ],\n        \"violence\": [\n          \"text\",\n          \"image\"\n        ],\n        \"violence/graphic\": [\n          \"text\",\n          \"image\"\n        ]\n      }\n    }\n  ]\n}\n"
        name: The moderation object
    CreateResponse:
      allOf:
        - $ref: '#/components/schemas/CreateModelResponseProperties'
        - $ref: '#/components/schemas/ResponseProperties'
        - properties:
            include:
              items:
                $ref: '#/components/schemas/Includable'
                x-oaiExpandable: true
              nullable: true
              type: array
            input:
              description: "Text, image, or file inputs to the model, used to generate a response.\n\nLearn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Image inputs](/docs/guides/images)\n- [File inputs](/docs/guides/pdf-files)\n- [Conversation state](/docs/guides/conversation-state)\n- [Function calling](/docs/guides/function-calling)\n"
              oneOf:
                - description: "A text input to the model, equivalent to a text input with the \n`user` role.\n"
                  title: Text input
                  type: string
                - description: "A list of one or many input items to the model, containing \ndifferent content types.\n"
                  items:
                    $ref: '#/components/schemas/InputItem'
                    x-oaiExpandable: true
                  title: Input item list
                  type: array
              x-oaiExpandable: true
            parallel_tool_calls:
              default: true
              description: "Whether to allow the model to run tool calls in parallel.\n"
              nullable: true
              type: boolean
            store:
              default: true
              description: "Whether to store the generated model response for later retrieval via\nAPI.\n"
              nullable: true
              type: boolean
            stream:
              default: false
              description: "If set to true, the model response data will be streamed to the client\nas it is generated using [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\nSee the [Streaming section below](/docs/api-reference/responses-streaming)\nfor more information.\n"
              nullable: true
              type: boolean
          required:
            - model
            - input
          type: object
    CreateRunRequest:
      additionalProperties: false
      properties:
        additional_instructions:
          description: Appends additional instructions at the end of the instructions for the run. This is useful for modifying the behavior on a per-run basis without overriding other instructions.
          nullable: true
          type: string
        additional_messages:
          description: Adds additional messages to the thread before creating the run.
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
          nullable: true
          type: array
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
          type: string
        instructions:
          description: Overrides the [instructions](/docs/api-reference/assistants/createAssistant) of the assistant. This is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: string
        max_completion_tokens:
          description: "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n"
          minimum: 256
          nullable: true
          type: integer
        max_prompt_tokens:
          description: "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n"
          minimum: 256
          nullable: true
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          anyOf:
            - type: string
            - $ref: '#/components/schemas/AssistantSupportedModels'
          description: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
          example: gpt-4o
          nullable: true
          x-oaiTypeLabel: string
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        stream:
          description: "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
          nullable: true
          type: boolean
        temperature:
          default: 1
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        tool_choice:
          $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
        tools:
          description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
          items:
            oneOf:
              - $ref: '#/components/schemas/AssistantToolsCode'
              - $ref: '#/components/schemas/AssistantToolsFileSearch'
              - $ref: '#/components/schemas/AssistantToolsFunction'
            x-oaiExpandable: true
          maxItems: 20
          nullable: true
          type: array
        top_p:
          default: 1
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        truncation_strategy:
          $ref: '#/components/schemas/TruncationObject'
      required:
        - assistant_id
      type: object
    CreateSpeechRequest:
      additionalProperties: false
      properties:
        input:
          description: The text to generate audio for. The maximum length is 4096 characters.
          maxLength: 4096
          type: string
        model:
          anyOf:
            - type: string
            - enum:
                - tts-1
                - tts-1-hd
              type: string
          description: "One of the available [TTS models](/docs/models#tts): `tts-1` or `tts-1-hd`\n"
          x-oaiTypeLabel: string
        response_format:
          default: mp3
          description: The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`, `wav`, and `pcm`.
          enum:
            - mp3
            - opus
            - aac
            - flac
            - wav
            - pcm
          type: string
        speed:
          default: 1
          description: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is the default.
          maximum: 4
          minimum: 0.25
          type: number
        voice:
          description: The voice to use when generating the audio. Supported voices are `alloy`, `ash`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage` and `shimmer`. Previews of the voices are available in the [Text to speech guide](/docs/guides/text-to-speech#voice-options).
          enum:
            - alloy
            - ash
            - coral
            - echo
            - fable
            - onyx
            - nova
            - sage
            - shimmer
          type: string
      required:
        - model
        - input
        - voice
      type: object
    CreateThreadAndRunRequest:
      additionalProperties: false
      properties:
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) to use to execute this run.
          type: string
        instructions:
          description: Override the default system message of the assistant. This is useful for modifying the behavior on a per-run basis.
          nullable: true
          type: string
        max_completion_tokens:
          description: "The maximum number of completion tokens that may be used over the course of the run. The run will make a best effort to use only the number of completion tokens specified, across multiple turns of the run. If the run exceeds the number of completion tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n"
          minimum: 256
          nullable: true
          type: integer
        max_prompt_tokens:
          description: "The maximum number of prompt tokens that may be used over the course of the run. The run will make a best effort to use only the number of prompt tokens specified, across multiple turns of the run. If the run exceeds the number of prompt tokens specified, the run will end with status `incomplete`. See `incomplete_details` for more info.\n"
          minimum: 256
          nullable: true
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          anyOf:
            - type: string
            - enum:
                - gpt-4o
                - gpt-4o-2024-11-20
                - gpt-4o-2024-08-06
                - gpt-4o-2024-05-13
                - gpt-4o-mini
                - gpt-4o-mini-2024-07-18
                - gpt-4.5-preview
                - gpt-4.5-preview-2025-02-27
                - gpt-4-turbo
                - gpt-4-turbo-2024-04-09
                - gpt-4-0125-preview
                - gpt-4-turbo-preview
                - gpt-4-1106-preview
                - gpt-4-vision-preview
                - gpt-4
                - gpt-4-0314
                - gpt-4-0613
                - gpt-4-32k
                - gpt-4-32k-0314
                - gpt-4-32k-0613
                - gpt-3.5-turbo
                - gpt-3.5-turbo-16k
                - gpt-3.5-turbo-0613
                - gpt-3.5-turbo-1106
                - gpt-3.5-turbo-0125
                - gpt-3.5-turbo-16k-0613
              type: string
          description: The ID of the [Model](/docs/api-reference/models) to be used to execute this run. If a value is provided here, it will override the model associated with the assistant. If not, the model associated with the assistant will be used.
          example: gpt-4o
          nullable: true
          x-oaiTypeLabel: string
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        stream:
          description: "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
          nullable: true
          type: boolean
        temperature:
          default: 1
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        thread:
          $ref: '#/components/schemas/CreateThreadRequest'
        tool_choice:
          $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
        tool_resources:
          description: "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: "The ID of the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
        tools:
          description: Override the tools the assistant can use for this run. This is useful for modifying the behavior on a per-run basis.
          items:
            oneOf:
              - $ref: '#/components/schemas/AssistantToolsCode'
              - $ref: '#/components/schemas/AssistantToolsFileSearch'
              - $ref: '#/components/schemas/AssistantToolsFunction'
          maxItems: 20
          nullable: true
          type: array
        top_p:
          default: 1
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        truncation_strategy:
          $ref: '#/components/schemas/TruncationObject'
      required:
        - assistant_id
      type: object
    CreateThreadRequest:
      additionalProperties: false
      description: "Options to create a new thread. If no thread is provided when running a \nrequest, an empty thread will be created.\n"
      properties:
        messages:
          description: A list of [messages](/docs/api-reference/messages) to start the thread with.
          items:
            $ref: '#/components/schemas/CreateMessageRequest'
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        tool_resources:
          description: "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              oneOf:
                - required:
                    - vector_store_ids
                - required:
                    - vector_stores
              properties:
                vector_store_ids:
                  description: "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
                  items:
                    type: string
                  maxItems: 1
                  type: array
                vector_stores:
                  description: "A helper to create a [vector store](/docs/api-reference/vector-stores/object) with file_ids and attach it to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
                  items:
                    properties:
                      chunking_strategy:
                        description: The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy.
                        oneOf:
                          - additionalProperties: false
                            description: The default strategy. This strategy currently uses a `max_chunk_size_tokens` of `800` and `chunk_overlap_tokens` of `400`.
                            properties:
                              type:
                                description: Always `auto`.
                                enum:
                                  - auto
                                type: string
                                x-stainless-const: true
                            required:
                              - type
                            title: Auto Chunking Strategy
                            type: object
                          - additionalProperties: false
                            properties:
                              static:
                                additionalProperties: false
                                properties:
                                  chunk_overlap_tokens:
                                    description: "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
                                    type: integer
                                  max_chunk_size_tokens:
                                    description: The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
                                    maximum: 4096
                                    minimum: 100
                                    type: integer
                                required:
                                  - max_chunk_size_tokens
                                  - chunk_overlap_tokens
                                type: object
                              type:
                                description: Always `static`.
                                enum:
                                  - static
                                type: string
                                x-stainless-const: true
                            required:
                              - type
                              - static
                            title: Static Chunking Strategy
                            type: object
                        type: object
                        x-oaiExpandable: true
                      file_ids:
                        description: "A list of [file](/docs/api-reference/files) IDs to add to the vector store. There can be a maximum of 10000 files in a vector store.\n"
                        items:
                          type: string
                        maxItems: 10000
                        type: array
                      metadata:
                        $ref: '#/components/schemas/Metadata'
                    type: object
                    x-oaiExpandable: true
                  maxItems: 1
                  type: array
              type: object
          type: object
      type: object
    CreateTranscriptionRequest:
      additionalProperties: false
      properties:
        file:
          description: "The audio file object (not file name) to transcribe, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n"
          format: binary
          type: string
          x-oaiTypeLabel: file
        language:
          description: "The language of the input audio. Supplying the input language in [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format will improve accuracy and latency.\n"
          type: string
        model:
          anyOf:
            - type: string
            - enum:
                - whisper-1
              type: string
              x-stainless-const: true
          description: "ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.\n"
          example: whisper-1
          x-oaiTypeLabel: string
        prompt:
          description: "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should match the audio language.\n"
          type: string
        response_format:
          $ref: '#/components/schemas/AudioResponseFormat'
        temperature:
          default: 0
          description: "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n"
          type: number
        timestamp_granularities[]:
          default:
            - segment
          description: "The timestamp granularities to populate for this transcription. `response_format` must be set `verbose_json` to use timestamp granularities. Either or both of these options are supported: `word`, or `segment`. Note: There is no additional latency for segment timestamps, but generating word timestamps incurs additional latency.\n"
          items:
            enum:
              - word
              - segment
            type: string
          type: array
      required:
        - file
        - model
      type: object
    CreateTranscriptionResponseJson:
      description: Represents a transcription response returned by model, based on the provided input.
      properties:
        text:
          description: The transcribed text.
          type: string
      required:
        - text
      type: object
      x-oaiMeta:
        example: "{\n  \"text\": \"Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that.\"\n}\n"
        group: audio
        name: The transcription object (JSON)
    CreateTranscriptionResponseVerboseJson:
      description: Represents a verbose json transcription response returned by model, based on the provided input.
      properties:
        duration:
          description: The duration of the input audio.
          type: number
        language:
          description: The language of the input audio.
          type: string
        segments:
          description: Segments of the transcribed text and their corresponding details.
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
          type: array
        text:
          description: The transcribed text.
          type: string
        words:
          description: Extracted words and their corresponding timestamps.
          items:
            $ref: '#/components/schemas/TranscriptionWord'
          type: array
      required:
        - language
        - duration
        - text
      type: object
      x-oaiMeta:
        example: "{\n  \"task\": \"transcribe\",\n  \"language\": \"english\",\n  \"duration\": 8.470000267028809,\n  \"text\": \"The beach was a popular spot on a hot summer day. People were swimming in the ocean, building sandcastles, and playing beach volleyball.\",\n  \"segments\": [\n    {\n      \"id\": 0,\n      \"seek\": 0,\n      \"start\": 0.0,\n      \"end\": 3.319999933242798,\n      \"text\": \" The beach was a popular spot on a hot summer day.\",\n      \"tokens\": [\n        50364, 440, 7534, 390, 257, 3743, 4008, 322, 257, 2368, 4266, 786, 13, 50530\n      ],\n      \"temperature\": 0.0,\n      \"avg_logprob\": -0.2860786020755768,\n      \"compression_ratio\": 1.2363636493682861,\n      \"no_speech_prob\": 0.00985979475080967\n    },\n    ...\n  ]\n}\n"
        group: audio
        name: The transcription object (Verbose JSON)
    CreateTranslationRequest:
      additionalProperties: false
      properties:
        file:
          description: "The audio file object (not file name) translate, in one of these formats: flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n"
          format: binary
          type: string
          x-oaiTypeLabel: file
        model:
          anyOf:
            - type: string
            - enum:
                - whisper-1
              type: string
              x-stainless-const: true
          description: "ID of the model to use. Only `whisper-1` (which is powered by our open source Whisper V2 model) is currently available.\n"
          example: whisper-1
          x-oaiTypeLabel: string
        prompt:
          description: "An optional text to guide the model's style or continue a previous audio segment. The [prompt](/docs/guides/speech-to-text#prompting) should be in English.\n"
          type: string
        response_format:
          $ref: '#/components/schemas/AudioResponseFormat'
        temperature:
          default: 0
          description: "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic. If set to 0, the model will use [log probability](https://en.wikipedia.org/wiki/Log_probability) to automatically increase the temperature until certain thresholds are hit.\n"
          type: number
      required:
        - file
        - model
      type: object
    CreateTranslationResponseJson:
      properties:
        text:
          type: string
      required:
        - text
      type: object
    CreateTranslationResponseVerboseJson:
      properties:
        duration:
          description: The duration of the input audio.
          type: number
        language:
          description: The language of the output translation (always `english`).
          type: string
        segments:
          description: Segments of the translated text and their corresponding details.
          items:
            $ref: '#/components/schemas/TranscriptionSegment'
          type: array
        text:
          description: The translated text.
          type: string
      required:
        - language
        - duration
        - text
      type: object
    CreateUploadRequest:
      additionalProperties: false
      properties:
        bytes:
          description: "The number of bytes in the file you are uploading.\n"
          type: integer
        filename:
          description: "The name of the file to upload.\n"
          type: string
        mime_type:
          description: "The MIME type of the file.\n\nThis must fall within the supported MIME types for your file purpose. See the supported MIME types for assistants and vision.\n"
          type: string
        purpose:
          description: "The intended purpose of the uploaded file.\n\nSee the [documentation on File purposes](/docs/api-reference/files/create#files-create-purpose).\n"
          enum:
            - assistants
            - batch
            - fine-tune
            - vision
          type: string
      required:
        - filename
        - purpose
        - bytes
        - mime_type
      type: object
    CreateVectorStoreFileBatchRequest:
      additionalProperties: false
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategyRequestParam'
        file_ids:
          description: A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
          items:
            type: string
          maxItems: 500
          minItems: 1
          type: array
      required:
        - file_ids
      type: object
    CreateVectorStoreFileRequest:
      additionalProperties: false
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
        chunking_strategy:
          $ref: '#/components/schemas/ChunkingStrategyRequestParam'
        file_id:
          description: A [File](/docs/api-reference/files) ID that the vector store should use. Useful for tools like `file_search` that can access files.
          type: string
      required:
        - file_id
      type: object
    CreateVectorStoreRequest:
      additionalProperties: false
      properties:
        chunking_strategy:
          description: The chunking strategy used to chunk the file(s). If not set, will use the `auto` strategy. Only applicable if `file_ids` is non-empty.
          oneOf:
            - $ref: '#/components/schemas/AutoChunkingStrategyRequestParam'
            - $ref: '#/components/schemas/StaticChunkingStrategyRequestParam'
          type: object
          x-oaiExpandable: true
        expires_after:
          $ref: '#/components/schemas/VectorStoreExpirationAfter'
        file_ids:
          description: A list of [File](/docs/api-reference/files) IDs that the vector store should use. Useful for tools like `file_search` that can access files.
          items:
            type: string
          maxItems: 500
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The name of the vector store.
          type: string
      type: object
    DefaultProjectErrorResponse:
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message
      type: object
    DeleteAssistantResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - assistant.deleted
          type: string
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
      type: object
    DeleteFileResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - file
          type: string
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
      type: object
    DeleteMessageResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - thread.message.deleted
          type: string
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
      type: object
    DeleteModelResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          type: string
      required:
        - id
        - object
        - deleted
      type: object
    DeleteThreadResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - thread.deleted
          type: string
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
      type: object
    DeleteVectorStoreFileResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - vector_store.file.deleted
          type: string
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
      type: object
    DeleteVectorStoreResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - vector_store.deleted
          type: string
          x-stainless-const: true
      required:
        - id
        - object
        - deleted
      type: object
    DoneEvent:
      description: Occurs when a stream ends.
      properties:
        data:
          enum:
            - '[DONE]'
          type: string
          x-stainless-const: true
        event:
          enum:
            - done
          type: string
          x-stainless-const: true
      required:
        - event
        - data
      type: object
      x-oaiMeta:
        dataDescription: '`data` is `[DONE]`'
    DoubleClick:
      description: "A double click action.\n"
      properties:
        type:
          default: double_click
          description: "Specifies the event type. For a double click action, this property is \nalways set to `double_click`.\n"
          enum:
            - double_click
          type: string
          x-stainless-const: true
        x:
          description: "The x-coordinate where the double click occurred.\n"
          type: integer
        y:
          description: "The y-coordinate where the double click occurred.\n"
          type: integer
      required:
        - type
        - x
        - y
      title: DoubleClick
      type: object
    Drag:
      description: "A drag action.\n"
      properties:
        path:
          description: "An array of coordinates representing the path of the drag action. Coordinates will appear as an array\nof objects, eg\n```\n[\n  { x: 100, y: 200 },\n  { x: 200, y: 300 }\n]\n```\n"
          items:
            $ref: '#/components/schemas/Coordinate'
            description: "A series of x/y coordinate pairs in the drag path.\n"
            title: Drag path coordinates
            x-oaiExpandable: true
          type: array
          x-oaiExpandable: true
        type:
          default: drag
          description: "Specifies the event type. For a drag action, this property is \nalways set to `drag`.\n"
          enum:
            - drag
          type: string
          x-stainless-const: true
      required:
        - type
        - path
      title: Drag
      type: object
    EasyInputMessage:
      description: "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role. Messages with the\n`assistant` role are presumed to have been generated by the model in previous\ninteractions.\n"
      properties:
        content:
          description: "Text, image, or audio input to the model, used to generate a response.\nCan also contain previous assistant responses.\n"
          oneOf:
            - description: "A text input to the model.\n"
              title: Text input
              type: string
            - $ref: '#/components/schemas/InputMessageContentList'
          x-oaiExpandable: true
        role:
          description: "The role of the message input. One of `user`, `assistant`, `system`, or\n`developer`.\n"
          enum:
            - user
            - assistant
            - system
            - developer
          type: string
        type:
          description: "The type of the message input. Always `message`.\n"
          enum:
            - message
          type: string
          x-stainless-const: true
      required:
        - role
        - content
      title: Input message
      type: object
    Embedding:
      description: "Represents an embedding vector returned by embedding endpoint.\n"
      properties:
        embedding:
          description: "The embedding vector, which is a list of floats. The length of vector depends on the model as listed in the [embedding guide](/docs/guides/embeddings).\n"
          items:
            type: number
          type: array
        index:
          description: The index of the embedding in the list of embeddings.
          type: integer
        object:
          description: The object type, which is always "embedding".
          enum:
            - embedding
          type: string
          x-stainless-const: true
      required:
        - index
        - object
        - embedding
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"embedding\",\n  \"embedding\": [\n    0.0023064255,\n    -0.009327292,\n    .... (1536 floats total for ada-002)\n    -0.0028842222,\n  ],\n  \"index\": 0\n}\n"
        name: The embedding object
    Error:
      properties:
        code:
          nullable: true
          type: string
        message:
          nullable: false
          type: string
        param:
          nullable: true
          type: string
        type:
          nullable: false
          type: string
      required:
        - type
        - message
        - param
        - code
      type: object
    ErrorEvent:
      description: Occurs when an [error](/docs/guides/error-codes#api-errors) occurs. This can happen due to an internal server error or a timeout.
      properties:
        data:
          $ref: '#/components/schemas/Error'
        event:
          enum:
            - error
          type: string
          x-stainless-const: true
      required:
        - event
        - data
      type: object
      x-oaiMeta:
        dataDescription: '`data` is an [error](/docs/guides/error-codes#api-errors)'
    ErrorResponse:
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
        - error
      type: object
    FileCitation:
      description: "A citation to a file.\n"
      properties:
        file_id:
          description: "The ID of the file.\n"
          type: string
        index:
          description: "The index of the file in the list of files.\n"
          type: integer
        type:
          description: "The type of the file citation. Always `file_citation`.\n"
          enum:
            - file_citation
          type: string
          x-stainless-const: true
      required:
        - type
        - index
        - file_id
      title: File citation
      type: object
    FilePath:
      description: "A path to a file.\n"
      properties:
        file_id:
          description: "The ID of the file.\n"
          type: string
        index:
          description: "The index of the file in the list of files.\n"
          type: integer
        type:
          description: "The type of the file path. Always `file_path`.\n"
          enum:
            - file_path
          type: string
          x-stainless-const: true
      required:
        - type
        - file_id
        - index
      title: File path
      type: object
    FileSearchRanker:
      description: The ranker to use for the file search. If not specified will use the `auto` ranker.
      enum:
        - auto
        - default_2024_08_21
      type: string
    FileSearchRankingOptions:
      description: "The ranking options for the file search. If not specified, the file search tool will use the `auto` ranker and a score_threshold of 0.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
      properties:
        ranker:
          $ref: '#/components/schemas/FileSearchRanker'
        score_threshold:
          description: The score threshold for the file search. All values must be a floating point number between 0 and 1.
          maximum: 1
          minimum: 0
          type: number
      required:
        - score_threshold
      title: File search tool call ranking options
      type: object
    FileSearchTool:
      description: "A tool that searches for relevant content from uploaded files.\nLearn more about the [file search tool](/docs/guides/tools-file-search).\n"
      properties:
        filters:
          description: A filter to apply based on file attributes.
          oneOf:
            - $ref: '#/components/schemas/ComparisonFilter'
            - $ref: '#/components/schemas/CompoundFilter'
          x-oaiExpandable: true
        max_num_results:
          description: "The maximum number of results to return. This number should be between 1 \nand 50 inclusive.\n"
          type: integer
        ranking_options:
          additionalProperties: false
          description: Ranking options for search.
          properties:
            ranker:
              default: auto
              description: The ranker to use for the file search.
              enum:
                - auto
                - default-2024-11-15
              type: string
            score_threshold:
              default: 0
              description: "The score threshold for the file search, a number between 0 and 1.\nNumbers closer to 1 will attempt to return only the most relevant\nresults, but may return fewer results.\n"
              maximum: 1
              minimum: 0
              type: number
          type: object
        type:
          description: "The type of the file search tool. Always `file_search`.\n"
          enum:
            - file_search
          type: string
          x-stainless-const: true
        vector_store_ids:
          description: "The IDs of the vector stores to search.\n"
          items:
            type: string
          type: array
      required:
        - type
        - vector_store_ids
      title: File search
      type: object
    FileSearchToolCall:
      description: "The results of a file search tool call. See the \n[file search guide](/docs/guides/tools-file-search) for more information.\n"
      properties:
        id:
          description: "The unique ID of the file search tool call.\n"
          type: string
        queries:
          description: "The queries used to search for files.\n"
          items:
            type: string
          type: array
        results:
          description: "The results of the file search tool call.\n"
          items:
            properties:
              attributes:
                $ref: '#/components/schemas/VectorStoreFileAttributes'
              file_id:
                description: "The unique ID of the file.\n"
                type: string
              filename:
                description: "The name of the file.\n"
                type: string
              score:
                description: "The relevance score of the file - a value between 0 and 1.\n"
                format: float
                type: number
              text:
                description: "The text that was retrieved from the file.\n"
                type: string
            type: object
          nullable: true
          type: array
        status:
          description: "The status of the file search tool call. One of `in_progress`, \n`searching`, `incomplete` or `failed`,\n"
          enum:
            - in_progress
            - searching
            - completed
            - incomplete
            - failed
          type: string
        type:
          description: "The type of the file search tool call. Always `file_search_call`.\n"
          enum:
            - file_search_call
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - status
        - queries
      title: File search tool call
      type: object
    FineTuneChatCompletionRequestAssistantMessage:
      allOf:
        - deprecated: false
          properties:
            weight:
              description: Controls whether the assistant message is trained against (0 or 1)
              enum:
                - 0
                - 1
              type: integer
          title: Assistant message
          type: object
        - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
      required:
        - role
    FineTuneChatRequestInput:
      description: The per-line training example of a fine-tuning input file for chat models using the supervised method.
      properties:
        functions:
          deprecated: true
          description: A list of functions the model may generate JSON inputs for.
          items:
            $ref: '#/components/schemas/ChatCompletionFunctions'
          maxItems: 128
          minItems: 1
          type: array
        messages:
          items:
            oneOf:
              - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
              - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
              - $ref: '#/components/schemas/FineTuneChatCompletionRequestAssistantMessage'
              - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
              - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
            x-oaiExpandable: true
          minItems: 1
          type: array
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        tools:
          description: A list of tools the model may generate JSON inputs for.
          items:
            $ref: '#/components/schemas/ChatCompletionTool'
          type: array
      type: object
      x-oaiMeta:
        example: "{\n  \"messages\": [\n    { \"role\": \"user\", \"content\": \"What is the weather in San Francisco?\" },\n    {\n      \"role\": \"assistant\",\n      \"tool_calls\": [\n        {\n          \"id\": \"call_id\",\n          \"type\": \"function\",\n          \"function\": {\n            \"name\": \"get_current_weather\",\n            \"arguments\": \"{\\\"location\\\": \\\"San Francisco, USA\\\", \\\"format\\\": \\\"celsius\\\"}\"\n          }\n        }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\": false,\n  \"tools\": [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"get_current_weather\",\n        \"description\": \"Get the current weather\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n                \"type\": \"string\",\n                \"description\": \"The city and country, eg. San Francisco, USA\"\n            },\n            \"format\": { \"type\": \"string\", \"enum\": [\"celsius\", \"fahrenheit\"] }\n          },\n          \"required\": [\"location\", \"format\"]\n        }\n      }\n    }\n  ]\n}\n"
        name: Training format for chat models using the supervised method
    FineTuneCompletionRequestInput:
      description: The per-line training example of a fine-tuning input file for completions models
      properties:
        completion:
          description: The desired completion for this training example.
          type: string
        prompt:
          description: The input prompt for this training example.
          type: string
      type: object
      x-oaiMeta:
        example: "{\n  \"prompt\": \"What is the answer to 2+2\",\n  \"completion\": \"4\"\n}\n"
        name: Training format for completions models
    FineTuneDPOMethod:
      description: Configuration for the DPO fine-tuning method.
      properties:
        hyperparameters:
          description: The hyperparameters used for the fine-tuning job.
          properties:
            batch_size:
              default: auto
              description: "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - maximum: 256
                  minimum: 1
                  type: integer
            beta:
              default: auto
              description: "The beta value for the DPO method. A higher beta value will increase the weight of the penalty between the policy and reference model.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - exclusiveMinimum: true
                  maximum: 2
                  minimum: 0
                  type: number
            learning_rate_multiplier:
              default: auto
              description: "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - exclusiveMinimum: true
                  minimum: 0
                  type: number
            n_epochs:
              default: auto
              description: "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - maximum: 50
                  minimum: 1
                  type: integer
          type: object
      type: object
    FineTuneMethod:
      description: The method used for fine-tuning.
      properties:
        dpo:
          $ref: '#/components/schemas/FineTuneDPOMethod'
        supervised:
          $ref: '#/components/schemas/FineTuneSupervisedMethod'
        type:
          description: The type of method. Is either `supervised` or `dpo`.
          enum:
            - supervised
            - dpo
          type: string
      type: object
    FineTunePreferenceRequestInput:
      description: The per-line training example of a fine-tuning input file for chat models using the dpo method.
      properties:
        input:
          properties:
            messages:
              items:
                oneOf:
                  - $ref: '#/components/schemas/ChatCompletionRequestSystemMessage'
                  - $ref: '#/components/schemas/ChatCompletionRequestUserMessage'
                  - $ref: '#/components/schemas/FineTuneChatCompletionRequestAssistantMessage'
                  - $ref: '#/components/schemas/ChatCompletionRequestToolMessage'
                  - $ref: '#/components/schemas/ChatCompletionRequestFunctionMessage'
                x-oaiExpandable: true
              minItems: 1
              type: array
            parallel_tool_calls:
              $ref: '#/components/schemas/ParallelToolCalls'
            tools:
              description: A list of tools the model may generate JSON inputs for.
              items:
                $ref: '#/components/schemas/ChatCompletionTool'
              type: array
          type: object
        non_preferred_completion:
          description: The non-preferred completion message for the output.
          items:
            oneOf:
              - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
            x-oaiExpandable: true
          maxItems: 1
          type: array
        preferred_completion:
          description: The preferred completion message for the output.
          items:
            oneOf:
              - $ref: '#/components/schemas/ChatCompletionRequestAssistantMessage'
            x-oaiExpandable: true
          maxItems: 1
          type: array
      type: object
      x-oaiMeta:
        example: "{\n  \"input\": {\n    \"messages\": [\n      { \"role\": \"user\", \"content\": \"What is the weather in San Francisco?\" }\n    ]\n  },\n  \"preferred_completion\": [\n    {\n      \"role\": \"assistant\",\n      \"content\": \"The weather in San Francisco is 70 degrees Fahrenheit.\"\n    }\n  ],\n  \"non_preferred_completion\": [\n    {\n      \"role\": \"assistant\",\n      \"content\": \"The weather in San Francisco is 21 degrees Celsius.\"\n    }\n  ]\n}\n"
        name: Training format for chat models using the preference method
    FineTuneSupervisedMethod:
      description: Configuration for the supervised fine-tuning method.
      properties:
        hyperparameters:
          description: The hyperparameters used for the fine-tuning job.
          properties:
            batch_size:
              default: auto
              description: "Number of examples in each batch. A larger batch size means that model parameters are updated less frequently, but with lower variance.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - maximum: 256
                  minimum: 1
                  type: integer
            learning_rate_multiplier:
              default: auto
              description: "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid overfitting.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - exclusiveMinimum: true
                  minimum: 0
                  type: number
            n_epochs:
              default: auto
              description: "The number of epochs to train the model for. An epoch refers to one full cycle through the training dataset.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - maximum: 50
                  minimum: 1
                  type: integer
          type: object
      type: object
    FineTuningIntegration:
      properties:
        type:
          description: The type of the integration being enabled for the fine-tuning job
          enum:
            - wandb
          type: string
          x-stainless-const: true
        wandb:
          description: "The settings for your integration with Weights and Biases. This payload specifies the project that\nmetrics will be sent to. Optionally, you can set an explicit display name for your run, add tags\nto your run, and set a default entity (team, username, etc) to be associated with your run.\n"
          properties:
            entity:
              description: "The entity to use for the run. This allows you to set the team or username of the WandB user that you would\nlike associated with the run. If not set, the default entity for the registered WandB API key is used.\n"
              nullable: true
              type: string
            name:
              description: "A display name to set for the run. If not set, we will use the Job ID as the name.\n"
              nullable: true
              type: string
            project:
              description: "The name of the project that the new run will be created under.\n"
              example: my-wandb-project
              type: string
            tags:
              description: "A list of tags to be attached to the newly created run. These tags are passed through directly to WandB. Some\ndefault tags are generated by OpenAI: \"openai/finetune\", \"openai/{base-model}\", \"openai/{ftjob-abcdef}\".\n"
              items:
                example: custom-tag
                type: string
              type: array
          required:
            - project
          type: object
      required:
        - type
        - wandb
      title: Fine-Tuning Job Integration
      type: object
    FineTuningJob:
      description: "The `fine_tuning.job` object represents a fine-tuning job that has been created through the API.\n"
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the fine-tuning job was created.
          type: integer
        error:
          description: For fine-tuning jobs that have `failed`, this will contain more information on the cause of the failure.
          nullable: true
          properties:
            code:
              description: A machine-readable error code.
              type: string
            message:
              description: A human-readable error message.
              type: string
            param:
              description: The parameter that was invalid, usually `training_file` or `validation_file`. This field will be null if the failure was not parameter-specific.
              nullable: true
              type: string
          required:
            - code
            - message
            - param
          type: object
        estimated_finish:
          description: The Unix timestamp (in seconds) for when the fine-tuning job is estimated to finish. The value will be null if the fine-tuning job is not running.
          nullable: true
          type: integer
        fine_tuned_model:
          description: The name of the fine-tuned model that is being created. The value will be null if the fine-tuning job is still running.
          nullable: true
          type: string
        finished_at:
          description: The Unix timestamp (in seconds) for when the fine-tuning job was finished. The value will be null if the fine-tuning job is still running.
          nullable: true
          type: integer
        hyperparameters:
          description: The hyperparameters used for the fine-tuning job. This value will only be returned when running `supervised` jobs.
          properties:
            batch_size:
              default: auto
              description: "Number of examples in each batch. A larger batch size means that model parameters\nare updated less frequently, but with lower variance.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - maximum: 256
                  minimum: 1
                  type: integer
            learning_rate_multiplier:
              default: auto
              description: "Scaling factor for the learning rate. A smaller learning rate may be useful to avoid\noverfitting.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - exclusiveMinimum: true
                  minimum: 0
                  type: number
            n_epochs:
              default: auto
              description: "The number of epochs to train the model for. An epoch refers to one full cycle\nthrough the training dataset.\n"
              oneOf:
                - enum:
                    - auto
                  type: string
                  x-stainless-const: true
                - maximum: 50
                  minimum: 1
                  type: integer
          type: object
        id:
          description: The object identifier, which can be referenced in the API endpoints.
          type: string
        integrations:
          description: A list of integrations to enable for this fine-tuning job.
          items:
            oneOf:
              - $ref: '#/components/schemas/FineTuningIntegration'
            x-oaiExpandable: true
          maxItems: 5
          nullable: true
          type: array
        metadata:
          $ref: '#/components/schemas/Metadata'
        method:
          $ref: '#/components/schemas/FineTuneMethod'
        model:
          description: The base model that is being fine-tuned.
          type: string
        object:
          description: The object type, which is always "fine_tuning.job".
          enum:
            - fine_tuning.job
          type: string
          x-stainless-const: true
        organization_id:
          description: The organization that owns the fine-tuning job.
          type: string
        result_files:
          description: The compiled results file ID(s) for the fine-tuning job. You can retrieve the results with the [Files API](/docs/api-reference/files/retrieve-contents).
          items:
            example: file-abc123
            type: string
          type: array
        seed:
          description: The seed used for the fine-tuning job.
          type: integer
        status:
          description: The current status of the fine-tuning job, which can be either `validating_files`, `queued`, `running`, `succeeded`, `failed`, or `cancelled`.
          enum:
            - validating_files
            - queued
            - running
            - succeeded
            - failed
            - cancelled
          type: string
        trained_tokens:
          description: The total number of billable tokens processed by this fine-tuning job. The value will be null if the fine-tuning job is still running.
          nullable: true
          type: integer
        training_file:
          description: The file ID used for training. You can retrieve the training data with the [Files API](/docs/api-reference/files/retrieve-contents).
          type: string
        validation_file:
          description: The file ID used for validation. You can retrieve the validation results with the [Files API](/docs/api-reference/files/retrieve-contents).
          nullable: true
          type: string
      required:
        - created_at
        - error
        - finished_at
        - fine_tuned_model
        - hyperparameters
        - id
        - model
        - object
        - organization_id
        - result_files
        - status
        - trained_tokens
        - training_file
        - validation_file
        - seed
      title: FineTuningJob
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"davinci-002\",\n  \"created_at\": 1692661014,\n  \"finished_at\": 1692661190,\n  \"fine_tuned_model\": \"ft:davinci-002:my-org:custom_suffix:7q8mpxmy\",\n  \"organization_id\": \"org-123\",\n  \"result_files\": [\n      \"file-abc123\"\n  ],\n  \"status\": \"succeeded\",\n  \"validation_file\": null,\n  \"training_file\": \"file-abc123\",\n  \"hyperparameters\": {\n      \"n_epochs\": 4,\n      \"batch_size\": 1,\n      \"learning_rate_multiplier\": 1.0\n  },\n  \"trained_tokens\": 5768,\n  \"integrations\": [],\n  \"seed\": 0,\n  \"estimated_finish\": 0,\n  \"method\": {\n    \"type\": \"supervised\",\n    \"supervised\": {\n      \"hyperparameters\": {\n        \"n_epochs\": 4,\n        \"batch_size\": 1,\n        \"learning_rate_multiplier\": 1.0\n      }\n    }\n  },\n  \"metadata\": {\n    \"key\": \"value\"\n  }\n}\n"
        name: The fine-tuning job object
    FineTuningJobCheckpoint:
      description: "The `fine_tuning.job.checkpoint` object represents a model checkpoint for a fine-tuning job that is ready to use.\n"
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the checkpoint was created.
          type: integer
        fine_tuned_model_checkpoint:
          description: The name of the fine-tuned checkpoint model that is created.
          type: string
        fine_tuning_job_id:
          description: The name of the fine-tuning job that this checkpoint was created from.
          type: string
        id:
          description: The checkpoint identifier, which can be referenced in the API endpoints.
          type: string
        metrics:
          description: Metrics at the step number during the fine-tuning job.
          properties:
            full_valid_loss:
              type: number
            full_valid_mean_token_accuracy:
              type: number
            step:
              type: number
            train_loss:
              type: number
            train_mean_token_accuracy:
              type: number
            valid_loss:
              type: number
            valid_mean_token_accuracy:
              type: number
          type: object
        object:
          description: The object type, which is always "fine_tuning.job.checkpoint".
          enum:
            - fine_tuning.job.checkpoint
          type: string
          x-stainless-const: true
        step_number:
          description: The step number that the checkpoint was created at.
          type: integer
      required:
        - created_at
        - fine_tuning_job_id
        - fine_tuned_model_checkpoint
        - id
        - metrics
        - object
        - step_number
      title: FineTuningJobCheckpoint
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"fine_tuning.job.checkpoint\",\n  \"id\": \"ftckpt_qtZ5Gyk4BLq1SfLFWp3RtO3P\",\n  \"created_at\": 1712211699,\n  \"fine_tuned_model_checkpoint\": \"ft:gpt-4o-mini-2024-07-18:my-org:custom_suffix:9ABel2dg:ckpt-step-88\",\n  \"fine_tuning_job_id\": \"ftjob-fpbNQ3H1GrMehXRf8cO97xTN\",\n  \"metrics\": {\n    \"step\": 88,\n    \"train_loss\": 0.478,\n    \"train_mean_token_accuracy\": 0.924,\n    \"valid_loss\": 10.112,\n    \"valid_mean_token_accuracy\": 0.145,\n    \"full_valid_loss\": 0.567,\n    \"full_valid_mean_token_accuracy\": 0.944\n  },\n  \"step_number\": 88\n}\n"
        name: The fine-tuning job checkpoint object
    FineTuningJobEvent:
      description: Fine-tuning job event object
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the fine-tuning job was created.
          type: integer
        data:
          description: The data associated with the event.
          type: object
        id:
          description: The object identifier.
          type: string
        level:
          description: The log level of the event.
          enum:
            - info
            - warn
            - error
          type: string
        message:
          description: The message of the event.
          type: string
        object:
          description: The object type, which is always "fine_tuning.job.event".
          enum:
            - fine_tuning.job.event
          type: string
          x-stainless-const: true
        type:
          description: The type of event.
          enum:
            - message
            - metrics
          type: string
      required:
        - id
        - object
        - created_at
        - level
        - message
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"fine_tuning.job.event\",\n  \"id\": \"ftevent-abc123\"\n  \"created_at\": 1677610602,\n  \"level\": \"info\",\n  \"message\": \"Created fine-tuning job\",\n  \"data\": {},\n  \"type\": \"message\"\n}\n"
        name: The fine-tuning job event object
    FunctionObject:
      properties:
        description:
          description: A description of what the function does, used by the model to choose when and how to call the function.
          type: string
        name:
          description: The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
          type: string
        parameters:
          $ref: '#/components/schemas/FunctionParameters'
        strict:
          default: false
          description: Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
          nullable: true
          type: boolean
      required:
        - name
      type: object
    FunctionParameters:
      additionalProperties: true
      description: "The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format. \n\nOmitting `parameters` defines a function with an empty parameter list."
      type: object
    FunctionTool:
      description: "Defines a function in your own code the model can choose to call. Learn more\nabout [function calling](/docs/guides/function-calling).\n"
      properties:
        description:
          description: "A description of the function. Used by the model to determine whether\nor not to call the function.\n"
          nullable: true
          type: string
        name:
          description: "The name of the function to call.\n"
          type: string
        parameters:
          additionalProperties: true
          description: "A JSON schema object describing the parameters of the function.\n"
          type: object
        strict:
          description: "Whether to enforce strict parameter validation. Default `true`.\n"
          type: boolean
        type:
          description: "The type of the function tool. Always `function`.\n"
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - type
        - name
        - parameters
        - strict
      title: Function
      type: object
    FunctionToolCall:
      description: "A tool call to run a function. See the \n[function calling guide](/docs/guides/function-calling) for more information.\n"
      properties:
        arguments:
          description: "A JSON string of the arguments to pass to the function.\n"
          type: string
        call_id:
          description: "The unique ID of the function tool call generated by the model.\n"
          type: string
        id:
          description: "The unique ID of the function tool call.\n"
          type: string
        name:
          description: "The name of the function to run.\n"
          type: string
        status:
          description: "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
          enum:
            - in_progress
            - completed
            - incomplete
          type: string
        type:
          description: "The type of the function tool call. Always `function_call`.\n"
          enum:
            - function_call
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - call_id
        - name
        - arguments
      title: Function tool call
      type: object
    FunctionToolCallOutput:
      description: "The output of a function tool call.\n"
      properties:
        call_id:
          description: "The unique ID of the function tool call generated by the model.\n"
          type: string
        id:
          description: "The unique ID of the function tool call output. Populated when this item\nis returned via API.\n"
          type: string
        output:
          description: "A JSON string of the output of the function tool call.\n"
          type: string
        status:
          description: "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
          enum:
            - in_progress
            - completed
            - incomplete
          type: string
        type:
          description: "The type of the function tool call output. Always `function_call_output`.\n"
          enum:
            - function_call_output
          type: string
          x-stainless-const: true
      required:
        - type
        - call_id
        - output
      title: Function tool call output
      type: object
    FunctionToolCallOutputResource:
      allOf:
        - $ref: '#/components/schemas/FunctionToolCallOutput'
        - properties:
            id:
              description: "The unique ID of the function call tool output.\n"
              type: string
          required:
            - id
          type: object
    Image:
      description: Represents the url or the content of an image generated by the OpenAI API.
      properties:
        b64_json:
          description: The base64-encoded JSON of the generated image, if `response_format` is `b64_json`.
          type: string
        revised_prompt:
          description: The prompt that was used to generate the image, if there was any revision to the prompt.
          type: string
        url:
          description: The URL of the generated image, if `response_format` is `url` (default).
          type: string
      type: object
      x-oaiMeta:
        example: "{\n  \"url\": \"...\",\n  \"revised_prompt\": \"...\"\n}\n"
        name: The image object
    ImagesResponse:
      properties:
        created:
          type: integer
        data:
          items:
            $ref: '#/components/schemas/Image'
          type: array
      required:
        - created
        - data
    Includable:
      description: "Specify additional output data to include in the model response. Currently\nsupported values are:\n- `file_search_call.results`: Include the search results of\n  the file search tool call.\n- `message.input_image.image_url`: Include image urls from the input message.\n- `computer_call_output.output.image_url`: Include image urls from the computer call output.\n"
      enum:
        - file_search_call.results
        - message.input_image.image_url
        - computer_call_output.output.image_url
      type: string
    InputAudio:
      description: "An audio input to the model.\n"
      properties:
        data:
          description: "Base64-encoded audio data.\n"
          type: string
        format:
          description: "The format of the audio data. Currently supported formats are `mp3` and\n`wav`.\n"
          enum:
            - mp3
            - wav
          type: string
        type:
          description: "The type of the input item. Always `input_audio`.\n"
          enum:
            - input_audio
          type: string
          x-stainless-const: true
      required:
        - type
        - data
        - format
      title: Audio input
      type: object
    InputContent:
      oneOf:
        - $ref: '#/components/schemas/InputText'
        - $ref: '#/components/schemas/InputImage'
        - $ref: '#/components/schemas/InputFile'
      x-oaiExpandable: true
    InputFile:
      description: "A file input to the model.\n"
      properties:
        file_data:
          description: "The content of the file to be sent to the model.\n"
          type: string
        file_id:
          description: "The ID of the file to be sent to the model.\n"
          type: string
        filename:
          description: "The name of the file to be sent to the model.\n"
          type: string
        type:
          description: "The type of the input item. Always `input_file`.\n"
          enum:
            - input_file
          type: string
          x-stainless-const: true
      required:
        - type
      title: File input
      type: object
    InputImage:
      description: "An image input to the model. Learn about [image inputs](/docs/guides/vision).\n"
      properties:
        detail:
          default: auto
          description: "The detail level of the image to be sent to the model. One of `high`,\n`low`, or `auto`. Defaults to `auto`.\n"
          enum:
            - high
            - low
            - auto
          type: string
        file_id:
          description: "The ID of the file to be sent to the model.\n"
          nullable: true
          type: string
        image_url:
          description: "The URL of the image to be sent to the model. A fully qualified URL or\nbase64 encoded image in a data URL.\n"
          nullable: true
          type: string
        type:
          description: "The type of the input item. Always `input_image`.\n"
          enum:
            - input_image
          type: string
          x-stainless-const: true
      required:
        - type
        - detail
      title: Image input
      type: object
    InputItem:
      discriminator:
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/EasyInputMessage'
        - $ref: '#/components/schemas/Item'
          description: "An item representing part of the context for the response to be \ngenerated by the model. Can contain text, images, and audio inputs,\nas well as previous assistant responses and tool call outputs.\n"
          title: Item
          type: object
        - $ref: '#/components/schemas/ItemReference'
    InputMessage:
      description: "A message input to the model with a role indicating instruction following\nhierarchy. Instructions given with the `developer` or `system` role take\nprecedence over instructions given with the `user` role.\n"
      properties:
        content:
          $ref: '#/components/schemas/InputMessageContentList'
        role:
          description: "The role of the message input. One of `user`, `system`, or `developer`.\n"
          enum:
            - user
            - system
            - developer
          type: string
        status:
          description: "The status of item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
          enum:
            - in_progress
            - completed
            - incomplete
          type: string
        type:
          description: "The type of the message input. Always set to `message`.\n"
          enum:
            - message
          type: string
          x-stainless-const: true
      required:
        - role
        - content
      title: Input message
      type: object
    InputMessageContentList:
      description: "A list of one or many input items to the model, containing different content \ntypes.\n"
      items:
        $ref: '#/components/schemas/InputContent'
        x-oaiExpandable: true
      title: Input item content list
      type: array
      x-oaiExpandable: true
    InputMessageResource:
      allOf:
        - $ref: '#/components/schemas/InputMessage'
        - properties:
            id:
              description: "The unique ID of the message input.\n"
              type: string
          required:
            - id
          type: object
    InputText:
      description: "A text input to the model.\n"
      properties:
        text:
          description: "The text input to the model.\n"
          type: string
        type:
          description: "The type of the input item. Always `input_text`.\n"
          enum:
            - input_text
          type: string
          x-stainless-const: true
      required:
        - type
        - text
      title: Text input
      type: object
    Invite:
      description: Represents an individual `invite` to the organization.
      properties:
        accepted_at:
          description: The Unix timestamp (in seconds) of when the invite was accepted.
          type: integer
        email:
          description: The email address of the individual to whom the invite was sent
          type: string
        expires_at:
          description: The Unix timestamp (in seconds) of when the invite expires.
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        invited_at:
          description: The Unix timestamp (in seconds) of when the invite was sent.
          type: integer
        object:
          description: The object type, which is always `organization.invite`
          enum:
            - organization.invite
          type: string
          x-stainless-const: true
        projects:
          description: The projects that were granted membership upon acceptance of the invite.
          items:
            properties:
              id:
                description: Project's public ID
                type: string
              role:
                description: Project membership role
                enum:
                  - member
                  - owner
                type: string
            type: object
          type: array
        role:
          description: '`owner` or `reader`'
          enum:
            - owner
            - reader
          type: string
        status:
          description: '`accepted`,`expired`, or `pending`'
          enum:
            - accepted
            - expired
            - pending
          type: string
      required:
        - object
        - id
        - email
        - role
        - status
        - invited_at
        - expires_at
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"organization.invite\",\n  \"id\": \"invite-abc\",\n  \"email\": \"user@example.com\",\n  \"role\": \"owner\",\n  \"status\": \"accepted\",\n  \"invited_at\": 1711471533,\n  \"expires_at\": 1711471533,\n  \"accepted_at\": 1711471533,\n  \"projects\": [\n    {\n      \"id\": \"project-xyz\",\n      \"role\": \"member\"\n    }\n  ]\n}\n"
        name: The invite object
    InviteDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          description: The object type, which is always `organization.invite.deleted`
          enum:
            - organization.invite.deleted
          type: string
          x-stainless-const: true
      required:
        - object
        - id
        - deleted
      type: object
    InviteListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Invite'
          type: array
        first_id:
          description: The first `invite_id` in the retrieved `list`
          type: string
        has_more:
          description: The `has_more` property is used for pagination to indicate there are additional results.
          type: boolean
        last_id:
          description: The last `invite_id` in the retrieved `list`
          type: string
        object:
          description: The object type, which is always `list`
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
      type: object
    InviteRequest:
      properties:
        email:
          description: Send an email to this address
          type: string
        projects:
          description: An array of projects to which membership is granted at the same time the org invite is accepted. If omitted, the user will be invited to the default project for compatibility with legacy behavior.
          items:
            properties:
              id:
                description: Project's public ID
                type: string
              role:
                description: Project membership role
                enum:
                  - member
                  - owner
                type: string
            required:
              - id
              - role
            type: object
          type: array
        role:
          description: '`owner` or `reader`'
          enum:
            - reader
            - owner
          type: string
      required:
        - email
        - role
      type: object
    Item:
      description: "Content item used to generate a response.\n"
      discriminator:
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/InputMessage'
        - $ref: '#/components/schemas/OutputMessage'
        - $ref: '#/components/schemas/FileSearchToolCall'
        - $ref: '#/components/schemas/ComputerToolCall'
        - $ref: '#/components/schemas/ComputerToolCallOutput'
        - $ref: '#/components/schemas/WebSearchToolCall'
        - $ref: '#/components/schemas/FunctionToolCall'
        - $ref: '#/components/schemas/FunctionToolCallOutput'
        - $ref: '#/components/schemas/ReasoningItem'
      type: object
      x-oaiExpandable: true
    ItemReference:
      description: "An internal identifier for an item to reference.\n"
      properties:
        id:
          description: "The ID of the item to reference.\n"
          type: string
        type:
          description: "The type of item to reference. Always `item_reference`.\n"
          enum:
            - item_reference
          type: string
          x-stainless-const: true
      required:
        - id
        - type
      title: Item reference
      type: object
    ItemResource:
      description: "Content item used to generate a response.\n"
      discriminator:
        propertyName: type
      oneOf:
        - $ref: '#/components/schemas/InputMessageResource'
        - $ref: '#/components/schemas/OutputMessage'
        - $ref: '#/components/schemas/FileSearchToolCall'
        - $ref: '#/components/schemas/ComputerToolCall'
        - $ref: '#/components/schemas/ComputerToolCallOutputResource'
        - $ref: '#/components/schemas/WebSearchToolCall'
        - $ref: '#/components/schemas/FunctionToolCall'
        - $ref: '#/components/schemas/FunctionToolCallOutputResource'
      x-oaiExpandable: true
    KeyPress:
      description: "A collection of keypresses the model would like to perform.\n"
      properties:
        keys:
          description: "The combination of keys the model is requesting to be pressed. This is an\narray of strings, each representing a key.\n"
          items:
            description: "One of the keys the model is requesting to be pressed.\n"
            type: string
          type: array
        type:
          default: keypress
          description: "Specifies the event type. For a keypress action, this property is \nalways set to `keypress`.\n"
          enum:
            - keypress
          type: string
          x-stainless-const: true
      required:
        - type
        - keys
      title: KeyPress
      type: object
    ListAssistantsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AssistantObject'
          type: array
        first_id:
          example: asst_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: asst_abc456
          type: string
        object:
          example: list
          type: string
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"asst_abc123\",\n      \"object\": \"assistant\",\n      \"created_at\": 1698982736,\n      \"name\": \"Coding Tutor\",\n      \"description\": null,\n      \"model\": \"gpt-4o\",\n      \"instructions\": \"You are a helpful assistant designed to make me better at coding!\",\n      \"tools\": [],\n      \"tool_resources\": {},\n      \"metadata\": {},\n      \"top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"response_format\": \"auto\"\n    },\n    {\n      \"id\": \"asst_abc456\",\n      \"object\": \"assistant\",\n      \"created_at\": 1698982718,\n      \"name\": \"My Assistant\",\n      \"description\": null,\n      \"model\": \"gpt-4o\",\n      \"instructions\": \"You are a helpful assistant designed to make me better at coding!\",\n      \"tools\": [],\n      \"tool_resources\": {},\n      \"metadata\": {},\n      \"top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"response_format\": \"auto\"\n    },\n    {\n      \"id\": \"asst_abc789\",\n      \"object\": \"assistant\",\n      \"created_at\": 1698982643,\n      \"name\": null,\n      \"description\": null,\n      \"model\": \"gpt-4o\",\n      \"instructions\": null,\n      \"tools\": [],\n      \"tool_resources\": {},\n      \"metadata\": {},\n      \"top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"response_format\": \"auto\"\n    }\n  ],\n  \"first_id\": \"asst_abc123\",\n  \"last_id\": \"asst_abc789\",\n  \"has_more\": false\n}\n"
        group: chat
        name: List assistants response object
    ListAuditLogsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/AuditLog'
          type: array
        first_id:
          example: audit_log-defb456h8dks
          type: string
        has_more:
          type: boolean
        last_id:
          example: audit_log-hnbkd8s93s
          type: string
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
    ListBatchesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Batch'
          type: array
        first_id:
          example: batch_abc123
          type: string
        has_more:
          type: boolean
        last_id:
          example: batch_abc456
          type: string
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - has_more
      type: object
    ListFilesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/OpenAIFile'
          type: array
        first_id:
          example: file-abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: file-abc456
          type: string
        object:
          example: list
          type: string
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
    ListFineTuningJobCheckpointsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningJobCheckpoint'
          type: array
        first_id:
          nullable: true
          type: string
        has_more:
          type: boolean
        last_id:
          nullable: true
          type: string
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - has_more
      type: object
    ListFineTuningJobEventsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningJobEvent'
          type: array
        has_more:
          type: boolean
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - has_more
      type: object
    ListMessagesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/MessageObject'
          type: array
        first_id:
          example: msg_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: msg_abc123
          type: string
        object:
          example: list
          type: string
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ListModelsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Model'
          type: array
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
      type: object
    ListPaginatedFineTuningJobsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/FineTuningJob'
          type: array
        has_more:
          type: boolean
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - has_more
      type: object
    ListRunStepsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RunStepObject'
          type: array
        first_id:
          example: step_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: step_abc456
          type: string
        object:
          example: list
          type: string
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ListRunsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/RunObject'
          type: array
        first_id:
          example: run_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: run_abc456
          type: string
        object:
          example: list
          type: string
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
    ListThreadsResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ThreadObject'
          type: array
        first_id:
          example: asst_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: asst_abc456
          type: string
        object:
          example: list
          type: string
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ListVectorStoreFilesResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/VectorStoreFileObject'
          type: array
        first_id:
          example: file-abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: file-abc456
          type: string
        object:
          example: list
          type: string
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    ListVectorStoresResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/VectorStoreObject'
          type: array
        first_id:
          example: vs_abc123
          type: string
        has_more:
          example: false
          type: boolean
        last_id:
          example: vs_abc456
          type: string
        object:
          example: list
          type: string
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
    LogProb:
      allOf:
        - $ref: '#/components/schemas/LogProbProperties'
        - properties:
            top_logprobs:
              items:
                $ref: '#/components/schemas/LogProbProperties'
              nullable: true
              type: array
          type: object
    LogProbProperties:
      description: "A log probability object.\n"
      properties:
        bytes:
          description: "The bytes that were used to generate the log probability.\n"
          items:
            type: integer
          type: array
        logprob:
          description: "The log probability of the token.\n"
          type: number
        token:
          description: "The token that was used to generate the log probability.\n"
          type: string
      required:
        - token
        - logprob
        - bytes
      type: object
    MessageContentImageFileObject:
      description: References an image [File](/docs/api-reference/files) in the content of a message.
      properties:
        image_file:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
              enum:
                - auto
                - low
                - high
              type: string
            file_id:
              description: The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
              type: string
          required:
            - file_id
          type: object
        type:
          description: Always `image_file`.
          enum:
            - image_file
          type: string
          x-stainless-const: true
      required:
        - type
        - image_file
      title: Image file
      type: object
    MessageContentImageUrlObject:
      description: References an image URL in the content of a message.
      properties:
        image_url:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`. Default value is `auto`
              enum:
                - auto
                - low
                - high
              type: string
            url:
              description: 'The external URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.'
              format: uri
              type: string
          required:
            - url
          type: object
        type:
          description: The type of the content part.
          enum:
            - image_url
          type: string
          x-stainless-const: true
      required:
        - type
        - image_url
      title: Image URL
      type: object
    MessageContentRefusalObject:
      description: The refusal content generated by the assistant.
      properties:
        refusal:
          nullable: false
          type: string
        type:
          description: Always `refusal`.
          enum:
            - refusal
          type: string
          x-stainless-const: true
      required:
        - type
        - refusal
      title: Refusal
      type: object
    MessageContentTextAnnotationsFileCitationObject:
      description: A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
      properties:
        end_index:
          minimum: 0
          type: integer
        file_citation:
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
          required:
            - file_id
          type: object
        start_index:
          minimum: 0
          type: integer
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        type:
          description: Always `file_citation`.
          enum:
            - file_citation
          type: string
          x-stainless-const: true
      required:
        - type
        - text
        - file_citation
        - start_index
        - end_index
      title: File citation
      type: object
    MessageContentTextAnnotationsFilePathObject:
      description: A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
      properties:
        end_index:
          minimum: 0
          type: integer
        file_path:
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
          required:
            - file_id
          type: object
        start_index:
          minimum: 0
          type: integer
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        type:
          description: Always `file_path`.
          enum:
            - file_path
          type: string
          x-stainless-const: true
      required:
        - type
        - text
        - file_path
        - start_index
        - end_index
      title: File path
      type: object
    MessageContentTextObject:
      description: The text content that is part of a message.
      properties:
        text:
          properties:
            annotations:
              items:
                oneOf:
                  - $ref: '#/components/schemas/MessageContentTextAnnotationsFileCitationObject'
                  - $ref: '#/components/schemas/MessageContentTextAnnotationsFilePathObject'
                x-oaiExpandable: true
              type: array
            value:
              description: The data that makes up the text.
              type: string
          required:
            - value
            - annotations
          type: object
        type:
          description: Always `text`.
          enum:
            - text
          type: string
          x-stainless-const: true
      required:
        - type
        - text
      title: Text
      type: object
    MessageDeltaContentImageFileObject:
      description: References an image [File](/docs/api-reference/files) in the content of a message.
      properties:
        image_file:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image if specified by the user. `low` uses fewer tokens, you can opt in to high resolution using `high`.
              enum:
                - auto
                - low
                - high
              type: string
            file_id:
              description: The [File](/docs/api-reference/files) ID of the image in the message content. Set `purpose="vision"` when uploading the File if you need to later display the file content.
              type: string
          type: object
        index:
          description: The index of the content part in the message.
          type: integer
        type:
          description: Always `image_file`.
          enum:
            - image_file
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: Image file
      type: object
    MessageDeltaContentImageUrlObject:
      description: References an image URL in the content of a message.
      properties:
        image_url:
          properties:
            detail:
              default: auto
              description: Specifies the detail level of the image. `low` uses fewer tokens, you can opt in to high resolution using `high`.
              enum:
                - auto
                - low
                - high
              type: string
            url:
              description: 'The URL of the image, must be a supported image types: jpeg, jpg, png, gif, webp.'
              type: string
          type: object
        index:
          description: The index of the content part in the message.
          type: integer
        type:
          description: Always `image_url`.
          enum:
            - image_url
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: Image URL
      type: object
    MessageDeltaContentRefusalObject:
      description: The refusal content that is part of a message.
      properties:
        index:
          description: The index of the refusal part in the message.
          type: integer
        refusal:
          type: string
        type:
          description: Always `refusal`.
          enum:
            - refusal
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: Refusal
      type: object
    MessageDeltaContentTextAnnotationsFileCitationObject:
      description: A citation within the message that points to a specific quote from a specific File associated with the assistant or the message. Generated when the assistant uses the "file_search" tool to search files.
      properties:
        end_index:
          minimum: 0
          type: integer
        file_citation:
          properties:
            file_id:
              description: The ID of the specific File the citation is from.
              type: string
            quote:
              description: The specific quote in the file.
              type: string
          type: object
        index:
          description: The index of the annotation in the text content part.
          type: integer
        start_index:
          minimum: 0
          type: integer
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        type:
          description: Always `file_citation`.
          enum:
            - file_citation
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: File citation
      type: object
    MessageDeltaContentTextAnnotationsFilePathObject:
      description: A URL for the file that's generated when the assistant used the `code_interpreter` tool to generate a file.
      properties:
        end_index:
          minimum: 0
          type: integer
        file_path:
          properties:
            file_id:
              description: The ID of the file that was generated.
              type: string
          type: object
        index:
          description: The index of the annotation in the text content part.
          type: integer
        start_index:
          minimum: 0
          type: integer
        text:
          description: The text in the message content that needs to be replaced.
          type: string
        type:
          description: Always `file_path`.
          enum:
            - file_path
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: File path
      type: object
    MessageDeltaContentTextObject:
      description: The text content that is part of a message.
      properties:
        index:
          description: The index of the content part in the message.
          type: integer
        text:
          properties:
            annotations:
              items:
                oneOf:
                  - $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFileCitationObject'
                  - $ref: '#/components/schemas/MessageDeltaContentTextAnnotationsFilePathObject'
                x-oaiExpandable: true
              type: array
            value:
              description: The data that makes up the text.
              type: string
          type: object
        type:
          description: Always `text`.
          enum:
            - text
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: Text
      type: object
    MessageDeltaObject:
      description: "Represents a message delta i.e. any changed fields on a message during streaming.\n"
      properties:
        delta:
          description: The delta containing the fields that have changed on the Message.
          properties:
            content:
              description: The content of the message in array of text and/or images.
              items:
                oneOf:
                  - $ref: '#/components/schemas/MessageDeltaContentImageFileObject'
                  - $ref: '#/components/schemas/MessageDeltaContentTextObject'
                  - $ref: '#/components/schemas/MessageDeltaContentRefusalObject'
                  - $ref: '#/components/schemas/MessageDeltaContentImageUrlObject'
                x-oaiExpandable: true
              type: array
            role:
              description: The entity that produced the message. One of `user` or `assistant`.
              enum:
                - user
                - assistant
              type: string
          type: object
        id:
          description: The identifier of the message, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.message.delta`.
          enum:
            - thread.message.delta
          type: string
          x-stainless-const: true
      required:
        - id
        - object
        - delta
      title: Message delta object
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"msg_123\",\n  \"object\": \"thread.message.delta\",\n  \"delta\": {\n    \"content\": [\n      {\n        \"index\": 0,\n        \"type\": \"text\",\n        \"text\": { \"value\": \"Hello\", \"annotations\": [] }\n      }\n    ]\n  }\n}\n"
        name: The message delta object
    MessageObject:
      description: Represents a message within a [thread](/docs/api-reference/threads).
      properties:
        assistant_id:
          description: If applicable, the ID of the [assistant](/docs/api-reference/assistants) that authored this message.
          nullable: true
          type: string
        attachments:
          description: A list of files attached to the message, and the tools they were added to.
          items:
            properties:
              file_id:
                description: The ID of the file to attach to the message.
                type: string
              tools:
                description: The tools to add this file to.
                items:
                  oneOf:
                    - $ref: '#/components/schemas/AssistantToolsCode'
                    - $ref: '#/components/schemas/AssistantToolsFileSearchTypeOnly'
                  x-oaiExpandable: true
                type: array
            type: object
          nullable: true
          type: array
        completed_at:
          description: The Unix timestamp (in seconds) for when the message was completed.
          nullable: true
          type: integer
        content:
          description: The content of the message in array of text and/or images.
          items:
            oneOf:
              - $ref: '#/components/schemas/MessageContentImageFileObject'
              - $ref: '#/components/schemas/MessageContentImageUrlObject'
              - $ref: '#/components/schemas/MessageContentTextObject'
              - $ref: '#/components/schemas/MessageContentRefusalObject'
            x-oaiExpandable: true
          type: array
        created_at:
          description: The Unix timestamp (in seconds) for when the message was created.
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        incomplete_at:
          description: The Unix timestamp (in seconds) for when the message was marked as incomplete.
          nullable: true
          type: integer
        incomplete_details:
          description: On an incomplete message, details about why the message is incomplete.
          nullable: true
          properties:
            reason:
              description: The reason the message is incomplete.
              enum:
                - content_filter
                - max_tokens
                - run_cancelled
                - run_expired
                - run_failed
              type: string
          required:
            - reason
          type: object
        metadata:
          $ref: '#/components/schemas/Metadata'
        object:
          description: The object type, which is always `thread.message`.
          enum:
            - thread.message
          type: string
          x-stainless-const: true
        role:
          description: The entity that produced the message. One of `user` or `assistant`.
          enum:
            - user
            - assistant
          type: string
        run_id:
          description: The ID of the [run](/docs/api-reference/runs) associated with the creation of this message. Value is `null` when messages are created manually using the create message or create thread endpoints.
          nullable: true
          type: string
        status:
          description: The status of the message, which can be either `in_progress`, `incomplete`, or `completed`.
          enum:
            - in_progress
            - incomplete
            - completed
          type: string
        thread_id:
          description: The [thread](/docs/api-reference/threads) ID that this message belongs to.
          type: string
      required:
        - id
        - object
        - created_at
        - thread_id
        - status
        - incomplete_details
        - completed_at
        - incomplete_at
        - role
        - content
        - assistant_id
        - run_id
        - attachments
        - metadata
      title: The message object
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"msg_abc123\",\n  \"object\": \"thread.message\",\n  \"created_at\": 1698983503,\n  \"thread_id\": \"thread_abc123\",\n  \"role\": \"assistant\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": {\n        \"value\": \"Hi! How can I help you today?\",\n        \"annotations\": []\n      }\n    }\n  ],\n  \"assistant_id\": \"asst_abc123\",\n  \"run_id\": \"run_abc123\",\n  \"attachments\": [],\n  \"metadata\": {}\n}\n"
        name: The message object
    MessageRequestContentTextObject:
      description: The text content that is part of a message.
      properties:
        text:
          description: Text content to be sent to the model
          type: string
        type:
          description: Always `text`.
          enum:
            - text
          type: string
          x-stainless-const: true
      required:
        - type
        - text
      title: Text
      type: object
    MessageStreamEvent:
      oneOf:
        - description: Occurs when a [message](/docs/api-reference/messages/object) is created.
          properties:
            data:
              $ref: '#/components/schemas/MessageObject'
            event:
              enum:
                - thread.message.created
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [message](/docs/api-reference/messages/object)'
        - description: Occurs when a [message](/docs/api-reference/messages/object) moves to an `in_progress` state.
          properties:
            data:
              $ref: '#/components/schemas/MessageObject'
            event:
              enum:
                - thread.message.in_progress
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [message](/docs/api-reference/messages/object)'
        - description: Occurs when parts of a [Message](/docs/api-reference/messages/object) are being streamed.
          properties:
            data:
              $ref: '#/components/schemas/MessageDeltaObject'
            event:
              enum:
                - thread.message.delta
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [message delta](/docs/api-reference/assistants-streaming/message-delta-object)'
        - description: Occurs when a [message](/docs/api-reference/messages/object) is completed.
          properties:
            data:
              $ref: '#/components/schemas/MessageObject'
            event:
              enum:
                - thread.message.completed
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [message](/docs/api-reference/messages/object)'
        - description: Occurs when a [message](/docs/api-reference/messages/object) ends before it is completed.
          properties:
            data:
              $ref: '#/components/schemas/MessageObject'
            event:
              enum:
                - thread.message.incomplete
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [message](/docs/api-reference/messages/object)'
    Metadata:
      additionalProperties:
        type: string
      description: "Set of 16 key-value pairs that can be attached to an object. This can be\nuseful for storing additional information about the object in a structured\nformat, and querying for objects via API or the dashboard. \n\nKeys are strings with a maximum length of 64 characters. Values are strings\nwith a maximum length of 512 characters.\n"
      nullable: true
      type: object
      x-oaiTypeLabel: map
    Model:
      description: Describes an OpenAI model offering that can be used with the API.
      properties:
        created:
          description: The Unix timestamp (in seconds) when the model was created.
          type: integer
        id:
          description: The model identifier, which can be referenced in the API endpoints.
          type: string
        object:
          description: The object type, which is always "model".
          enum:
            - model
          type: string
          x-stainless-const: true
        owned_by:
          description: The organization that owns the model.
          type: string
      required:
        - id
        - object
        - created
        - owned_by
      title: Model
      x-oaiMeta:
        example: "{\n  \"id\": \"VAR_chat_model_id\",\n  \"object\": \"model\",\n  \"created\": 1686935002,\n  \"owned_by\": \"openai\"\n}\n"
        name: The model object
    ModelIds:
      anyOf:
        - type: string
        - enum:
            - o1
            - o1-2024-12-17
            - o1-preview
            - o1-preview-2024-09-12
            - o1-mini
            - o1-mini-2024-09-12
            - gpt-4o
            - gpt-4o-2024-11-20
            - gpt-4o-2024-08-06
            - gpt-4o-2024-05-13
            - gpt-4o-audio-preview
            - gpt-4o-audio-preview-2024-10-01
            - gpt-4o-audio-preview-2024-12-17
            - gpt-4o-mini-audio-preview
            - gpt-4o-mini-audio-preview-2024-12-17
            - gpt-4o-search-preview
            - gpt-4o-mini-search-preview
            - gpt-4o-search-preview-2025-03-11
            - gpt-4o-mini-search-preview-2025-03-11
            - computer-use-preview
            - computer-use-preview-2025-03-11
            - chatgpt-4o-latest
            - gpt-4o-mini
            - gpt-4o-mini-2024-07-18
            - gpt-4-turbo
            - gpt-4-turbo-2024-04-09
            - gpt-4-0125-preview
            - gpt-4-turbo-preview
            - gpt-4-1106-preview
            - gpt-4-vision-preview
            - gpt-4
            - gpt-4-0314
            - gpt-4-0613
            - gpt-4-32k
            - gpt-4-32k-0314
            - gpt-4-32k-0613
            - gpt-3.5-turbo
            - gpt-3.5-turbo-16k
            - gpt-3.5-turbo-0301
            - gpt-3.5-turbo-0613
            - gpt-3.5-turbo-1106
            - gpt-3.5-turbo-0125
            - gpt-3.5-turbo-16k-0613
          type: string
    ModelResponseProperties:
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          anyOf:
            - type: string
            - enum:
                - o3-mini
                - o3-mini-2025-01-31
                - o1
                - o1-2024-12-17
                - o1-preview
                - o1-preview-2024-09-12
                - o1-mini
                - o1-mini-2024-09-12
                - computer-use-preview
                - computer-use-preview-2025-02-04
                - computer-use-preview-2025-03-11
                - gpt-4.5-preview
                - gpt-4.5-preview-2025-02-27
                - gpt-4o
                - gpt-4o-2024-11-20
                - gpt-4o-2024-08-06
                - gpt-4o-2024-05-13
                - gpt-4o-audio-preview
                - gpt-4o-audio-preview-2024-10-01
                - gpt-4o-audio-preview-2024-12-17
                - gpt-4o-mini-audio-preview
                - gpt-4o-mini-audio-preview-2024-12-17
                - chatgpt-4o-latest
                - gpt-4o-mini
                - gpt-4o-mini-2024-07-18
                - gpt-4-turbo
                - gpt-4-turbo-2024-04-09
                - gpt-4-0125-preview
                - gpt-4-turbo-preview
                - gpt-4-1106-preview
                - gpt-4-vision-preview
                - gpt-4
                - gpt-4-0314
                - gpt-4-0613
                - gpt-4-32k
                - gpt-4-32k-0314
                - gpt-4-32k-0613
                - gpt-3.5-turbo
                - gpt-3.5-turbo-16k
                - gpt-3.5-turbo-0301
                - gpt-3.5-turbo-0613
                - gpt-3.5-turbo-1106
                - gpt-3.5-turbo-0125
                - gpt-3.5-turbo-16k-0613
              type: string
          description: "Model ID used to generate the response, like `gpt-4o` or `o1`. OpenAI\noffers a wide range of models with different capabilities, performance\ncharacteristics, and price points. Refer to the [model guide](/docs/models)\nto browse and compare available models.\n"
          example: gpt-4o
          x-oaiTypeLabel: string
        temperature:
          default: 1
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\nWe generally recommend altering this or `top_p` but not both.\n"
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        top_p:
          default: 1
          description: "An alternative to sampling with temperature, called nucleus sampling,\nwhere the model considers the results of the tokens with top_p probability\nmass. So 0.1 means only the tokens comprising the top 10% probability mass\nare considered.\n\nWe generally recommend altering this or `temperature` but not both.\n"
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
        user:
          description: "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices#end-user-ids).\n"
          example: user-1234
          type: string
      type: object
    ModifyAssistantRequest:
      additionalProperties: false
      properties:
        description:
          description: "The description of the assistant. The maximum length is 512 characters.\n"
          maxLength: 512
          nullable: true
          type: string
        instructions:
          description: "The system instructions that the assistant uses. The maximum length is 256,000 characters.\n"
          maxLength: 256000
          nullable: true
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          anyOf:
            - type: string
            - $ref: '#/components/schemas/AssistantSupportedModels'
          description: "ID of the model to use. You can use the [List models](/docs/api-reference/models/list) API to see all of your available models, or see our [Model overview](/docs/models) for descriptions of them.\n"
        name:
          description: "The name of the assistant. The maximum length is 256 characters.\n"
          maxLength: 256
          nullable: true
          type: string
        reasoning_effort:
          $ref: '#/components/schemas/ReasoningEffort'
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        temperature:
          default: 1
          description: "What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.\n"
          example: 1
          maximum: 2
          minimum: 0
          nullable: true
          type: number
        tool_resources:
          description: "A set of resources that are used by the assistant's tools. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: "Overrides the list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: "Overrides the [vector store](/docs/api-reference/vector-stores/object) attached to this assistant. There can be a maximum of 1 vector store attached to the assistant.\n"
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
        tools:
          default: []
          description: "A list of tool enabled on the assistant. There can be a maximum of 128 tools per assistant. Tools can be of types `code_interpreter`, `file_search`, or `function`.\n"
          items:
            oneOf:
              - $ref: '#/components/schemas/AssistantToolsCode'
              - $ref: '#/components/schemas/AssistantToolsFileSearch'
              - $ref: '#/components/schemas/AssistantToolsFunction'
            x-oaiExpandable: true
          maxItems: 128
          type: array
        top_p:
          default: 1
          description: "An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.\n\nWe generally recommend altering this or temperature but not both.\n"
          example: 1
          maximum: 1
          minimum: 0
          nullable: true
          type: number
      type: object
    ModifyMessageRequest:
      additionalProperties: false
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
      type: object
    ModifyRunRequest:
      additionalProperties: false
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
      type: object
    ModifyThreadRequest:
      additionalProperties: false
      properties:
        metadata:
          $ref: '#/components/schemas/Metadata'
        tool_resources:
          description: "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
      type: object
    Move:
      description: "A mouse move action.\n"
      properties:
        type:
          default: move
          description: "Specifies the event type. For a move action, this property is \nalways set to `move`.\n"
          enum:
            - move
          type: string
          x-stainless-const: true
        x:
          description: "The x-coordinate to move to.\n"
          type: integer
        y:
          description: "The y-coordinate to move to.\n"
          type: integer
      required:
        - type
        - x
        - y
      title: Move
      type: object
    OpenAIFile:
      description: The `File` object represents a document that has been uploaded to OpenAI.
      properties:
        bytes:
          description: The size of the file, in bytes.
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the file was created.
          type: integer
        expires_at:
          description: The Unix timestamp (in seconds) for when the file will expire.
          type: integer
        filename:
          description: The name of the file.
          type: string
        id:
          description: The file identifier, which can be referenced in the API endpoints.
          type: string
        object:
          description: The object type, which is always `file`.
          enum:
            - file
          type: string
          x-stainless-const: true
        purpose:
          description: The intended purpose of the file. Supported values are `assistants`, `assistants_output`, `batch`, `batch_output`, `fine-tune`, `fine-tune-results` and `vision`.
          enum:
            - assistants
            - assistants_output
            - batch
            - batch_output
            - fine-tune
            - fine-tune-results
            - vision
          type: string
        status:
          deprecated: true
          description: Deprecated. The current status of the file, which can be either `uploaded`, `processed`, or `error`.
          enum:
            - uploaded
            - processed
            - error
          type: string
        status_details:
          deprecated: true
          description: Deprecated. For details on why a fine-tuning training file failed validation, see the `error` field on `fine_tuning.job`.
          type: string
      required:
        - id
        - object
        - bytes
        - created_at
        - filename
        - purpose
        - status
      title: OpenAIFile
      x-oaiMeta:
        example: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"file\",\n  \"bytes\": 120000,\n  \"created_at\": 1677610602,\n  \"expires_at\": 1680202602,\n  \"filename\": \"salesOverview.pdf\",\n  \"purpose\": \"assistants\",\n}\n"
        name: The file object
    OtherChunkingStrategyResponseParam:
      additionalProperties: false
      description: This is returned when the chunking strategy is unknown. Typically, this is because the file was indexed before the `chunking_strategy` concept was introduced in the API.
      properties:
        type:
          description: Always `other`.
          enum:
            - other
          type: string
          x-stainless-const: true
      required:
        - type
      title: Other Chunking Strategy
      type: object
    OutputAudio:
      description: "An audio output from the model.\n"
      properties:
        data:
          description: "Base64-encoded audio data from the model.\n"
          type: string
        transcript:
          description: "The transcript of the audio data from the model.\n"
          type: string
        type:
          description: "The type of the output audio. Always `output_audio`.\n"
          enum:
            - output_audio
          type: string
          x-stainless-const: true
      required:
        - type
        - data
        - transcript
      title: Output audio
      type: object
    OutputContent:
      oneOf:
        - $ref: '#/components/schemas/OutputText'
        - $ref: '#/components/schemas/Refusal'
    OutputItem:
      anyOf:
        - $ref: '#/components/schemas/OutputMessage'
        - $ref: '#/components/schemas/FileSearchToolCall'
        - $ref: '#/components/schemas/FunctionToolCall'
        - $ref: '#/components/schemas/WebSearchToolCall'
        - $ref: '#/components/schemas/ComputerToolCall'
        - $ref: '#/components/schemas/ReasoningItem'
      discriminator:
        propertyName: type
      x-oaiExpandable: true
    OutputMessage:
      description: "An output message from the model.\n"
      properties:
        content:
          description: "The content of the output message.\n"
          items:
            $ref: '#/components/schemas/OutputContent'
            x-oaiExpandable: true
          type: array
          x-oaiExpandable: true
        id:
          description: "The unique ID of the output message.\n"
          type: string
        role:
          description: "The role of the output message. Always `assistant`.\n"
          enum:
            - assistant
          type: string
          x-stainless-const: true
        status:
          description: "The status of the message input. One of `in_progress`, `completed`, or\n`incomplete`. Populated when input items are returned via API.\n"
          enum:
            - in_progress
            - completed
            - incomplete
          type: string
        type:
          description: "The type of the output message. Always `message`.\n"
          enum:
            - message
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - role
        - content
        - status
      title: Output message
      type: object
    OutputText:
      description: "A text output from the model.\n"
      properties:
        annotations:
          description: "The annotations of the text output.\n"
          items:
            $ref: '#/components/schemas/Annotation'
            x-oaiExpandable: true
          type: array
        text:
          description: "The text output from the model.\n"
          type: string
        type:
          description: "The type of the output text. Always `output_text`.\n"
          enum:
            - output_text
          type: string
          x-stainless-const: true
      required:
        - type
        - text
        - annotations
      title: Output text
      type: object
    ParallelToolCalls:
      default: true
      description: Whether to enable [parallel function calling](/docs/guides/function-calling#configuring-parallel-function-calling) during tool use.
      type: boolean
    PredictionContent:
      description: "Static predicted output content, such as the content of a text file that is\nbeing regenerated.\n"
      properties:
        content:
          description: "The content that should be matched when generating a model response.\nIf generated tokens would match this content, the entire model response\ncan be returned much more quickly.\n"
          oneOf:
            - description: "The content used for a Predicted Output. This is often the\ntext of a file you are regenerating with minor changes.\n"
              title: Text content
              type: string
            - description: An array of content parts with a defined type. Supported options differ based on the [model](/docs/models) being used to generate the response. Can contain text inputs.
              items:
                $ref: '#/components/schemas/ChatCompletionRequestMessageContentPartText'
              minItems: 1
              title: Array of content parts
              type: array
          x-oaiExpandable: true
        type:
          description: "The type of the predicted content you want to provide. This type is\ncurrently always `content`.\n"
          enum:
            - content
          type: string
          x-stainless-const: true
      required:
        - type
        - content
      title: Static Content
      type: object
    Project:
      description: Represents an individual project.
      properties:
        archived_at:
          description: The Unix timestamp (in seconds) of when the project was archived or `null`.
          nullable: true
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) of when the project was created.
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the project. This appears in reporting.
          type: string
        object:
          description: The object type, which is always `organization.project`
          enum:
            - organization.project
          type: string
          x-stainless-const: true
        status:
          description: '`active` or `archived`'
          enum:
            - active
            - archived
          type: string
      required:
        - id
        - object
        - name
        - created_at
        - status
      type: object
      x-oaiMeta:
        example: "{\n    \"id\": \"proj_abc\",\n    \"object\": \"organization.project\",\n    \"name\": \"Project example\",\n    \"created_at\": 1711471533,\n    \"archived_at\": null,\n    \"status\": \"active\"\n}\n"
        name: The project object
    ProjectApiKey:
      description: Represents an individual API key in a project.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) of when the API key was created
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the API key
          type: string
        object:
          description: The object type, which is always `organization.project.api_key`
          enum:
            - organization.project.api_key
          type: string
          x-stainless-const: true
        owner:
          properties:
            service_account:
              $ref: '#/components/schemas/ProjectServiceAccount'
            type:
              description: '`user` or `service_account`'
              enum:
                - user
                - service_account
              type: string
            user:
              $ref: '#/components/schemas/ProjectUser'
          type: object
        redacted_value:
          description: The redacted value of the API key
          type: string
      required:
        - object
        - redacted_value
        - name
        - created_at
        - id
        - owner
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.project.api_key\",\n    \"redacted_value\": \"sk-abc...def\",\n    \"name\": \"My API Key\",\n    \"created_at\": 1711471533,\n    \"id\": \"key_abc\",\n    \"owner\": {\n        \"type\": \"user\",\n        \"user\": {\n            \"object\": \"organization.project.user\",\n            \"id\": \"user_abc\",\n            \"name\": \"First Last\",\n            \"email\": \"user@example.com\",\n            \"role\": \"owner\",\n            \"created_at\": 1711471533\n        }\n    }\n}\n"
        name: The project API key object
    ProjectApiKeyDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - organization.project.api_key.deleted
          type: string
          x-stainless-const: true
      required:
        - object
        - id
        - deleted
      type: object
    ProjectApiKeyListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProjectApiKey'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
    ProjectCreateRequest:
      properties:
        name:
          description: The friendly name of the project, this name appears in reports.
          type: string
      required:
        - name
      type: object
    ProjectListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/Project'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
    ProjectRateLimit:
      description: Represents a project rate limit config.
      properties:
        batch_1_day_max_input_tokens:
          description: The maximum batch input tokens per day. Only present for relevant models.
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        max_audio_megabytes_per_1_minute:
          description: The maximum audio megabytes per minute. Only present for relevant models.
          type: integer
        max_images_per_1_minute:
          description: The maximum images per minute. Only present for relevant models.
          type: integer
        max_requests_per_1_day:
          description: The maximum requests per day. Only present for relevant models.
          type: integer
        max_requests_per_1_minute:
          description: The maximum requests per minute.
          type: integer
        max_tokens_per_1_minute:
          description: The maximum tokens per minute.
          type: integer
        model:
          description: The model this rate limit applies to.
          type: string
        object:
          description: The object type, which is always `project.rate_limit`
          enum:
            - project.rate_limit
          type: string
          x-stainless-const: true
      required:
        - object
        - id
        - model
        - max_requests_per_1_minute
        - max_tokens_per_1_minute
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"project.rate_limit\",\n    \"id\": \"rl_ada\",\n    \"model\": \"ada\",\n    \"max_requests_per_1_minute\": 600,\n    \"max_tokens_per_1_minute\": 150000,\n    \"max_images_per_1_minute\": 10\n}\n"
        name: The project rate limit object
    ProjectRateLimitListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProjectRateLimit'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
    ProjectRateLimitUpdateRequest:
      properties:
        batch_1_day_max_input_tokens:
          description: The maximum batch input tokens per day. Only relevant for certain models.
          type: integer
        max_audio_megabytes_per_1_minute:
          description: The maximum audio megabytes per minute. Only relevant for certain models.
          type: integer
        max_images_per_1_minute:
          description: The maximum images per minute. Only relevant for certain models.
          type: integer
        max_requests_per_1_day:
          description: The maximum requests per day. Only relevant for certain models.
          type: integer
        max_requests_per_1_minute:
          description: The maximum requests per minute.
          type: integer
        max_tokens_per_1_minute:
          description: The maximum tokens per minute.
          type: integer
      type: object
    ProjectServiceAccount:
      description: Represents an individual service account in a project.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) of when the service account was created
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the service account
          type: string
        object:
          description: The object type, which is always `organization.project.service_account`
          enum:
            - organization.project.service_account
          type: string
          x-stainless-const: true
        role:
          description: '`owner` or `member`'
          enum:
            - owner
            - member
          type: string
      required:
        - object
        - id
        - name
        - role
        - created_at
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.project.service_account\",\n    \"id\": \"svc_acct_abc\",\n    \"name\": \"Service Account\",\n    \"role\": \"owner\",\n    \"created_at\": 1711471533\n}\n"
        name: The project service account object
    ProjectServiceAccountApiKey:
      properties:
        created_at:
          type: integer
        id:
          type: string
        name:
          type: string
        object:
          description: The object type, which is always `organization.project.service_account.api_key`
          enum:
            - organization.project.service_account.api_key
          type: string
          x-stainless-const: true
        value:
          type: string
      required:
        - object
        - value
        - name
        - created_at
        - id
      type: object
    ProjectServiceAccountCreateRequest:
      properties:
        name:
          description: The name of the service account being created.
          type: string
      required:
        - name
      type: object
    ProjectServiceAccountCreateResponse:
      properties:
        api_key:
          $ref: '#/components/schemas/ProjectServiceAccountApiKey'
        created_at:
          type: integer
        id:
          type: string
        name:
          type: string
        object:
          enum:
            - organization.project.service_account
          type: string
          x-stainless-const: true
        role:
          description: Service accounts can only have one role of type `member`
          enum:
            - member
          type: string
          x-stainless-const: true
      required:
        - object
        - id
        - name
        - role
        - created_at
        - api_key
      type: object
    ProjectServiceAccountDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - organization.project.service_account.deleted
          type: string
          x-stainless-const: true
      required:
        - object
        - id
        - deleted
      type: object
    ProjectServiceAccountListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProjectServiceAccount'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
    ProjectUpdateRequest:
      properties:
        name:
          description: The updated name of the project, this name appears in reports.
          type: string
      required:
        - name
      type: object
    ProjectUser:
      description: Represents an individual user in a project.
      properties:
        added_at:
          description: The Unix timestamp (in seconds) of when the project was added.
          type: integer
        email:
          description: The email address of the user
          type: string
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the user
          type: string
        object:
          description: The object type, which is always `organization.project.user`
          enum:
            - organization.project.user
          type: string
          x-stainless-const: true
        role:
          description: '`owner` or `member`'
          enum:
            - owner
            - member
          type: string
      required:
        - object
        - id
        - name
        - email
        - role
        - added_at
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.project.user\",\n    \"id\": \"user_abc\",\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\",\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        name: The project user object
    ProjectUserCreateRequest:
      properties:
        role:
          description: '`owner` or `member`'
          enum:
            - owner
            - member
          type: string
        user_id:
          description: The ID of the user.
          type: string
      required:
        - user_id
        - role
      type: object
    ProjectUserDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - organization.project.user.deleted
          type: string
          x-stainless-const: true
      required:
        - object
        - id
        - deleted
      type: object
    ProjectUserListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/ProjectUser'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          type: string
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
    ProjectUserUpdateRequest:
      properties:
        role:
          description: '`owner` or `member`'
          enum:
            - owner
            - member
          type: string
      required:
        - role
      type: object
    RealtimeClientEventConversationItemCreate:
      description: "Add a new Item to the Conversation's context, including messages, function \ncalls, and function call responses. This event can be used both to populate a \n\"history\" of the conversation and to add new items mid-stream, but has the \ncurrent limitation that it cannot populate assistant audio messages.\n\nIf successful, the server will respond with a `conversation.item.created` \nevent, otherwise an `error` event will be sent.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
        previous_item_id:
          description: "The ID of the preceding item after which the new item will be inserted. \nIf not set, the new item will be appended to the end of the conversation.\nIf set to `root`, the new item will be added to the beginning of the conversation.\nIf set to an existing ID, it allows an item to be inserted mid-conversation. If the\nID cannot be found, an error will be returned and the item will not be added.\n"
          type: string
        type:
          description: The event type, must be `conversation.item.create`.
          enum:
            - conversation.item.create
          type: string
          x-stainless-const: true
      required:
        - type
        - item
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_345\",\n    \"type\": \"conversation.item.create\",\n    \"previous_item_id\": null,\n    \"item\": {\n        \"id\": \"msg_001\",\n        \"type\": \"message\",\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"type\": \"input_text\",\n                \"text\": \"Hello, how are you?\"\n            }\n        ]\n    }\n}\n"
        group: realtime
        name: conversation.item.create
    RealtimeClientEventConversationItemDelete:
      description: "Send this event when you want to remove any item from the conversation \nhistory. The server will respond with a `conversation.item.deleted` event, \nunless the item does not exist in the conversation history, in which case the \nserver will respond with an error.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        item_id:
          description: The ID of the item to delete.
          type: string
        type:
          description: The event type, must be `conversation.item.delete`.
          enum:
            - conversation.item.delete
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_901\",\n    \"type\": \"conversation.item.delete\",\n    \"item_id\": \"msg_003\"\n}\n"
        group: realtime
        name: conversation.item.delete
    RealtimeClientEventConversationItemTruncate:
      description: "Send this event to truncate a previous assistant message’s audio. The server \nwill produce audio faster than realtime, so this event is useful when the user \ninterrupts to truncate audio that has already been sent to the client but not \nyet played. This will synchronize the server's understanding of the audio with \nthe client's playback.\n\nTruncating audio will delete the server-side text transcript to ensure there \nis not text in the context that hasn't been heard by the user.\n\nIf successful, the server will respond with a `conversation.item.truncated` \nevent. \n"
      properties:
        audio_end_ms:
          description: "Inclusive duration up to which audio is truncated, in milliseconds. If \nthe audio_end_ms is greater than the actual audio duration, the server \nwill respond with an error.\n"
          type: integer
        content_index:
          description: The index of the content part to truncate. Set this to 0.
          type: integer
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        item_id:
          description: "The ID of the assistant message item to truncate. Only assistant message \nitems can be truncated.\n"
          type: string
        type:
          description: The event type, must be `conversation.item.truncate`.
          enum:
            - conversation.item.truncate
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - content_index
        - audio_end_ms
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_678\",\n    \"type\": \"conversation.item.truncate\",\n    \"item_id\": \"msg_002\",\n    \"content_index\": 0,\n    \"audio_end_ms\": 1500\n}\n"
        group: realtime
        name: conversation.item.truncate
    RealtimeClientEventInputAudioBufferAppend:
      description: "Send this event to append audio bytes to the input audio buffer. The audio \nbuffer is temporary storage you can write to and later commit. In Server VAD \nmode, the audio buffer is used to detect speech and the server will decide \nwhen to commit. When Server VAD is disabled, you must commit the audio buffer\nmanually.\n\nThe client may choose how much audio to place in each event up to a maximum \nof 15 MiB, for example streaming smaller chunks from the client may allow the \nVAD to be more responsive. Unlike made other client events, the server will \nnot send a confirmation response to this event.\n"
      properties:
        audio:
          description: "Base64-encoded audio bytes. This must be in the format specified by the \n`input_audio_format` field in the session configuration.\n"
          type: string
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.append`.
          enum:
            - input_audio_buffer.append
          type: string
          x-stainless-const: true
      required:
        - type
        - audio
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_456\",\n    \"type\": \"input_audio_buffer.append\",\n    \"audio\": \"Base64EncodedAudioData\"\n}\n"
        group: realtime
        name: input_audio_buffer.append
    RealtimeClientEventInputAudioBufferClear:
      description: "Send this event to clear the audio bytes in the buffer. The server will \nrespond with an `input_audio_buffer.cleared` event.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.clear`.
          enum:
            - input_audio_buffer.clear
          type: string
          x-stainless-const: true
      required:
        - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_012\",\n    \"type\": \"input_audio_buffer.clear\"\n}\n"
        group: realtime
        name: input_audio_buffer.clear
    RealtimeClientEventInputAudioBufferCommit:
      description: "Send this event to commit the user input audio buffer, which will create a \nnew user message item in the conversation. This event will produce an error \nif the input audio buffer is empty. When in Server VAD mode, the client does \nnot need to send this event, the server will commit the audio buffer \nautomatically.\n\nCommitting the input audio buffer will trigger input audio transcription \n(if enabled in session configuration), but it will not create a response \nfrom the model. The server will respond with an `input_audio_buffer.committed` \nevent.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.commit`.
          enum:
            - input_audio_buffer.commit
          type: string
          x-stainless-const: true
      required:
        - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_789\",\n    \"type\": \"input_audio_buffer.commit\"\n}\n"
        group: realtime
        name: input_audio_buffer.commit
    RealtimeClientEventResponseCancel:
      description: "Send this event to cancel an in-progress response. The server will respond \nwith a `response.cancelled` event or an error if there is no response to \ncancel.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        response_id:
          description: "A specific response ID to cancel - if not provided, will cancel an \nin-progress response in the default conversation.\n"
          type: string
        type:
          description: The event type, must be `response.cancel`.
          enum:
            - response.cancel
          type: string
          x-stainless-const: true
      required:
        - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_567\",\n    \"type\": \"response.cancel\"\n}\n"
        group: realtime
        name: response.cancel
    RealtimeClientEventResponseCreate:
      description: "This event instructs the server to create a Response, which means triggering \nmodel inference. When in Server VAD mode, the server will create Responses \nautomatically.\n\nA Response will include at least one Item, and may have two, in which case \nthe second will be a function call. These Items will be appended to the \nconversation history.\n\nThe server will respond with a `response.created` event, events for Items \nand content created, and finally a `response.done` event to indicate the \nResponse is complete.\n\nThe `response.create` event includes inference configuration like \n`instructions`, and `temperature`. These fields will override the Session's \nconfiguration for this Response only.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        response:
          $ref: '#/components/schemas/RealtimeResponseCreateParams'
        type:
          description: The event type, must be `response.create`.
          enum:
            - response.create
          type: string
          x-stainless-const: true
      required:
        - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_234\",\n    \"type\": \"response.create\",\n    \"response\": {\n        \"modalities\": [\"text\", \"audio\"],\n        \"instructions\": \"Please assist the user.\",\n        \"voice\": \"sage\",\n        \"output_audio_format\": \"pcm16\",\n        \"tools\": [\n            {\n                \"type\": \"function\",\n                \"name\": \"calculate_sum\",\n                \"description\": \"Calculates the sum of two numbers.\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"a\": { \"type\": \"number\" },\n                        \"b\": { \"type\": \"number\" }\n                    },\n                    \"required\": [\"a\", \"b\"]\n                }\n            }\n        ],\n        \"tool_choice\": \"auto\",\n        \"temperature\": 0.8,\n        \"max_output_tokens\": 1024\n    }\n}\n"
        group: realtime
        name: response.create
    RealtimeClientEventSessionUpdate:
      description: "Send this event to update the session’s default configuration.\nThe client may send this event at any time to update any field,\nexcept for `voice`. However, note that once a session has been\ninitialized with a particular `model`, it can’t be changed to\nanother model using `session.update`.\n\nWhen the server receives a `session.update`, it will respond\nwith a `session.updated` event showing the full, effective configuration.\nOnly the fields that are present are updated. To clear a field like\n`instructions`, pass an empty string.\n"
      properties:
        event_id:
          description: Optional client-generated ID used to identify this event.
          type: string
        session:
          $ref: '#/components/schemas/RealtimeSessionCreateRequest'
        type:
          description: The event type, must be `session.update`.
          enum:
            - session.update
          type: string
          x-stainless-const: true
      required:
        - type
        - session
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_123\",\n    \"type\": \"session.update\",\n    \"session\": {\n        \"modalities\": [\"text\", \"audio\"],\n        \"instructions\": \"You are a helpful assistant.\",\n        \"voice\": \"sage\",\n        \"input_audio_format\": \"pcm16\",\n        \"output_audio_format\": \"pcm16\",\n        \"input_audio_transcription\": {\n            \"model\": \"whisper-1\"\n        },\n        \"turn_detection\": {\n            \"type\": \"server_vad\",\n            \"threshold\": 0.5,\n            \"prefix_padding_ms\": 300,\n            \"silence_duration_ms\": 500,\n            \"create_response\": true\n        },\n        \"tools\": [\n            {\n                \"type\": \"function\",\n                \"name\": \"get_weather\",\n                \"description\": \"Get the current weather...\",\n                \"parameters\": {\n                    \"type\": \"object\",\n                    \"properties\": {\n                        \"location\": { \"type\": \"string\" }\n                    },\n                    \"required\": [\"location\"]\n                }\n            }\n        ],\n        \"tool_choice\": \"auto\",\n        \"temperature\": 0.8,\n        \"max_response_output_tokens\": \"inf\"\n    }\n}\n"
        group: realtime
        name: session.update
    RealtimeConversationItem:
      description: The item to add to the conversation.
      properties:
        arguments:
          description: "The arguments of the function call (for `function_call` items).\n"
          type: string
        call_id:
          description: "The ID of the function call (for `function_call` and \n`function_call_output` items). If passed on a `function_call_output` \nitem, the server will check that a `function_call` item with the same \nID exists in the conversation history.\n"
          type: string
        content:
          description: "The content of the message, applicable for `message` items. \n- Message items of role `system` support only `input_text` content\n- Message items of role `user` support `input_text` and `input_audio` \n  content\n- Message items of role `assistant` support `text` content.\n"
          items:
            properties:
              audio:
                description: "Base64-encoded audio bytes, used for `input_audio` content type.\n"
                type: string
              id:
                description: "ID of a previous conversation item to reference (for `item_reference`\ncontent types in `response.create` events). These can reference both\nclient and server created items.\n"
                type: string
              text:
                description: "The text content, used for `input_text` and `text` content types.\n"
                type: string
              transcript:
                description: "The transcript of the audio, used for `input_audio` content type.\n"
                type: string
              type:
                description: "The content type (`input_text`, `input_audio`, `item_reference`, `text`).\n"
                enum:
                  - input_audio
                  - input_text
                  - item_reference
                  - text
                type: string
            type: object
            x-oaiExpandable: true
          type: array
          x-oaiExpandable: true
        id:
          description: "The unique ID of the item, this can be generated by the client to help \nmanage server-side context, but is not required because the server will \ngenerate one if not provided.\n"
          type: string
        name:
          description: "The name of the function being called (for `function_call` items).\n"
          type: string
        object:
          description: "Identifier for the API object being returned - always `realtime.item`.\n"
          enum:
            - realtime.item
          type: string
          x-stainless-const: true
        output:
          description: "The output of the function call (for `function_call_output` items).\n"
          type: string
        role:
          description: "The role of the message sender (`user`, `assistant`, `system`), only \napplicable for `message` items.\n"
          enum:
            - user
            - assistant
            - system
          type: string
        status:
          description: "The status of the item (`completed`, `incomplete`). These have no effect \non the conversation, but are accepted for consistency with the \n`conversation.item.created` event.\n"
          enum:
            - completed
            - incomplete
          type: string
        type:
          description: "The type of the item (`message`, `function_call`, `function_call_output`).\n"
          enum:
            - message
            - function_call
            - function_call_output
          type: string
      type: object
      x-oaiExpandable: true
    RealtimeConversationItemWithReference:
      description: The item to add to the conversation.
      properties:
        arguments:
          description: "The arguments of the function call (for `function_call` items).\n"
          type: string
        call_id:
          description: "The ID of the function call (for `function_call` and \n`function_call_output` items). If passed on a `function_call_output` \nitem, the server will check that a `function_call` item with the same \nID exists in the conversation history.\n"
          type: string
        content:
          description: "The content of the message, applicable for `message` items. \n- Message items of role `system` support only `input_text` content\n- Message items of role `user` support `input_text` and `input_audio` \n  content\n- Message items of role `assistant` support `text` content.\n"
          items:
            properties:
              audio:
                description: "Base64-encoded audio bytes, used for `input_audio` content type.\n"
                type: string
              id:
                description: "ID of a previous conversation item to reference (for `item_reference`\ncontent types in `response.create` events). These can reference both\nclient and server created items.\n"
                type: string
              text:
                description: "The text content, used for `input_text` and `text` content types.\n"
                type: string
              transcript:
                description: "The transcript of the audio, used for `input_audio` content type.\n"
                type: string
              type:
                description: "The content type (`input_text`, `input_audio`, `item_reference`, `text`).\n"
                enum:
                  - input_audio
                  - input_text
                  - item_reference
                  - text
                type: string
            type: object
            x-oaiExpandable: true
          type: array
          x-oaiExpandable: true
        id:
          description: "For an item of type (`message` | `function_call` | `function_call_output`)\nthis field allows the client to assign the unique ID of the item. It is\nnot required because the server will generate one if not provided.\n\nFor an item of type `item_reference`, this field is required and is a\nreference to any item that has previously existed in the conversation.\n"
          type: string
        name:
          description: "The name of the function being called (for `function_call` items).\n"
          type: string
        object:
          description: "Identifier for the API object being returned - always `realtime.item`.\n"
          enum:
            - realtime.item
          type: string
          x-stainless-const: true
        output:
          description: "The output of the function call (for `function_call_output` items).\n"
          type: string
        role:
          description: "The role of the message sender (`user`, `assistant`, `system`), only \napplicable for `message` items.\n"
          enum:
            - user
            - assistant
            - system
          type: string
        status:
          description: "The status of the item (`completed`, `incomplete`). These have no effect \non the conversation, but are accepted for consistency with the \n`conversation.item.created` event.\n"
          enum:
            - completed
            - incomplete
          type: string
        type:
          description: "The type of the item (`message`, `function_call`, `function_call_output`, `item_reference`).\n"
          enum:
            - message
            - function_call
            - function_call_output
          type: string
      type: object
      x-oaiExpandable: true
    RealtimeResponse:
      description: The response resource.
      properties:
        conversation_id:
          description: "Which conversation the response is added to, determined by the `conversation`\nfield in the `response.create` event. If `auto`, the response will be added to\nthe default conversation and the value of `conversation_id` will be an id like\n`conv_1234`. If `none`, the response will not be added to any conversation and\nthe value of `conversation_id` will be `null`. If responses are being triggered\nby server VAD, the response will be added to the default conversation, thus\nthe `conversation_id` will be an id like `conv_1234`.\n"
          type: string
        id:
          description: The unique ID of the response.
          type: string
        max_output_tokens:
          description: "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls, that was used in this response.\n"
          oneOf:
            - type: integer
            - enum:
                - inf
              type: string
              x-stainless-const: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        modalities:
          description: "The set of modalities the model used to respond. If there are multiple modalities,\nthe model will pick one, for example if `modalities` is `[\"text\", \"audio\"]`, the model\ncould be responding in either text or audio.\n"
          items:
            enum:
              - text
              - audio
            type: string
          type: array
        object:
          description: The object type, must be `realtime.response`.
          enum:
            - realtime.response
          type: string
          x-stainless-const: true
        output:
          description: The list of output items generated by the response.
          items:
            $ref: '#/components/schemas/RealtimeConversationItem'
          type: array
        output_audio_format:
          description: "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
          enum:
            - pcm16
            - g711_ulaw
            - g711_alaw
          type: string
        status:
          description: "The final status of the response (`completed`, `cancelled`, `failed`, or \n`incomplete`).\n"
          enum:
            - completed
            - cancelled
            - failed
            - incomplete
          type: string
        status_details:
          description: Additional details about the status.
          properties:
            error:
              description: "A description of the error that caused the response to fail, \npopulated when the `status` is `failed`.\n"
              properties:
                code:
                  description: Error code, if any.
                  type: string
                type:
                  description: The type of error.
                  type: string
              type: object
            reason:
              description: "The reason the Response did not complete. For a `cancelled` Response, \none of `turn_detected` (the server VAD detected a new start of speech) \nor `client_cancelled` (the client sent a cancel event). For an \n`incomplete` Response, one of `max_output_tokens` or `content_filter` \n(the server-side safety filter activated and cut off the response).\n"
              enum:
                - turn_detected
                - client_cancelled
                - max_output_tokens
                - content_filter
              type: string
            type:
              description: "The type of error that caused the response to fail, corresponding \nwith the `status` field (`completed`, `cancelled`, `incomplete`, \n`failed`).\n"
              enum:
                - completed
                - cancelled
                - failed
                - incomplete
              type: string
          type: object
        temperature:
          description: "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
          type: number
        usage:
          description: "Usage statistics for the Response, this will correspond to billing. A \nRealtime API session will maintain a conversation context and append new \nItems to the Conversation, thus output from previous turns (text and \naudio tokens) will become the input for later turns.\n"
          properties:
            input_token_details:
              description: Details about the input tokens used in the Response.
              properties:
                audio_tokens:
                  description: The number of audio tokens used in the Response.
                  type: integer
                cached_tokens:
                  description: The number of cached tokens used in the Response.
                  type: integer
                text_tokens:
                  description: The number of text tokens used in the Response.
                  type: integer
              type: object
            input_tokens:
              description: "The number of input tokens used in the Response, including text and \naudio tokens.\n"
              type: integer
            output_token_details:
              description: Details about the output tokens used in the Response.
              properties:
                audio_tokens:
                  description: The number of audio tokens used in the Response.
                  type: integer
                text_tokens:
                  description: The number of text tokens used in the Response.
                  type: integer
              type: object
            output_tokens:
              description: "The number of output tokens sent in the Response, including text and \naudio tokens.\n"
              type: integer
            total_tokens:
              description: "The total number of tokens in the Response including input and output \ntext and audio tokens.\n"
              type: integer
          type: object
        voice:
          description: "The voice the model used to respond.\nCurrent voice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n"
          enum:
            - alloy
            - ash
            - ballad
            - coral
            - echo
            - sage
            - shimmer
            - verse
          type: string
      type: object
    RealtimeResponseCreateParams:
      description: Create a new Realtime response with these parameters
      properties:
        conversation:
          description: "Controls which conversation the response is added to. Currently supports\n`auto` and `none`, with `auto` as the default value. The `auto` value\nmeans that the contents of the response will be added to the default\nconversation. Set this to `none` to create an out-of-band response which \nwill not add items to default conversation.\n"
          oneOf:
            - type: string
            - default: auto
              enum:
                - auto
                - none
              type: string
        input:
          description: "Input items to include in the prompt for the model. Using this field\ncreates a new context for this Response instead of using the default\nconversation. An empty array `[]` will clear the context for this Response.\nNote that this can include references to items from the default conversation.\n"
          items:
            $ref: '#/components/schemas/RealtimeConversationItemWithReference'
          type: array
        instructions:
          description: "The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good \nresponses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n"
          type: string
        max_response_output_tokens:
          description: "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n"
          oneOf:
            - type: integer
            - enum:
                - inf
              type: string
              x-stainless-const: true
        metadata:
          $ref: '#/components/schemas/Metadata'
        modalities:
          description: "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n"
          items:
            enum:
              - text
              - audio
            type: string
          type: array
        output_audio_format:
          description: "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
          enum:
            - pcm16
            - g711_ulaw
            - g711_alaw
          type: string
        temperature:
          description: "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
          type: number
        tool_choice:
          description: "How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function, like `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}`.\n"
          type: string
        tools:
          description: Tools (functions) available to the model.
          items:
            properties:
              description:
                description: "The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n"
                type: string
              name:
                description: The name of the function.
                type: string
              parameters:
                description: Parameters of the function in JSON Schema.
                type: object
              type:
                description: The type of the tool, i.e. `function`.
                enum:
                  - function
                type: string
                x-stainless-const: true
            type: object
          type: array
        voice:
          description: "The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n"
          enum:
            - alloy
            - ash
            - ballad
            - coral
            - echo
            - sage
            - shimmer
            - verse
          type: string
      type: object
    RealtimeServerEventConversationCreated:
      description: "Returned when a conversation is created. Emitted right after session creation.\n"
      properties:
        conversation:
          description: The conversation resource.
          properties:
            id:
              description: The unique ID of the conversation.
              type: string
            object:
              description: The object type, must be `realtime.conversation`.
              type: string
          type: object
        event_id:
          description: The unique ID of the server event.
          type: string
        type:
          description: The event type, must be `conversation.created`.
          enum:
            - conversation.created
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - conversation
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_9101\",\n    \"type\": \"conversation.created\",\n    \"conversation\": {\n        \"id\": \"conv_001\",\n        \"object\": \"realtime.conversation\"\n    }\n}\n"
        group: realtime
        name: conversation.created
    RealtimeServerEventConversationItemCreated:
      description: "Returned when a conversation item is created. There are several scenarios that \nproduce this event:\n  - The server is generating a Response, which if successful will produce \n    either one or two Items, which will be of type `message` \n    (role `assistant`) or type `function_call`.\n  - The input audio buffer has been committed, either by the client or the \n    server (in `server_vad` mode). The server will take the content of the \n    input audio buffer and add it to a new user message Item.\n  - The client has sent a `conversation.item.create` event to add a new Item \n    to the Conversation.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
        previous_item_id:
          description: "The ID of the preceding item in the Conversation context, allows the \nclient to understand the order of the conversation.\n"
          type: string
        type:
          description: The event type, must be `conversation.item.created`.
          enum:
            - conversation.item.created
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - previous_item_id
        - item
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1920\",\n    \"type\": \"conversation.item.created\",\n    \"previous_item_id\": \"msg_002\",\n    \"item\": {\n        \"id\": \"msg_003\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"completed\",\n        \"role\": \"user\",\n        \"content\": [\n            {\n                \"type\": \"input_audio\",\n                \"transcript\": \"hello how are you\",\n                \"audio\": \"base64encodedaudio==\"\n            }\n        ]\n    }\n}\n"
        group: realtime
        name: conversation.item.created
    RealtimeServerEventConversationItemDeleted:
      description: "Returned when an item in the conversation is deleted by the client with a \n`conversation.item.delete` event. This event is used to synchronize the \nserver's understanding of the conversation history with the client's view.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item that was deleted.
          type: string
        type:
          description: The event type, must be `conversation.item.deleted`.
          enum:
            - conversation.item.deleted
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2728\",\n    \"type\": \"conversation.item.deleted\",\n    \"item_id\": \"msg_005\"\n}\n"
        group: realtime
        name: conversation.item.deleted
    RealtimeServerEventConversationItemInputAudioTranscriptionCompleted:
      description: "This event is the output of audio transcription for user audio written to the \nuser audio buffer. Transcription begins when the input audio buffer is \ncommitted by the client or server (in `server_vad` mode). Transcription runs \nasynchronously with Response creation, so this event may come before or after \nthe Response events.\n\nRealtime API models accept audio natively, and thus input transcription is a \nseparate process run on a separate ASR (Automatic Speech Recognition) model, \ncurrently always `whisper-1`. Thus the transcript may diverge somewhat from \nthe model's interpretation, and should be treated as a rough guide.\n"
      properties:
        content_index:
          description: The index of the content part containing the audio.
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the user message item containing the audio.
          type: string
        transcript:
          description: The transcribed text.
          type: string
        type:
          description: "The event type, must be\n`conversation.item.input_audio_transcription.completed`.\n"
          enum:
            - conversation.item.input_audio_transcription.completed
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - item_id
        - content_index
        - transcript
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2122\",\n    \"type\": \"conversation.item.input_audio_transcription.completed\",\n    \"item_id\": \"msg_003\",\n    \"content_index\": 0,\n    \"transcript\": \"Hello, how are you?\"\n}\n"
        group: realtime
        name: conversation.item.input_audio_transcription.completed
    RealtimeServerEventConversationItemInputAudioTranscriptionFailed:
      description: "Returned when input audio transcription is configured, and a transcription \nrequest for a user message failed. These events are separate from other \n`error` events so that the client can identify the related Item.\n"
      properties:
        content_index:
          description: The index of the content part containing the audio.
          type: integer
        error:
          description: Details of the transcription error.
          properties:
            code:
              description: Error code, if any.
              type: string
            message:
              description: A human-readable error message.
              type: string
            param:
              description: Parameter related to the error, if any.
              type: string
            type:
              description: The type of error.
              type: string
          type: object
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the user message item.
          type: string
        type:
          description: "The event type, must be\n`conversation.item.input_audio_transcription.failed`.\n"
          enum:
            - conversation.item.input_audio_transcription.failed
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - item_id
        - content_index
        - error
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2324\",\n    \"type\": \"conversation.item.input_audio_transcription.failed\",\n    \"item_id\": \"msg_003\",\n    \"content_index\": 0,\n    \"error\": {\n        \"type\": \"transcription_error\",\n        \"code\": \"audio_unintelligible\",\n        \"message\": \"The audio could not be transcribed.\",\n        \"param\": null\n    }\n}\n"
        group: realtime
        name: conversation.item.input_audio_transcription.failed
    RealtimeServerEventConversationItemTruncated:
      description: "Returned when an earlier assistant audio message item is truncated by the \nclient with a `conversation.item.truncate` event. This event is used to \nsynchronize the server's understanding of the audio with the client's playback.\n\nThis action will truncate the audio and remove the server-side text transcript \nto ensure there is no text in the context that hasn't been heard by the user.\n"
      properties:
        audio_end_ms:
          description: "The duration up to which the audio was truncated, in milliseconds.\n"
          type: integer
        content_index:
          description: The index of the content part that was truncated.
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the assistant message item that was truncated.
          type: string
        type:
          description: The event type, must be `conversation.item.truncated`.
          enum:
            - conversation.item.truncated
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - item_id
        - content_index
        - audio_end_ms
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2526\",\n    \"type\": \"conversation.item.truncated\",\n    \"item_id\": \"msg_004\",\n    \"content_index\": 0,\n    \"audio_end_ms\": 1500\n}\n"
        group: realtime
        name: conversation.item.truncated
    RealtimeServerEventError:
      description: "Returned when an error occurs, which could be a client problem or a server \nproblem. Most errors are recoverable and the session will stay open, we \nrecommend to implementors to monitor and log error messages by default.\n"
      properties:
        error:
          description: Details of the error.
          properties:
            code:
              description: Error code, if any.
              nullable: true
              type: string
            event_id:
              description: "The event_id of the client event that caused the error, if applicable.\n"
              nullable: true
              type: string
            message:
              description: A human-readable error message.
              type: string
            param:
              description: Parameter related to the error, if any.
              nullable: true
              type: string
            type:
              description: "The type of error (e.g., \"invalid_request_error\", \"server_error\").\n"
              type: string
          required:
            - type
            - message
          type: object
        event_id:
          description: The unique ID of the server event.
          type: string
        type:
          description: The event type, must be `error`.
          enum:
            - error
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - error
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_890\",\n    \"type\": \"error\",\n    \"error\": {\n        \"type\": \"invalid_request_error\",\n        \"code\": \"invalid_event\",\n        \"message\": \"The 'type' field is missing.\",\n        \"param\": null,\n        \"event_id\": \"event_567\"\n    }\n}\n"
        group: realtime
        name: error
    RealtimeServerEventInputAudioBufferCleared:
      description: "Returned when the input audio buffer is cleared by the client with a \n`input_audio_buffer.clear` event.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.cleared`.
          enum:
            - input_audio_buffer.cleared
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1314\",\n    \"type\": \"input_audio_buffer.cleared\"\n}\n"
        group: realtime
        name: input_audio_buffer.cleared
    RealtimeServerEventInputAudioBufferCommitted:
      description: "Returned when an input audio buffer is committed, either by the client or \nautomatically in server VAD mode. The `item_id` property is the ID of the user\nmessage item that will be created, thus a `conversation.item.created` event \nwill also be sent to the client.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the user message item that will be created.
          type: string
        previous_item_id:
          description: "The ID of the preceding item after which the new item will be inserted.\n"
          type: string
        type:
          description: The event type, must be `input_audio_buffer.committed`.
          enum:
            - input_audio_buffer.committed
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - previous_item_id
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1121\",\n    \"type\": \"input_audio_buffer.committed\",\n    \"previous_item_id\": \"msg_001\",\n    \"item_id\": \"msg_002\"\n}\n"
        group: realtime
        name: input_audio_buffer.committed
    RealtimeServerEventInputAudioBufferSpeechStarted:
      description: "Sent by the server when in `server_vad` mode to indicate that speech has been \ndetected in the audio buffer. This can happen any time audio is added to the \nbuffer (unless speech is already detected). The client may want to use this \nevent to interrupt audio playback or provide visual feedback to the user. \n\nThe client should expect to receive a `input_audio_buffer.speech_stopped` event \nwhen speech stops. The `item_id` property is the ID of the user message item \nthat will be created when speech stops and will also be included in the \n`input_audio_buffer.speech_stopped` event (unless the client manually commits \nthe audio buffer during VAD activation).\n"
      properties:
        audio_start_ms:
          description: "Milliseconds from the start of all audio written to the buffer during the \nsession when speech was first detected. This will correspond to the \nbeginning of audio sent to the model, and thus includes the \n`prefix_padding_ms` configured in the Session.\n"
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: "The ID of the user message item that will be created when speech stops.\n"
          type: string
        type:
          description: The event type, must be `input_audio_buffer.speech_started`.
          enum:
            - input_audio_buffer.speech_started
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - audio_start_ms
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1516\",\n    \"type\": \"input_audio_buffer.speech_started\",\n    \"audio_start_ms\": 1000,\n    \"item_id\": \"msg_003\"\n}\n"
        group: realtime
        name: input_audio_buffer.speech_started
    RealtimeServerEventInputAudioBufferSpeechStopped:
      description: "Returned in `server_vad` mode when the server detects the end of speech in \nthe audio buffer. The server will also send an `conversation.item.created` \nevent with the user message item that is created from the audio buffer.\n"
      properties:
        audio_end_ms:
          description: "Milliseconds since the session started when speech stopped. This will \ncorrespond to the end of audio sent to the model, and thus includes the \n`min_silence_duration_ms` configured in the Session.\n"
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the user message item that will be created.
          type: string
        type:
          description: The event type, must be `input_audio_buffer.speech_stopped`.
          enum:
            - input_audio_buffer.speech_stopped
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - audio_end_ms
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1718\",\n    \"type\": \"input_audio_buffer.speech_stopped\",\n    \"audio_end_ms\": 2000,\n    \"item_id\": \"msg_003\"\n}\n"
        group: realtime
        name: input_audio_buffer.speech_stopped
    RealtimeServerEventRateLimitsUpdated:
      description: "Emitted at the beginning of a Response to indicate the updated rate limits. \nWhen a Response is created some tokens will be \"reserved\" for the output \ntokens, the rate limits shown here reflect that reservation, which is then \nadjusted accordingly once the Response is completed.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        rate_limits:
          description: List of rate limit information.
          items:
            properties:
              limit:
                description: The maximum allowed value for the rate limit.
                type: integer
              name:
                description: "The name of the rate limit (`requests`, `tokens`).\n"
                enum:
                  - requests
                  - tokens
                type: string
              remaining:
                description: The remaining value before the limit is reached.
                type: integer
              reset_seconds:
                description: Seconds until the rate limit resets.
                type: number
            type: object
          type: array
        type:
          description: The event type, must be `rate_limits.updated`.
          enum:
            - rate_limits.updated
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - rate_limits
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5758\",\n    \"type\": \"rate_limits.updated\",\n    \"rate_limits\": [\n        {\n            \"name\": \"requests\",\n            \"limit\": 1000,\n            \"remaining\": 999,\n            \"reset_seconds\": 60\n        },\n        {\n            \"name\": \"tokens\",\n            \"limit\": 50000,\n            \"remaining\": 49950,\n            \"reset_seconds\": 60\n        }\n    ]\n}\n"
        group: realtime
        name: rate_limits.updated
    RealtimeServerEventResponseAudioDelta:
      description: Returned when the model-generated audio is updated.
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          type: integer
        delta:
          description: Base64-encoded audio data delta.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.audio.delta`.
          enum:
            - response.audio.delta
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - content_index
        - delta
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4950\",\n    \"type\": \"response.audio.delta\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Base64EncodedAudioDelta\"\n}\n"
        group: realtime
        name: response.audio.delta
    RealtimeServerEventResponseAudioDone:
      description: "Returned when the model-generated audio is done. Also emitted when a Response\nis interrupted, incomplete, or cancelled.\n"
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.audio.done`.
          enum:
            - response.audio.done
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - content_index
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5152\",\n    \"type\": \"response.audio.done\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n    \"output_index\": 0,\n    \"content_index\": 0\n}\n"
        group: realtime
        name: response.audio.done
    RealtimeServerEventResponseAudioTranscriptDelta:
      description: "Returned when the model-generated transcription of audio output is updated.\n"
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          type: integer
        delta:
          description: The transcript delta.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.audio_transcript.delta`.
          enum:
            - response.audio_transcript.delta
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - content_index
        - delta
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4546\",\n    \"type\": \"response.audio_transcript.delta\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Hello, how can I a\"\n}\n"
        group: realtime
        name: response.audio_transcript.delta
    RealtimeServerEventResponseAudioTranscriptDone:
      description: "Returned when the model-generated transcription of audio output is done\nstreaming. Also emitted when a Response is interrupted, incomplete, or\ncancelled.\n"
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        transcript:
          description: The final transcript of the audio.
          type: string
        type:
          description: The event type, must be `response.audio_transcript.done`.
          enum:
            - response.audio_transcript.done
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - content_index
        - transcript
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4748\",\n    \"type\": \"response.audio_transcript.done\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_008\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"transcript\": \"Hello, how can I assist you today?\"\n}\n"
        group: realtime
        name: response.audio_transcript.done
    RealtimeServerEventResponseContentPartAdded:
      description: "Returned when a new content part is added to an assistant message item during\nresponse generation.\n"
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item to which the content part was added.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        part:
          description: The content part that was added.
          properties:
            audio:
              description: Base64-encoded audio data (if type is "audio").
              type: string
            text:
              description: The text content (if type is "text").
              type: string
            transcript:
              description: The transcript of the audio (if type is "audio").
              type: string
            type:
              description: The content type ("text", "audio").
              enum:
                - audio
                - text
              type: string
          type: object
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.content_part.added`.
          enum:
            - response.content_part.added
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - content_index
        - part
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3738\",\n    \"type\": \"response.content_part.added\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"text\",\n        \"text\": \"\"\n    }\n}\n"
        group: realtime
        name: response.content_part.added
    RealtimeServerEventResponseContentPartDone:
      description: "Returned when a content part is done streaming in an assistant message item.\nAlso emitted when a Response is interrupted, incomplete, or cancelled.\n"
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        part:
          description: The content part that is done.
          properties:
            audio:
              description: Base64-encoded audio data (if type is "audio").
              type: string
            text:
              description: The text content (if type is "text").
              type: string
            transcript:
              description: The transcript of the audio (if type is "audio").
              type: string
            type:
              description: The content type ("text", "audio").
              enum:
                - audio
                - text
              type: string
          type: object
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.content_part.done`.
          enum:
            - response.content_part.done
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - content_index
        - part
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3940\",\n    \"type\": \"response.content_part.done\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"part\": {\n        \"type\": \"text\",\n        \"text\": \"Sure, I can help with that.\"\n    }\n}\n"
        group: realtime
        name: response.content_part.done
    RealtimeServerEventResponseCreated:
      description: "Returned when a new Response is created. The first event of response creation,\nwhere the response is in an initial state of `in_progress`.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        response:
          $ref: '#/components/schemas/RealtimeResponse'
        type:
          description: The event type, must be `response.created`.
          enum:
            - response.created
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_2930\",\n    \"type\": \"response.created\",\n    \"response\": {\n        \"id\": \"resp_001\",\n        \"object\": \"realtime.response\",\n        \"status\": \"in_progress\",\n        \"status_details\": null,\n        \"output\": [],\n        \"usage\": null\n    }\n}\n"
        group: realtime
        name: response.created
    RealtimeServerEventResponseDone:
      description: "Returned when a Response is done streaming. Always emitted, no matter the \nfinal state. The Response object included in the `response.done` event will \ninclude all output Items in the Response but will omit the raw audio data.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        response:
          $ref: '#/components/schemas/RealtimeResponse'
        type:
          description: The event type, must be `response.done`.
          enum:
            - response.done
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3132\",\n    \"type\": \"response.done\",\n    \"response\": {\n        \"id\": \"resp_001\",\n        \"object\": \"realtime.response\",\n        \"status\": \"completed\",\n        \"status_details\": null,\n        \"output\": [\n            {\n                \"id\": \"msg_006\",\n                \"object\": \"realtime.item\",\n                \"type\": \"message\",\n                \"status\": \"completed\",\n                \"role\": \"assistant\",\n                \"content\": [\n                    {\n                        \"type\": \"text\",\n                        \"text\": \"Sure, how can I assist you today?\"\n                    }\n                ]\n            }\n        ],\n        \"usage\": {\n            \"total_tokens\":275,\n            \"input_tokens\":127,\n            \"output_tokens\":148,\n            \"input_token_details\": {\n                \"cached_tokens\":384,\n                \"text_tokens\":119,\n                \"audio_tokens\":8,\n                \"cached_tokens_details\": {\n                    \"text_tokens\": 128,\n                    \"audio_tokens\": 256\n                }\n            },\n            \"output_token_details\": {\n              \"text_tokens\":36,\n              \"audio_tokens\":112\n            }\n        }\n    }\n}\n"
        group: realtime
        name: response.done
    RealtimeServerEventResponseFunctionCallArgumentsDelta:
      description: "Returned when the model-generated function call arguments are updated.\n"
      properties:
        call_id:
          description: The ID of the function call.
          type: string
        delta:
          description: The arguments delta as a JSON string.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the function call item.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: "The event type, must be `response.function_call_arguments.delta`.\n"
          enum:
            - response.function_call_arguments.delta
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - call_id
        - delta
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5354\",\n    \"type\": \"response.function_call_arguments.delta\",\n    \"response_id\": \"resp_002\",\n    \"item_id\": \"fc_001\",\n    \"output_index\": 0,\n    \"call_id\": \"call_001\",\n    \"delta\": \"{\\\"location\\\": \\\"San\\\"\"\n}\n"
        group: realtime
        name: response.function_call_arguments.delta
    RealtimeServerEventResponseFunctionCallArgumentsDone:
      description: "Returned when the model-generated function call arguments are done streaming.\nAlso emitted when a Response is interrupted, incomplete, or cancelled.\n"
      properties:
        arguments:
          description: The final arguments as a JSON string.
          type: string
        call_id:
          description: The ID of the function call.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the function call item.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: "The event type, must be `response.function_call_arguments.done`.\n"
          enum:
            - response.function_call_arguments.done
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - call_id
        - arguments
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5556\",\n    \"type\": \"response.function_call_arguments.done\",\n    \"response_id\": \"resp_002\",\n    \"item_id\": \"fc_001\",\n    \"output_index\": 0,\n    \"call_id\": \"call_001\",\n    \"arguments\": \"{\\\"location\\\": \\\"San Francisco\\\"}\"\n}\n"
        group: realtime
        name: response.function_call_arguments.done
    RealtimeServerEventResponseOutputItemAdded:
      description: Returned when a new Item is created during Response generation.
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
        output_index:
          description: The index of the output item in the Response.
          type: integer
        response_id:
          description: The ID of the Response to which the item belongs.
          type: string
        type:
          description: The event type, must be `response.output_item.added`.
          enum:
            - response.output_item.added
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - output_index
        - item
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3334\",\n    \"type\": \"response.output_item.added\",\n    \"response_id\": \"resp_001\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"msg_007\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"in_progress\",\n        \"role\": \"assistant\",\n        \"content\": []\n    }\n}\n"
        group: realtime
        name: response.output_item.added
    RealtimeServerEventResponseOutputItemDone:
      description: "Returned when an Item is done streaming. Also emitted when a Response is \ninterrupted, incomplete, or cancelled.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        item:
          $ref: '#/components/schemas/RealtimeConversationItem'
        output_index:
          description: The index of the output item in the Response.
          type: integer
        response_id:
          description: The ID of the Response to which the item belongs.
          type: string
        type:
          description: The event type, must be `response.output_item.done`.
          enum:
            - response.output_item.done
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - output_index
        - item
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_3536\",\n    \"type\": \"response.output_item.done\",\n    \"response_id\": \"resp_001\",\n    \"output_index\": 0,\n    \"item\": {\n        \"id\": \"msg_007\",\n        \"object\": \"realtime.item\",\n        \"type\": \"message\",\n        \"status\": \"completed\",\n        \"role\": \"assistant\",\n        \"content\": [\n            {\n                \"type\": \"text\",\n                \"text\": \"Sure, I can help with that.\"\n            }\n        ]\n    }\n}\n"
        group: realtime
        name: response.output_item.done
    RealtimeServerEventResponseTextDelta:
      description: Returned when the text value of a "text" content part is updated.
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          type: integer
        delta:
          description: The text delta.
          type: string
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        type:
          description: The event type, must be `response.text.delta`.
          enum:
            - response.text.delta
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - content_index
        - delta
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4142\",\n    \"type\": \"response.text.delta\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"delta\": \"Sure, I can h\"\n}\n"
        group: realtime
        name: response.text.delta
    RealtimeServerEventResponseTextDone:
      description: "Returned when the text value of a \"text\" content part is done streaming. Also\nemitted when a Response is interrupted, incomplete, or cancelled.\n"
      properties:
        content_index:
          description: The index of the content part in the item's content array.
          type: integer
        event_id:
          description: The unique ID of the server event.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item in the response.
          type: integer
        response_id:
          description: The ID of the response.
          type: string
        text:
          description: The final text content.
          type: string
        type:
          description: The event type, must be `response.text.done`.
          enum:
            - response.text.done
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - response_id
        - item_id
        - output_index
        - content_index
        - text
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_4344\",\n    \"type\": \"response.text.done\",\n    \"response_id\": \"resp_001\",\n    \"item_id\": \"msg_007\",\n    \"output_index\": 0,\n    \"content_index\": 0,\n    \"text\": \"Sure, I can help with that.\"\n}\n"
        group: realtime
        name: response.text.done
    RealtimeServerEventSessionCreated:
      description: "Returned when a Session is created. Emitted automatically when a new \nconnection is established as the first server event. This event will contain \nthe default Session configuration.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        session:
          $ref: '#/components/schemas/RealtimeSession'
        type:
          description: The event type, must be `session.created`.
          enum:
            - session.created
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - session
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_1234\",\n    \"type\": \"session.created\",\n    \"session\": {\n        \"id\": \"sess_001\",\n        \"object\": \"realtime.session\",\n        \"model\": \"gpt-4o-realtime-preview-2024-12-17\",\n        \"modalities\": [\"text\", \"audio\"],\n        \"instructions\": \"...model instructions here...\",\n        \"voice\": \"sage\",\n        \"input_audio_format\": \"pcm16\",\n        \"output_audio_format\": \"pcm16\",\n        \"input_audio_transcription\": null,\n        \"turn_detection\": {\n            \"type\": \"server_vad\",\n            \"threshold\": 0.5,\n            \"prefix_padding_ms\": 300,\n            \"silence_duration_ms\": 200\n        },\n        \"tools\": [],\n        \"tool_choice\": \"auto\",\n        \"temperature\": 0.8,\n        \"max_response_output_tokens\": \"inf\"\n    }\n}\n"
        group: realtime
        name: session.created
    RealtimeServerEventSessionUpdated:
      description: "Returned when a session is updated with a `session.update` event, unless \nthere is an error.\n"
      properties:
        event_id:
          description: The unique ID of the server event.
          type: string
        session:
          $ref: '#/components/schemas/RealtimeSession'
        type:
          description: The event type, must be `session.updated`.
          enum:
            - session.updated
          type: string
          x-stainless-const: true
      required:
        - event_id
        - type
        - session
      type: object
      x-oaiMeta:
        example: "{\n    \"event_id\": \"event_5678\",\n    \"type\": \"session.updated\",\n    \"session\": {\n        \"id\": \"sess_001\",\n        \"object\": \"realtime.session\",\n        \"model\": \"gpt-4o-realtime-preview-2024-12-17\",\n        \"modalities\": [\"text\"],\n        \"instructions\": \"New instructions\",\n        \"voice\": \"sage\",\n        \"input_audio_format\": \"pcm16\",\n        \"output_audio_format\": \"pcm16\",\n        \"input_audio_transcription\": {\n            \"model\": \"whisper-1\"\n        },\n        \"turn_detection\": null,\n        \"tools\": [],\n        \"tool_choice\": \"none\",\n        \"temperature\": 0.7,\n        \"max_response_output_tokens\": 200\n    }\n}\n"
        group: realtime
        name: session.updated
    RealtimeSession:
      description: Realtime session object configuration.
      properties:
        id:
          description: "Unique identifier for the session object.\n"
          type: string
        input_audio_format:
          description: "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n"
          enum:
            - pcm16
            - g711_ulaw
            - g711_alaw
          type: string
        input_audio_transcription:
          description: "Configuration for input audio transcription, defaults to off and can be \nset to `null` to turn off once on. Input audio transcription is not native \nto the model, since the model consumes audio directly. Transcription runs \nasynchronously through Whisper and should be treated as rough guidance \nrather than the representation understood by the model.\n"
          properties:
            model:
              description: "The model to use for transcription, `whisper-1` is the only currently \nsupported model.\n"
              type: string
          type: object
        instructions:
          description: "The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good \nresponses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n"
          type: string
        max_response_output_tokens:
          description: "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n"
          oneOf:
            - type: integer
            - enum:
                - inf
              type: string
              x-stainless-const: true
        modalities:
          description: "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n"
          items:
            enum:
              - text
              - audio
            type: string
        model:
          anyOf:
            - type: string
            - enum:
                - gpt-4o-realtime-preview
                - gpt-4o-realtime-preview-2024-10-01
                - gpt-4o-realtime-preview-2024-12-17
                - gpt-4o-mini-realtime-preview
                - gpt-4o-mini-realtime-preview-2024-12-17
              type: string
          description: "The Realtime model used for this session.\n"
        output_audio_format:
          description: "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n"
          enum:
            - pcm16
            - g711_ulaw
            - g711_alaw
          type: string
        temperature:
          description: "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
          type: number
        tool_choice:
          description: "How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n"
          type: string
        tools:
          description: Tools (functions) available to the model.
          items:
            properties:
              description:
                description: "The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n"
                type: string
              name:
                description: The name of the function.
                type: string
              parameters:
                description: Parameters of the function in JSON Schema.
                type: object
              type:
                description: The type of the tool, i.e. `function`.
                enum:
                  - function
                type: string
                x-stainless-const: true
            type: object
          type: array
        turn_detection:
          description: "Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n"
          nullable: true
          properties:
            create_response:
              default: true
              description: "Whether or not to automatically generate a response when a VAD stop event occurs. `true` by default.\n"
              type: boolean
            interrupt_response:
              default: true
              description: "Whether or not to automatically interrupt any ongoing response with output to the default\nconversation (i.e. `conversation` of `auto`) when a VAD start event occurs. `true` by default.\n"
              type: boolean
            prefix_padding_ms:
              description: "Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
              type: integer
            silence_duration_ms:
              description: "Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
              type: integer
            threshold:
              description: "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
              type: number
            type:
              description: "Type of turn detection, only `server_vad` is currently supported.\n"
              enum:
                - server_vad
              type: string
              x-stainless-const: true
          type: object
        voice:
          description: "The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n"
          enum:
            - alloy
            - ash
            - ballad
            - coral
            - echo
            - sage
            - shimmer
            - verse
          type: string
      type: object
    RealtimeSessionCreateRequest:
      description: Realtime session object configuration.
      properties:
        input_audio_format:
          description: "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, \nsingle channel (mono), and little-endian byte order.\n"
          enum:
            - pcm16
            - g711_ulaw
            - g711_alaw
          type: string
        input_audio_transcription:
          description: "Configuration for input audio transcription, defaults to off and can be  set to `null` to turn off once on. Input audio transcription is not native to the model, since the model consumes audio directly. Transcription runs  asynchronously through [OpenAI Whisper transcription](https://platform.openai.com/docs/api-reference/audio/createTranscription) and should be treated as rough guidance rather than the representation understood by the model. The client can optionally set the language and prompt for transcription, these fields will be passed to the Whisper API.\n"
          properties:
            language:
              description: "The language of the input audio. Supplying the input language in\n[ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`) format\nwill improve accuracy and latency.\n"
              type: string
            model:
              description: "The model to use for transcription, `whisper-1` is the only currently \nsupported model.\n"
              type: string
            prompt:
              description: "An optional text to guide the model's style or continue a previous audio\nsegment. The [prompt](/docs/guides/speech-to-text#prompting) should match\nthe audio language.\n"
              type: string
          type: object
        instructions:
          description: "The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good \nresponses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n"
          type: string
        max_response_output_tokens:
          description: "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n"
          oneOf:
            - type: integer
            - enum:
                - inf
              type: string
              x-stainless-const: true
        modalities:
          description: "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n"
          items:
            enum:
              - text
              - audio
            type: string
        model:
          description: "The Realtime model used for this session.\n"
          enum:
            - gpt-4o-realtime-preview
            - gpt-4o-realtime-preview-2024-10-01
            - gpt-4o-realtime-preview-2024-12-17
            - gpt-4o-mini-realtime-preview
            - gpt-4o-mini-realtime-preview-2024-12-17
          type: string
        output_audio_format:
          description: "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\nFor `pcm16`, output audio is sampled at a rate of 24kHz.\n"
          enum:
            - pcm16
            - g711_ulaw
            - g711_alaw
          type: string
        temperature:
          description: "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
          type: number
        tool_choice:
          description: "How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n"
          type: string
        tools:
          description: Tools (functions) available to the model.
          items:
            properties:
              description:
                description: "The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n"
                type: string
              name:
                description: The name of the function.
                type: string
              parameters:
                description: Parameters of the function in JSON Schema.
                type: object
              type:
                description: The type of the tool, i.e. `function`.
                enum:
                  - function
                type: string
                x-stainless-const: true
            type: object
          type: array
        turn_detection:
          description: "Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n"
          properties:
            create_response:
              default: true
              description: "Whether or not to automatically generate a response when a VAD stop event occurs. `true` by default.\n"
              type: boolean
            interrupt_response:
              default: true
              description: "Whether or not to automatically interrupt any ongoing response with output to the default\nconversation (i.e. `conversation` of `auto`) when a VAD start event occurs. `true` by default.\n"
              type: boolean
            prefix_padding_ms:
              description: "Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
              type: integer
            silence_duration_ms:
              description: "Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
              type: integer
            threshold:
              description: "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
              type: number
            type:
              description: "Type of turn detection, only `server_vad` is currently supported.\n"
              type: string
          type: object
        voice:
          description: "The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n"
          enum:
            - alloy
            - ash
            - ballad
            - coral
            - echo
            - sage
            - shimmer
            - verse
          type: string
      type: object
    RealtimeSessionCreateResponse:
      description: "A new Realtime session configuration, with an ephermeral key. Default TTL\nfor keys is one minute.\n"
      properties:
        client_secret:
          description: Ephemeral key returned by the API.
          properties:
            expires_at:
              description: "Timestamp for when the token expires. Currently, all tokens expire\nafter one minute.\n"
              type: integer
            value:
              description: "Ephemeral key usable in client environments to authenticate connections\nto the Realtime API. Use this in client-side environments rather than\na standard API token, which should only be used server-side.\n"
              type: string
          required:
            - value
            - expires_at
          type: object
        input_audio_format:
          description: "The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
          type: string
        input_audio_transcription:
          description: "Configuration for input audio transcription, defaults to off and can be \nset to `null` to turn off once on. Input audio transcription is not native \nto the model, since the model consumes audio directly. Transcription runs \nasynchronously through Whisper and should be treated as rough guidance \nrather than the representation understood by the model.\n"
          properties:
            model:
              description: "The model to use for transcription, `whisper-1` is the only currently \nsupported model.\n"
              type: string
          type: object
        instructions:
          description: "The default system instructions (i.e. system message) prepended to model \ncalls. This field allows the client to guide the model on desired \nresponses. The model can be instructed on response content and format, \n(e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of good \nresponses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion \ninto your voice\", \"laugh frequently\"). The instructions are not guaranteed \nto be followed by the model, but they provide guidance to the model on the \ndesired behavior.\n\nNote that the server sets default instructions which will be used if this \nfield is not set and are visible in the `session.created` event at the \nstart of the session.\n"
          type: string
        max_response_output_tokens:
          description: "Maximum number of output tokens for a single assistant response,\ninclusive of tool calls. Provide an integer between 1 and 4096 to\nlimit output tokens, or `inf` for the maximum available tokens for a\ngiven model. Defaults to `inf`.\n"
          oneOf:
            - type: integer
            - enum:
                - inf
              type: string
              x-stainless-const: true
        modalities:
          description: "The set of modalities the model can respond with. To disable audio,\nset this to [\"text\"].\n"
          items:
            enum:
              - text
              - audio
            type: string
        output_audio_format:
          description: "The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n"
          type: string
        temperature:
          description: "Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\n"
          type: number
        tool_choice:
          description: "How the model chooses tools. Options are `auto`, `none`, `required`, or \nspecify a function.\n"
          type: string
        tools:
          description: Tools (functions) available to the model.
          items:
            properties:
              description:
                description: "The description of the function, including guidance on when and how \nto call it, and guidance about what to tell the user when calling \n(if anything).\n"
                type: string
              name:
                description: The name of the function.
                type: string
              parameters:
                description: Parameters of the function in JSON Schema.
                type: object
              type:
                description: The type of the tool, i.e. `function`.
                enum:
                  - function
                type: string
                x-stainless-const: true
            type: object
          type: array
        turn_detection:
          description: "Configuration for turn detection. Can be set to `null` to turn off. Server \nVAD means that the model will detect the start and end of speech based on \naudio volume and respond at the end of user speech.\n"
          properties:
            prefix_padding_ms:
              description: "Amount of audio to include before the VAD detected speech (in \nmilliseconds). Defaults to 300ms.\n"
              type: integer
            silence_duration_ms:
              description: "Duration of silence to detect speech stop (in milliseconds). Defaults \nto 500ms. With shorter values the model will respond more quickly, \nbut may jump in on short pauses from the user.\n"
              type: integer
            threshold:
              description: "Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A \nhigher threshold will require louder audio to activate the model, and \nthus might perform better in noisy environments.\n"
              type: number
            type:
              description: "Type of turn detection, only `server_vad` is currently supported.\n"
              type: string
          type: object
        voice:
          description: "The voice the model uses to respond. Voice cannot be changed during the \nsession once the model has responded with audio at least once. Current \nvoice options are `alloy`, `ash`, `ballad`, `coral`, `echo` `sage`, \n`shimmer` and `verse`.\n"
          enum:
            - alloy
            - ash
            - ballad
            - coral
            - echo
            - sage
            - shimmer
            - verse
          type: string
      required:
        - client_secret
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"sess_001\",\n  \"object\": \"realtime.session\",\n  \"model\": \"gpt-4o-realtime-preview-2024-12-17\",\n  \"modalities\": [\"audio\", \"text\"],\n  \"instructions\": \"You are a friendly assistant.\",\n  \"voice\": \"alloy\",\n  \"input_audio_format\": \"pcm16\",\n  \"output_audio_format\": \"pcm16\",\n  \"input_audio_transcription\": {\n      \"model\": \"whisper-1\"\n  },\n  \"turn_detection\": null,\n  \"tools\": [],\n  \"tool_choice\": \"none\",\n  \"temperature\": 0.7,\n  \"max_response_output_tokens\": 200,\n  \"client_secret\": {\n    \"value\": \"ek_abc123\", \n    \"expires_at\": 1234567890\n  }\n}\n"
        group: realtime
        name: The session object
    Reasoning:
      description: "**o-series models only**\n\nConfiguration options for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\n"
      properties:
        effort:
          $ref: '#/components/schemas/ReasoningEffort'
        generate_summary:
          description: "**o-series models only** \n\nA summary of the reasoning performed by the model. This can be\nuseful for debugging and understanding the model's reasoning process.\nOne of `concise` or `detailed`.\n"
          enum:
            - concise
            - detailed
          nullable: true
          type: string
      required:
        - effort
      title: Reasoning
      type: object
      x-oaiExpandable: true
    ReasoningEffort:
      default: medium
      description: "**o-series models only** \n\nConstrains effort on reasoning for \n[reasoning models](https://platform.openai.com/docs/guides/reasoning).\nCurrently supported values are `low`, `medium`, and `high`. Reducing\nreasoning effort can result in faster responses and fewer tokens used\non reasoning in a response.\n"
      enum:
        - low
        - medium
        - high
      nullable: true
      type: string
    ReasoningItem:
      description: "A description of the chain of thought used by a reasoning model while generating\na response.\n"
      properties:
        content:
          description: "Reasoning text contents.\n"
          items:
            properties:
              text:
                description: "A short summary of the reasoning used by the model when generating\nthe response.\n"
                type: string
              type:
                description: "The type of the object. Always `text`.\n"
                enum:
                  - reasoning_summary
                type: string
                x-stainless-const: true
            required:
              - type
              - text
            type: object
          type: array
        id:
          description: "The unique identifier of the reasoning content.\n"
          type: string
        status:
          description: "The status of the item. One of `in_progress`, `completed`, or\n`incomplete`. Populated when items are returned via API.\n"
          enum:
            - in_progress
            - completed
            - incomplete
          type: string
        type:
          description: "The type of the object. Always `reasoning`.\n"
          enum:
            - reasoning
          type: string
          x-stainless-const: true
      required:
        - id
        - content
        - type
      title: Reasoning
      type: object
      x-oaiExpandable: true
    Refusal:
      description: "A refusal from the model.\n"
      properties:
        refusal:
          description: "The refusal explanationfrom the model.\n"
          type: string
        type:
          description: "The type of the refusal. Always `refusal`.\n"
          enum:
            - refusal
          type: string
          x-stainless-const: true
      required:
        - type
        - refusal
      title: Refusal
      type: object
    Response:
      allOf:
        - $ref: '#/components/schemas/ModelResponseProperties'
        - $ref: '#/components/schemas/ResponseProperties'
        - properties:
            created_at:
              description: "Unix timestamp (in seconds) of when this Response was created.\n"
              type: number
            error:
              $ref: '#/components/schemas/ResponseError'
            id:
              description: "Unique identifier for this Response.\n"
              type: string
            incomplete_details:
              description: "Details about why the response is incomplete.\n"
              nullable: true
              properties:
                reason:
                  description: The reason why the response is incomplete.
                  enum:
                    - max_output_tokens
                    - content_filter
                  type: string
              type: object
            object:
              description: "The object type of this resource - always set to `response`.\n"
              enum:
                - response
              type: string
              x-stainless-const: true
            output:
              description: "An array of content items generated by the model.\n\n- The length and order of items in the `output` array is dependent\n  on the model's response.\n- Rather than accessing the first item in the `output` array and \n  assuming it's an `assistant` message with the content generated by\n  the model, you might consider using the `output_text` property where\n  supported in SDKs.\n"
              items:
                $ref: '#/components/schemas/OutputItem'
                x-oaiExpandable: true
              type: array
              x-oaiExpandable: true
            output_text:
              description: "SDK-only convenience property that contains the aggregated text output \nfrom all `output_text` items in the `output` array, if any are present. \nSupported in the Python and JavaScript SDKs.\n"
              nullable: true
              type: string
              x-oaiSupportedSDKs:
                - python
                - javascript
            parallel_tool_calls:
              default: true
              description: "Whether to allow the model to run tool calls in parallel.\n"
              type: boolean
            status:
              description: "The status of the response generation. One of `completed`, `failed`, \n`in_progress`, or `incomplete`.\n"
              enum:
                - completed
                - failed
                - in_progress
                - incomplete
              type: string
            usage:
              $ref: '#/components/schemas/ResponseUsage'
          required:
            - id
            - object
            - created_at
            - error
            - incomplete_details
            - instructions
            - model
            - tools
            - output
            - parallel_tool_calls
            - metadata
            - tool_choice
            - temperature
            - top_p
          type: object
          x-oaiMeta:
            example: "{\n  \"id\": \"resp_67ccd3a9da748190baa7f1570fe91ac604becb25c45c1d41\",\n  \"object\": \"response\",\n  \"created_at\": 1741476777,\n  \"status\": \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"output\": [\n    {\n      \"type\": \"message\",\n      \"id\": \"msg_67ccd3acc8d48190a77525dc6de64b4104becb25c45c1d41\",\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n      \"content\": [\n        {\n          \"type\": \"output_text\",\n          \"text\": \"The image depicts a scenic landscape with a wooden boardwalk or pathway leading through lush, green grass under a blue sky with some clouds. The setting suggests a peaceful natural area, possibly a park or nature reserve. There are trees and shrubs in the background.\",\n          \"annotations\": []\n        }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\": true,\n  \"previous_response_id\": null,\n  \"reasoning\": {\n    \"effort\": null,\n    \"summary\": null\n  },\n  \"store\": true,\n  \"temperature\": 1.0,\n  \"text\": {\n    \"format\": {\n      \"type\": \"text\"\n    }\n  },\n  \"tool_choice\": \"auto\",\n  \"tools\": [],\n  \"top_p\": 1.0,\n  \"truncation\": \"disabled\",\n  \"usage\": {\n    \"input_tokens\": 328,\n    \"input_tokens_details\": {\n      \"cached_tokens\": 0\n    },\n    \"output_tokens\": 52,\n    \"output_tokens_details\": {\n      \"reasoning_tokens\": 0\n    },\n    \"total_tokens\": 380\n  },\n  \"user\": null,\n  \"metadata\": {}\n}\n"
            group: responses
            name: The response object
    ResponseAudioDeltaEvent:
      description: Emitted when there is a partial audio response.
      properties:
        delta:
          description: "A chunk of Base64 encoded response audio bytes.\n"
          type: string
        type:
          description: "The type of the event. Always `response.audio.delta`.\n"
          enum:
            - response.audio.delta
          type: string
          x-stainless-const: true
      required:
        - type
        - delta
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.audio.delta\",\n  \"response_id\": \"resp_123\",\n  \"delta\": \"base64encoded...\"\n}\n"
        group: responses
        name: response.audio.delta
    ResponseAudioDoneEvent:
      description: Emitted when the audio response is complete.
      properties:
        type:
          description: "The type of the event. Always `response.audio.done`.\n"
          enum:
            - response.audio.done
          type: string
          x-stainless-const: true
      required:
        - type
        - response_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.audio.done\",\n  \"response_id\": \"resp-123\"\n}\n"
        group: responses
        name: response.audio.done
    ResponseAudioTranscriptDeltaEvent:
      description: Emitted when there is a partial transcript of audio.
      properties:
        delta:
          description: "The partial transcript of the audio response.\n"
          type: string
        type:
          description: "The type of the event. Always `response.audio.transcript.delta`.\n"
          enum:
            - response.audio.transcript.delta
          type: string
          x-stainless-const: true
      required:
        - type
        - response_id
        - delta
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.audio.transcript.delta\",\n  \"response_id\": \"resp_123\",\n  \"delta\": \" ... partial transcript ... \"\n}\n"
        group: responses
        name: response.audio.transcript.delta
    ResponseAudioTranscriptDoneEvent:
      description: Emitted when the full audio transcript is completed.
      properties:
        type:
          description: "The type of the event. Always `response.audio.transcript.done`.\n"
          enum:
            - response.audio.transcript.done
          type: string
          x-stainless-const: true
      required:
        - type
        - response_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.audio.transcript.done\",\n  \"response_id\": \"resp_123\"\n}\n"
        group: responses
        name: response.audio.transcript.done
    ResponseCodeInterpreterCallCodeDeltaEvent:
      description: Emitted when a partial code snippet is added by the code interpreter.
      properties:
        delta:
          description: "The partial code snippet added by the code interpreter.\n"
          type: string
        output_index:
          description: "The index of the output item that the code interpreter call is in progress.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.code_interpreter_call.code.delta`.\n"
          enum:
            - response.code_interpreter_call.code.delta
          type: string
          x-stainless-const: true
      required:
        - type
        - response_id
        - output_index
        - delta
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call.code.delta\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 0,\n  \"delta\": \"partial code\"\n}\n"
        group: responses
        name: response.code_interpreter_call.code.delta
    ResponseCodeInterpreterCallCodeDoneEvent:
      description: Emitted when code snippet output is finalized by the code interpreter.
      properties:
        code:
          description: "The final code snippet output by the code interpreter.\n"
          type: string
        output_index:
          description: "The index of the output item that the code interpreter call is in progress.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.code_interpreter_call.code.done`.\n"
          enum:
            - response.code_interpreter_call.code.done
          type: string
          x-stainless-const: true
      required:
        - type
        - response_id
        - output_index
        - code
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call.code.done\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 3,\n  \"code\": \"console.log('done');\"\n}\n"
        group: responses
        name: response.code_interpreter_call.code.done
    ResponseCodeInterpreterCallCompletedEvent:
      description: Emitted when the code interpreter call is completed.
      properties:
        code_interpreter_call:
          $ref: '#/components/schemas/CodeInterpreterToolCall'
        output_index:
          description: "The index of the output item that the code interpreter call is in progress.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.code_interpreter_call.completed`.\n"
          enum:
            - response.code_interpreter_call.completed
          type: string
          x-stainless-const: true
      required:
        - type
        - response_id
        - output_index
        - code_interpreter_call
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call.completed\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 5,\n  \"code_interpreter_call\": {}\n}\n"
        group: responses
        name: response.code_interpreter_call.completed
    ResponseCodeInterpreterCallInProgressEvent:
      description: Emitted when a code interpreter call is in progress.
      properties:
        code_interpreter_call:
          $ref: '#/components/schemas/CodeInterpreterToolCall'
        output_index:
          description: "The index of the output item that the code interpreter call is in progress.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.code_interpreter_call.in_progress`.\n"
          enum:
            - response.code_interpreter_call.in_progress
          type: string
          x-stainless-const: true
      required:
        - type
        - response_id
        - output_index
        - code_interpreter_call
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call.in.progress\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 0,\n  \"code_interpreter_call\": {}\n}\n"
        group: responses
        name: response.code_interpreter_call.in_progress
    ResponseCodeInterpreterCallInterpretingEvent:
      description: Emitted when the code interpreter is actively interpreting the code snippet.
      properties:
        code_interpreter_call:
          $ref: '#/components/schemas/CodeInterpreterToolCall'
        output_index:
          description: "The index of the output item that the code interpreter call is in progress.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.code_interpreter_call.interpreting`.\n"
          enum:
            - response.code_interpreter_call.interpreting
          type: string
          x-stainless-const: true
      required:
        - type
        - response_id
        - output_index
        - code_interpreter_call
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.code_interpreter_call.interpreting\",\n  \"response_id\": \"resp-123\",\n  \"output_index\": 4,\n  \"code_interpreter_call\": {}\n}\n"
        group: responses
        name: response.code_interpreter_call.interpreting
    ResponseCompletedEvent:
      description: Emitted when the model response is complete.
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: "Properties of the completed response.\n"
        type:
          description: "The type of the event. Always `response.completed`.\n"
          enum:
            - response.completed
          type: string
          x-stainless-const: true
      required:
        - type
        - response
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.completed\",\n  \"response\": {\n    \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n    \"status\": \"completed\",\n    \"error\": null,\n    \"incomplete_details\": null,\n    \"input\": [],\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"output\": [\n      {\n        \"id\": \"msg_123\",\n        \"type\": \"message\",\n        \"role\": \"assistant\",\n        \"content\": [\n          {\n            \"type\": \"output_text\",\n            \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n            \"annotations\": []\n          }\n        ]\n      }\n    ],\n    \"previous_response_id\": null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": {\n      \"input_tokens\": 0,\n      \"output_tokens\": 0,\n      \"output_tokens_details\": {\n        \"reasoning_tokens\": 0\n      },\n      \"total_tokens\": 0\n    },\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
        group: responses
        name: response.completed
    ResponseContentPartAddedEvent:
      description: Emitted when a new content part is added.
      properties:
        content_index:
          description: "The index of the content part that was added.\n"
          type: integer
        item_id:
          description: "The ID of the output item that the content part was added to.\n"
          type: string
        output_index:
          description: "The index of the output item that the content part was added to.\n"
          type: integer
        part:
          $ref: '#/components/schemas/OutputContent'
          description: "The content part that was added.\n"
          x-oaiExpandable: true
        type:
          description: "The type of the event. Always `response.content_part.added`.\n"
          enum:
            - response.content_part.added
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - output_index
        - content_index
        - part
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.content_part.added\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"part\": {\n    \"type\": \"output_text\",\n    \"text\": \"\",\n    \"annotations\": []\n  }\n}\n"
        group: responses
        name: response.content_part.added
    ResponseContentPartDoneEvent:
      description: Emitted when a content part is done.
      properties:
        content_index:
          description: "The index of the content part that is done.\n"
          type: integer
        item_id:
          description: "The ID of the output item that the content part was added to.\n"
          type: string
        output_index:
          description: "The index of the output item that the content part was added to.\n"
          type: integer
        part:
          $ref: '#/components/schemas/OutputContent'
          description: "The content part that is done.\n"
          x-oaiExpandable: true
        type:
          description: "The type of the event. Always `response.content_part.done`.\n"
          enum:
            - response.content_part.done
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - output_index
        - content_index
        - part
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.content_part.done\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"part\": {\n    \"type\": \"output_text\",\n    \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n    \"annotations\": []\n  }\n}\n"
        group: responses
        name: response.content_part.done
    ResponseCreatedEvent:
      description: "An event that is emitted when a response is created.\n"
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: "The response that was created.\n"
        type:
          description: "The type of the event. Always `response.created`.\n"
          enum:
            - response.created
          type: string
          x-stainless-const: true
      required:
        - type
        - response
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.created\",\n  \"response\": {\n    \"id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n    \"object\": \"response\",\n    \"created_at\": 1741487325,\n    \"status\": \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\": null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\": true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n      \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
        group: responses
        name: response.created
    ResponseError:
      description: "An error object returned when the model fails to generate a Response.\n"
      nullable: true
      properties:
        code:
          $ref: '#/components/schemas/ResponseErrorCode'
        message:
          description: "A human-readable description of the error.\n"
          type: string
      required:
        - code
        - message
      type: object
    ResponseErrorCode:
      description: "The error code for the response.\n"
      enum:
        - server_error
        - rate_limit_exceeded
        - invalid_prompt
        - vector_store_timeout
        - invalid_image
        - invalid_image_format
        - invalid_base64_image
        - invalid_image_url
        - image_too_large
        - image_too_small
        - image_parse_error
        - image_content_policy_violation
        - invalid_image_mode
        - image_file_too_large
        - unsupported_image_media_type
        - empty_image_file
        - failed_to_download_image
        - image_file_not_found
      type: string
    ResponseErrorEvent:
      description: Emitted when an error occurs.
      properties:
        code:
          description: "The error code.\n"
          nullable: true
          type: string
        message:
          description: "The error message.\n"
          type: string
        param:
          description: "The error parameter.\n"
          nullable: true
          type: string
        type:
          description: "The type of the event. Always `error`.\n"
          enum:
            - error
          type: string
          x-stainless-const: true
      required:
        - type
        - code
        - message
        - param
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"error\",\n  \"code\": \"ERR_SOMETHING\",\n  \"message\": \"Something went wrong\",\n  \"param\": null\n}\n"
        group: responses
        name: error
    ResponseFailedEvent:
      description: "An event that is emitted when a response fails.\n"
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: "The response that failed.\n"
        type:
          description: "The type of the event. Always `response.failed`.\n"
          enum:
            - response.failed
          type: string
          x-stainless-const: true
      required:
        - type
        - response
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.failed\",\n  \"response\": {\n    \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n    \"status\": \"failed\",\n    \"error\": {\n      \"code\": \"server_error\",\n      \"message\": \"The model failed to generate a response.\"\n    },\n    \"incomplete_details\": null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"output\": [],\n    \"previous_response_id\": null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
        group: responses
        name: response.failed
    ResponseFileSearchCallCompletedEvent:
      description: Emitted when a file search call is completed (results found).
      properties:
        item_id:
          description: "The ID of the output item that the file search call is initiated.\n"
          type: string
        output_index:
          description: "The index of the output item that the file search call is initiated.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.file_search_call.completed`.\n"
          enum:
            - response.file_search_call.completed
          type: string
          x-stainless-const: true
      required:
        - type
        - output_index
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.file_search_call.completed\",\n  \"output_index\": 0,\n  \"item_id\": \"fs_123\",\n}\n"
        group: responses
        name: response.file_search_call.completed
    ResponseFileSearchCallInProgressEvent:
      description: Emitted when a file search call is initiated.
      properties:
        item_id:
          description: "The ID of the output item that the file search call is initiated.\n"
          type: string
        output_index:
          description: "The index of the output item that the file search call is initiated.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.file_search_call.in_progress`.\n"
          enum:
            - response.file_search_call.in_progress
          type: string
          x-stainless-const: true
      required:
        - type
        - output_index
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.file_search_call.in_progress\",\n  \"output_index\": 0,\n  \"item_id\": \"fs_123\",\n}\n"
        group: responses
        name: response.file_search_call.in_progress
    ResponseFileSearchCallSearchingEvent:
      description: Emitted when a file search is currently searching.
      properties:
        item_id:
          description: "The ID of the output item that the file search call is initiated.\n"
          type: string
        output_index:
          description: "The index of the output item that the file search call is searching.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.file_search_call.searching`.\n"
          enum:
            - response.file_search_call.searching
          type: string
          x-stainless-const: true
      required:
        - type
        - output_index
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.file_search_call.searching\",\n  \"output_index\": 0,\n  \"item_id\": \"fs_123\",\n}\n"
        group: responses
        name: response.file_search_call.searching
    ResponseFormatJsonObject:
      description: "JSON object response format. An older method of generating JSON responses.\nUsing `json_schema` is recommended for models that support it. Note that the\nmodel will not generate JSON without a system or user message instructing it\nto do so.\n"
      properties:
        type:
          description: The type of response format being defined. Always `json_object`.
          enum:
            - json_object
          type: string
          x-stainless-const: true
      required:
        - type
      title: JSON object
      type: object
    ResponseFormatJsonSchema:
      description: "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n"
      properties:
        json_schema:
          description: "Structured Outputs configuration options, including a JSON Schema.\n"
          properties:
            description:
              description: "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
              type: string
            name:
              description: "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
              type: string
            schema:
              $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
            strict:
              default: false
              description: "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
              nullable: true
              type: boolean
          required:
            - name
          title: JSON schema
          type: object
        type:
          description: The type of response format being defined. Always `json_schema`.
          enum:
            - json_schema
          type: string
          x-stainless-const: true
      required:
        - type
        - json_schema
      title: JSON schema
      type: object
    ResponseFormatJsonSchemaSchema:
      additionalProperties: true
      description: "The schema for the response format, described as a JSON Schema object.\nLearn how to build JSON schemas [here](https://json-schema.org/).\n"
      title: JSON schema
      type: object
    ResponseFormatText:
      description: "Default response format. Used to generate text responses.\n"
      properties:
        type:
          description: The type of response format being defined. Always `text`.
          enum:
            - text
          type: string
          x-stainless-const: true
      required:
        - type
      title: Text
      type: object
    ResponseFunctionCallArgumentsDeltaEvent:
      description: Emitted when there is a partial function-call arguments delta.
      properties:
        delta:
          description: "The function-call arguments delta that is added.\n"
          type: string
        item_id:
          description: "The ID of the output item that the function-call arguments delta is added to.\n"
          type: string
        output_index:
          description: "The index of the output item that the function-call arguments delta is added to.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.function_call_arguments.delta`.\n"
          enum:
            - response.function_call_arguments.delta
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - output_index
        - delta
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.function_call_arguments.delta\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 0,\n  \"delta\": \"{ \\\"arg\\\":\"\n}\n"
        group: responses
        name: response.function_call_arguments.delta
    ResponseFunctionCallArgumentsDoneEvent:
      description: Emitted when function-call arguments are finalized.
      properties:
        arguments:
          description: The function-call arguments.
          type: string
        item_id:
          description: The ID of the item.
          type: string
        output_index:
          description: The index of the output item.
          type: integer
        type:
          enum:
            - response.function_call_arguments.done
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - output_index
        - arguments
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.function_call_arguments.done\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 1,\n  \"arguments\": \"{ \\\"arg\\\": 123 }\"\n}\n"
        group: responses
        name: response.function_call_arguments.done
    ResponseInProgressEvent:
      description: Emitted when the response is in progress.
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: "The response that is in progress.\n"
        type:
          description: "The type of the event. Always `response.in_progress`.\n"
          enum:
            - response.in_progress
          type: string
          x-stainless-const: true
      required:
        - type
        - response
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.in_progress\",\n  \"response\": {\n    \"id\": \"resp_67ccfcdd16748190a91872c75d38539e09e4d4aac714747c\",\n    \"object\": \"response\",\n    \"created_at\": 1741487325,\n    \"status\": \"in_progress\",\n    \"error\": null,\n    \"incomplete_details\": null,\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-2024-08-06\",\n    \"output\": [],\n    \"parallel_tool_calls\": true,\n    \"previous_response_id\": null,\n    \"reasoning\": {\n      \"effort\": null,\n      \"summary\": null\n    },\n    \"store\": true,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
        group: responses
        name: response.in_progress
    ResponseIncompleteEvent:
      description: "An event that is emitted when a response finishes as incomplete.\n"
      properties:
        response:
          $ref: '#/components/schemas/Response'
          description: "The response that was incomplete.\n"
        type:
          description: "The type of the event. Always `response.incomplete`.\n"
          enum:
            - response.incomplete
          type: string
          x-stainless-const: true
      required:
        - type
        - response
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.incomplete\",\n  \"response\": {\n    \"id\": \"resp_123\",\n    \"object\": \"response\",\n    \"created_at\": 1740855869,\n    \"status\": \"incomplete\",\n    \"error\": null, \n    \"incomplete_details\": {\n      \"reason\": \"max_tokens\"\n    },\n    \"instructions\": null,\n    \"max_output_tokens\": null,\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"output\": [],\n    \"previous_response_id\": null,\n    \"reasoning_effort\": null,\n    \"store\": false,\n    \"temperature\": 1,\n    \"text\": {\n      \"format\": {\n        \"type\": \"text\"\n      }\n    },\n    \"tool_choice\": \"auto\",\n    \"tools\": [],\n    \"top_p\": 1,\n    \"truncation\": \"disabled\",\n    \"usage\": null,\n    \"user\": null,\n    \"metadata\": {}\n  }\n}\n"
        group: responses
        name: response.incomplete
    ResponseItemList:
      description: A list of Response items.
      properties:
        data:
          description: A list of items used to generate this response.
          items:
            $ref: '#/components/schemas/ItemResource'
          type: array
        first_id:
          description: The ID of the first item in the list.
          type: string
        has_more:
          description: Whether there are more items available.
          type: boolean
        last_id:
          description: The ID of the last item in the list.
          type: string
        object:
          description: The type of object returned, must be `list`.
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - has_more
        - first_id
        - last_id
      type: object
      x-oaiExpandable: true
      x-oaiMeta:
        example: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"msg_abc123\",\n      \"type\": \"message\",\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"Tell me a three sentence bedtime story about a unicorn.\"\n        }\n      ]\n    }\n  ],\n  \"first_id\": \"msg_abc123\",\n  \"last_id\": \"msg_abc123\",\n  \"has_more\": false\n}\n"
        group: responses
        name: The input item list
    ResponseModalities:
      description: "Output types that you would like the model to generate.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThe `gpt-4o-audio-preview` model can also be used to \n[generate audio](/docs/guides/audio). To request that this model generate \nboth text and audio responses, you can use:\n\n`[\"text\", \"audio\"]`\n"
      items:
        enum:
          - text
          - audio
        type: string
      nullable: true
      type: array
    ResponseModalitiesTextOnly:
      description: "Output types that you would like the model to generate.\nMost models are capable of generating text, which is the default:\n\n`[\"text\"]`\n\nThis API will soon support other output modalities, including audio and images.\n"
      items:
        enum:
          - text
        type: string
      nullable: true
      type: array
    ResponseOutputItemAddedEvent:
      description: Emitted when a new output item is added.
      properties:
        item:
          $ref: '#/components/schemas/OutputItem'
          description: "The output item that was added.\n"
          x-oaiExpandable: true
        output_index:
          description: "The index of the output item that was added.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.output_item.added`.\n"
          enum:
            - response.output_item.added
          type: string
          x-stainless-const: true
      required:
        - type
        - output_index
        - item
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_item.added\",\n  \"output_index\": 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"in_progress\",\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\": []\n  }\n}\n"
        group: responses
        name: response.output_item.added
    ResponseOutputItemDoneEvent:
      description: Emitted when an output item is marked done.
      properties:
        item:
          $ref: '#/components/schemas/OutputItem'
          description: "The output item that was marked done.\n"
          x-oaiExpandable: true
        output_index:
          description: "The index of the output item that was marked done.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.output_item.done`.\n"
          enum:
            - response.output_item.done
          type: string
          x-stainless-const: true
      required:
        - type
        - output_index
        - item
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_item.done\",\n  \"output_index\": 0,\n  \"item\": {\n    \"id\": \"msg_123\",\n    \"status\": \"completed\",\n    \"type\": \"message\",\n    \"role\": \"assistant\",\n    \"content\": [\n      {\n        \"type\": \"output_text\",\n        \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\",\n        \"annotations\": []\n      }\n    ]\n  }\n}\n"
        group: responses
        name: response.output_item.done
    ResponseProperties:
      properties:
        instructions:
          description: "Inserts a system (or developer) message as the first item in the model's context.\n\nWhen using along with `previous_response_id`, the instructions from a previous\nresponse will be not be carried over to the next response. This makes it simple\nto swap out system (or developer) messages in new responses.\n"
          nullable: true
          type: string
        max_output_tokens:
          description: "An upper bound for the number of tokens that can be generated for a response, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).\n"
          nullable: true
          type: integer
        previous_response_id:
          description: "The unique ID of the previous response to the model. Use this to\ncreate multi-turn conversations. Learn more about \n[conversation state](/docs/guides/conversation-state).\n"
          nullable: true
          type: string
        reasoning:
          $ref: '#/components/schemas/Reasoning'
          nullable: true
        text:
          description: "Configuration options for a text response from the model. Can be plain\ntext or structured JSON data. Learn more:\n- [Text inputs and outputs](/docs/guides/text)\n- [Structured Outputs](/docs/guides/structured-outputs)\n"
          properties:
            format:
              $ref: '#/components/schemas/TextResponseFormatConfiguration'
          type: object
        tool_choice:
          description: "How the model should select which tool (or tools) to use when generating\na response. See the `tools` parameter to see how to specify which tools\nthe model can call.\n"
          oneOf:
            - $ref: '#/components/schemas/ToolChoiceOptions'
            - $ref: '#/components/schemas/ToolChoiceTypes'
            - $ref: '#/components/schemas/ToolChoiceFunction'
          x-oaiExpandable: true
        tools:
          description: "An array of tools the model may call while generating a response. You \ncan specify which tool to use by setting the `tool_choice` parameter.\n\nThe two categories of tools you can provide the model are:\n\n- **Built-in tools**: Tools that are provided by OpenAI that extend the\n  model's capabilities, like [web search](/docs/guides/tools-web-search)\n  or [file search](/docs/guides/tools-file-search). Learn more about\n  [built-in tools](/docs/guides/tools).\n- **Function calls (custom tools)**: Functions that are defined by you,\n  enabling the model to call your own code. Learn more about\n  [function calling](/docs/guides/function-calling).\n"
          items:
            $ref: '#/components/schemas/Tool'
          type: array
        truncation:
          default: disabled
          description: "The truncation strategy to use for the model response.\n- `auto`: If the context of this response and previous ones exceeds\n  the model's context window size, the model will truncate the \n  response to fit the context window by dropping input items in the\n  middle of the conversation. \n- `disabled` (default): If a model response will exceed the context window \n  size for a model, the request will fail with a 400 error.\n"
          enum:
            - auto
            - disabled
          nullable: true
          type: string
      type: object
    ResponseRefusalDeltaEvent:
      description: Emitted when there is a partial refusal text.
      properties:
        content_index:
          description: "The index of the content part that the refusal text is added to.\n"
          type: integer
        delta:
          description: "The refusal text that is added.\n"
          type: string
        item_id:
          description: "The ID of the output item that the refusal text is added to.\n"
          type: string
        output_index:
          description: "The index of the output item that the refusal text is added to.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.refusal.delta`.\n"
          enum:
            - response.refusal.delta
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - output_index
        - content_index
        - delta
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.refusal.delta\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\": \"refusal text so far\"\n}\n"
        group: responses
        name: response.refusal.delta
    ResponseRefusalDoneEvent:
      description: Emitted when refusal text is finalized.
      properties:
        content_index:
          description: "The index of the content part that the refusal text is finalized.\n"
          type: integer
        item_id:
          description: "The ID of the output item that the refusal text is finalized.\n"
          type: string
        output_index:
          description: "The index of the output item that the refusal text is finalized.\n"
          type: integer
        refusal:
          description: "The refusal text that is finalized.\n"
          type: string
        type:
          description: "The type of the event. Always `response.refusal.done`.\n"
          enum:
            - response.refusal.done
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - output_index
        - content_index
        - refusal
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.refusal.done\",\n  \"item_id\": \"item-abc\",\n  \"output_index\": 1,\n  \"content_index\": 2,\n  \"refusal\": \"final refusal text\"\n}\n"
        group: responses
        name: response.refusal.done
    ResponseStreamEvent:
      anyOf:
        - $ref: '#/components/schemas/ResponseAudioDeltaEvent'
        - $ref: '#/components/schemas/ResponseAudioDoneEvent'
        - $ref: '#/components/schemas/ResponseAudioTranscriptDeltaEvent'
        - $ref: '#/components/schemas/ResponseAudioTranscriptDoneEvent'
        - $ref: '#/components/schemas/ResponseCodeInterpreterCallCodeDeltaEvent'
        - $ref: '#/components/schemas/ResponseCodeInterpreterCallCodeDoneEvent'
        - $ref: '#/components/schemas/ResponseCodeInterpreterCallCompletedEvent'
        - $ref: '#/components/schemas/ResponseCodeInterpreterCallInProgressEvent'
        - $ref: '#/components/schemas/ResponseCodeInterpreterCallInterpretingEvent'
        - $ref: '#/components/schemas/ResponseCompletedEvent'
        - $ref: '#/components/schemas/ResponseContentPartAddedEvent'
        - $ref: '#/components/schemas/ResponseContentPartDoneEvent'
        - $ref: '#/components/schemas/ResponseCreatedEvent'
        - $ref: '#/components/schemas/ResponseErrorEvent'
        - $ref: '#/components/schemas/ResponseFileSearchCallCompletedEvent'
        - $ref: '#/components/schemas/ResponseFileSearchCallInProgressEvent'
        - $ref: '#/components/schemas/ResponseFileSearchCallSearchingEvent'
        - $ref: '#/components/schemas/ResponseFunctionCallArgumentsDeltaEvent'
        - $ref: '#/components/schemas/ResponseFunctionCallArgumentsDoneEvent'
        - $ref: '#/components/schemas/ResponseInProgressEvent'
        - $ref: '#/components/schemas/ResponseFailedEvent'
        - $ref: '#/components/schemas/ResponseIncompleteEvent'
        - $ref: '#/components/schemas/ResponseOutputItemAddedEvent'
        - $ref: '#/components/schemas/ResponseOutputItemDoneEvent'
        - $ref: '#/components/schemas/ResponseRefusalDeltaEvent'
        - $ref: '#/components/schemas/ResponseRefusalDoneEvent'
        - $ref: '#/components/schemas/ResponseTextAnnotationDeltaEvent'
        - $ref: '#/components/schemas/ResponseTextDeltaEvent'
        - $ref: '#/components/schemas/ResponseTextDoneEvent'
        - $ref: '#/components/schemas/ResponseWebSearchCallCompletedEvent'
        - $ref: '#/components/schemas/ResponseWebSearchCallInProgressEvent'
        - $ref: '#/components/schemas/ResponseWebSearchCallSearchingEvent'
      discriminator:
        propertyName: type
    ResponseTextAnnotationDeltaEvent:
      description: Emitted when a text annotation is added.
      properties:
        annotation:
          $ref: '#/components/schemas/Annotation'
        annotation_index:
          description: "The index of the annotation that was added.\n"
          type: integer
        content_index:
          description: "The index of the content part that the text annotation was added to.\n"
          type: integer
        item_id:
          description: "The ID of the output item that the text annotation was added to.\n"
          type: string
        output_index:
          description: "The index of the output item that the text annotation was added to.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.output_text.annotation.added`.\n"
          enum:
            - response.output_text.annotation.added
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - output_index
        - content_index
        - annotation_index
        - annotation
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_text.annotation.added\",\n  \"item_id\": \"msg_abc123\",\n  \"output_index\": 1,\n  \"content_index\": 0,\n  \"annotation_index\": 0,\n  \"annotation\": {\n    \"type\": \"file_citation\",\n    \"index\": 390,\n    \"file_id\": \"file-4wDz5b167pAf72nx1h9eiN\",\n    \"filename\": \"dragons.pdf\"\n  }\n}\n"
        group: responses
        name: response.output_text.annotation.added
    ResponseTextDeltaEvent:
      description: Emitted when there is an additional text delta.
      properties:
        content_index:
          description: "The index of the content part that the text delta was added to.\n"
          type: integer
        delta:
          description: "The text delta that was added.\n"
          type: string
        item_id:
          description: "The ID of the output item that the text delta was added to.\n"
          type: string
        output_index:
          description: "The index of the output item that the text delta was added to.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.output_text.delta`.\n"
          enum:
            - response.output_text.delta
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - output_index
        - content_index
        - delta
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_text.delta\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"delta\": \"In\"\n}\n"
        group: responses
        name: response.output_text.delta
    ResponseTextDoneEvent:
      description: Emitted when text content is finalized.
      properties:
        content_index:
          description: "The index of the content part that the text content is finalized.\n"
          type: integer
        item_id:
          description: "The ID of the output item that the text content is finalized.\n"
          type: string
        output_index:
          description: "The index of the output item that the text content is finalized.\n"
          type: integer
        text:
          description: "The text content that is finalized.\n"
          type: string
        type:
          description: "The type of the event. Always `response.output_text.done`.\n"
          enum:
            - response.output_text.done
          type: string
          x-stainless-const: true
      required:
        - type
        - item_id
        - output_index
        - content_index
        - text
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.output_text.done\",\n  \"item_id\": \"msg_123\",\n  \"output_index\": 0,\n  \"content_index\": 0,\n  \"text\": \"In a shimmering forest under a sky full of stars, a lonely unicorn named Lila discovered a hidden pond that glowed with moonlight. Every night, she would leave sparkling, magical flowers by the water's edge, hoping to share her beauty with others. One enchanting evening, she woke to find a group of friendly animals gathered around, eager to be friends and share in her magic.\"\n}\n"
        group: responses
        name: response.output_text.done
    ResponseUsage:
      description: "Represents token usage details including input tokens, output tokens,\na breakdown of output tokens, and the total tokens used.\n"
      properties:
        input_tokens:
          description: The number of input tokens.
          type: integer
        output_tokens:
          description: The number of output tokens.
          type: integer
        output_tokens_details:
          description: A detailed breakdown of the output tokens.
          properties:
            reasoning_tokens:
              description: The number of reasoning tokens.
              type: integer
          required:
            - reasoning_tokens
          type: object
        total_tokens:
          description: The total number of tokens used.
          type: integer
      required:
        - input_tokens
        - output_tokens
        - output_tokens_details
        - total_tokens
      type: object
    ResponseWebSearchCallCompletedEvent:
      description: Emitted when a web search call is completed.
      properties:
        item_id:
          description: "Unique ID for the output item associated with the web search call.\n"
          type: string
        output_index:
          description: "The index of the output item that the web search call is associated with.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.web_search_call.completed`.\n"
          enum:
            - response.web_search_call.completed
          type: string
          x-stainless-const: true
      required:
        - type
        - output_index
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.web_search_call.completed\",\n  \"output_index\": 0,\n  \"item_id\": \"ws_123\",\n}\n"
        group: responses
        name: response.web_search_call.completed
    ResponseWebSearchCallInProgressEvent:
      description: Emitted when a web search call is initiated.
      properties:
        item_id:
          description: "Unique ID for the output item associated with the web search call.\n"
          type: string
        output_index:
          description: "The index of the output item that the web search call is associated with.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.web_search_call.in_progress`.\n"
          enum:
            - response.web_search_call.in_progress
          type: string
          x-stainless-const: true
      required:
        - type
        - output_index
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.web_search_call.in_progress\",\n  \"output_index\": 0,\n  \"item_id\": \"ws_123\",\n}\n"
        group: responses
        name: response.web_search_call.in_progress
    ResponseWebSearchCallSearchingEvent:
      description: Emitted when a web search call is executing.
      properties:
        item_id:
          description: "Unique ID for the output item associated with the web search call.\n"
          type: string
        output_index:
          description: "The index of the output item that the web search call is associated with.\n"
          type: integer
        type:
          description: "The type of the event. Always `response.web_search_call.searching`.\n"
          enum:
            - response.web_search_call.searching
          type: string
          x-stainless-const: true
      required:
        - type
        - output_index
        - item_id
      type: object
      x-oaiMeta:
        example: "{\n  \"type\": \"response.web_search_call.searching\",\n  \"output_index\": 0,\n  \"item_id\": \"ws_123\",\n}\n"
        group: responses
        name: response.web_search_call.searching
    RunCompletionUsage:
      description: Usage statistics related to the run. This value will be `null` if the run is not in a terminal state (i.e. `in_progress`, `queued`, etc.).
      nullable: true
      properties:
        completion_tokens:
          description: Number of completion tokens used over the course of the run.
          type: integer
        prompt_tokens:
          description: Number of prompt tokens used over the course of the run.
          type: integer
        total_tokens:
          description: Total number of tokens used (prompt + completion).
          type: integer
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
    RunObject:
      description: Represents an execution run on a [thread](/docs/api-reference/threads).
      properties:
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) used for execution of this run.
          type: string
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run was cancelled.
          nullable: true
          type: integer
        completed_at:
          description: The Unix timestamp (in seconds) for when the run was completed.
          nullable: true
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the run was created.
          type: integer
        expires_at:
          description: The Unix timestamp (in seconds) for when the run will expire.
          nullable: true
          type: integer
        failed_at:
          description: The Unix timestamp (in seconds) for when the run failed.
          nullable: true
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        incomplete_details:
          description: Details on why the run is incomplete. Will be `null` if the run is not incomplete.
          nullable: true
          properties:
            reason:
              description: The reason why the run is incomplete. This will point to which specific token limit was reached over the course of the run.
              enum:
                - max_completion_tokens
                - max_prompt_tokens
              type: string
          type: object
        instructions:
          description: The instructions that the [assistant](/docs/api-reference/assistants) used for this run.
          type: string
        last_error:
          description: The last error associated with this run. Will be `null` if there are no errors.
          nullable: true
          properties:
            code:
              description: One of `server_error`, `rate_limit_exceeded`, or `invalid_prompt`.
              enum:
                - server_error
                - rate_limit_exceeded
                - invalid_prompt
              type: string
            message:
              description: A human-readable description of the error.
              type: string
          required:
            - code
            - message
          type: object
        max_completion_tokens:
          description: "The maximum number of completion tokens specified to have been used over the course of the run.\n"
          minimum: 256
          nullable: true
          type: integer
        max_prompt_tokens:
          description: "The maximum number of prompt tokens specified to have been used over the course of the run.\n"
          minimum: 256
          nullable: true
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        model:
          description: The model that the [assistant](/docs/api-reference/assistants) used for this run.
          type: string
        object:
          description: The object type, which is always `thread.run`.
          enum:
            - thread.run
          type: string
          x-stainless-const: true
        parallel_tool_calls:
          $ref: '#/components/schemas/ParallelToolCalls'
        required_action:
          description: Details on the action required to continue the run. Will be `null` if no action is required.
          nullable: true
          properties:
            submit_tool_outputs:
              description: Details on the tool outputs needed for this run to continue.
              properties:
                tool_calls:
                  description: A list of the relevant tool calls.
                  items:
                    $ref: '#/components/schemas/RunToolCallObject'
                  type: array
              required:
                - tool_calls
              type: object
            type:
              description: For now, this is always `submit_tool_outputs`.
              enum:
                - submit_tool_outputs
              type: string
              x-stainless-const: true
          required:
            - type
            - submit_tool_outputs
          type: object
        response_format:
          $ref: '#/components/schemas/AssistantsApiResponseFormatOption'
          nullable: true
        started_at:
          description: The Unix timestamp (in seconds) for when the run was started.
          nullable: true
          type: integer
        status:
          description: The status of the run, which can be either `queued`, `in_progress`, `requires_action`, `cancelling`, `cancelled`, `failed`, `completed`, `incomplete`, or `expired`.
          enum:
            - queued
            - in_progress
            - requires_action
            - cancelling
            - cancelled
            - failed
            - completed
            - incomplete
            - expired
          type: string
        temperature:
          description: The sampling temperature used for this run. If not set, defaults to 1.
          nullable: true
          type: number
        thread_id:
          description: The ID of the [thread](/docs/api-reference/threads) that was executed on as a part of this run.
          type: string
        tool_choice:
          $ref: '#/components/schemas/AssistantsApiToolChoiceOption'
        tools:
          default: []
          description: The list of tools that the [assistant](/docs/api-reference/assistants) used for this run.
          items:
            oneOf:
              - $ref: '#/components/schemas/AssistantToolsCode'
              - $ref: '#/components/schemas/AssistantToolsFileSearch'
              - $ref: '#/components/schemas/AssistantToolsFunction'
            x-oaiExpandable: true
          maxItems: 20
          type: array
        top_p:
          description: The nucleus sampling value used for this run. If not set, defaults to 1.
          nullable: true
          type: number
        truncation_strategy:
          $ref: '#/components/schemas/TruncationObject'
        usage:
          $ref: '#/components/schemas/RunCompletionUsage'
      required:
        - id
        - object
        - created_at
        - thread_id
        - assistant_id
        - status
        - required_action
        - last_error
        - expires_at
        - started_at
        - cancelled_at
        - failed_at
        - completed_at
        - model
        - instructions
        - tools
        - metadata
        - usage
        - incomplete_details
        - max_prompt_tokens
        - max_completion_tokens
        - truncation_strategy
        - tool_choice
        - parallel_tool_calls
        - response_format
      title: A run on a thread
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"run_abc123\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1698107661,\n  \"assistant_id\": \"asst_abc123\",\n  \"thread_id\": \"thread_abc123\",\n  \"status\": \"completed\",\n  \"started_at\": 1699073476,\n  \"expires_at\": null,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": 1699073498,\n  \"last_error\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": null,\n  \"tools\": [{\"type\": \"file_search\"}, {\"type\": \"code_interpreter\"}],\n  \"metadata\": {},\n  \"incomplete_details\": null,\n  \"usage\": {\n    \"prompt_tokens\": 123,\n    \"completion_tokens\": 456,\n    \"total_tokens\": 579\n  },\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_prompt_tokens\": 1000,\n  \"max_completion_tokens\": 1000,\n  \"truncation_strategy\": {\n    \"type\": \"auto\",\n    \"last_messages\": null\n  },\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n"
        name: The run object
    RunStepCompletionUsage:
      description: Usage statistics related to the run step. This value will be `null` while the run step's status is `in_progress`.
      nullable: true
      properties:
        completion_tokens:
          description: Number of completion tokens used over the course of the run step.
          type: integer
        prompt_tokens:
          description: Number of prompt tokens used over the course of the run step.
          type: integer
        total_tokens:
          description: Total number of tokens used (prompt + completion).
          type: integer
      required:
        - prompt_tokens
        - completion_tokens
        - total_tokens
      type: object
    RunStepDeltaObject:
      description: "Represents a run step delta i.e. any changed fields on a run step during streaming.\n"
      properties:
        delta:
          description: The delta containing the fields that have changed on the run step.
          properties:
            step_details:
              description: The details of the run step.
              oneOf:
                - $ref: '#/components/schemas/RunStepDeltaStepDetailsMessageCreationObject'
                - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsObject'
              type: object
              x-oaiExpandable: true
          type: object
        id:
          description: The identifier of the run step, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `thread.run.step.delta`.
          enum:
            - thread.run.step.delta
          type: string
          x-stainless-const: true
      required:
        - id
        - object
        - delta
      title: Run step delta object
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"step_123\",\n  \"object\": \"thread.run.step.delta\",\n  \"delta\": {\n    \"step_details\": {\n      \"type\": \"tool_calls\",\n      \"tool_calls\": [\n        {\n          \"index\": 0,\n          \"id\": \"call_123\",\n          \"type\": \"code_interpreter\",\n          \"code_interpreter\": { \"input\": \"\", \"outputs\": [] }\n        }\n      ]\n    }\n  }\n}\n"
        name: The run step delta object
    RunStepDeltaStepDetailsMessageCreationObject:
      description: Details of the message creation by the run step.
      properties:
        message_creation:
          properties:
            message_id:
              description: The ID of the message that was created by this run step.
              type: string
          type: object
        type:
          description: Always `message_creation`.
          enum:
            - message_creation
          type: string
          x-stainless-const: true
      required:
        - type
      title: Message creation
      type: object
    RunStepDeltaStepDetailsToolCallsCodeObject:
      description: Details of the Code Interpreter tool call the run step was involved in.
      properties:
        code_interpreter:
          description: The Code Interpreter tool call definition.
          properties:
            input:
              description: The input to the Code Interpreter tool call.
              type: string
            outputs:
              description: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
              items:
                oneOf:
                  - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject'
                  - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeOutputImageObject'
                type: object
                x-oaiExpandable: true
              type: array
          type: object
        id:
          description: The ID of the tool call.
          type: string
        index:
          description: The index of the tool call in the tool calls array.
          type: integer
        type:
          description: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
          enum:
            - code_interpreter
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: Code interpreter tool call
      type: object
    RunStepDeltaStepDetailsToolCallsCodeOutputImageObject:
      properties:
        image:
          properties:
            file_id:
              description: The [file](/docs/api-reference/files) ID of the image.
              type: string
          type: object
        index:
          description: The index of the output in the outputs array.
          type: integer
        type:
          description: Always `image`.
          enum:
            - image
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: Code interpreter image output
      type: object
    RunStepDeltaStepDetailsToolCallsCodeOutputLogsObject:
      description: Text output from the Code Interpreter tool call as part of a run step.
      properties:
        index:
          description: The index of the output in the outputs array.
          type: integer
        logs:
          description: The text output from the Code Interpreter tool call.
          type: string
        type:
          description: Always `logs`.
          enum:
            - logs
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: Code interpreter log output
      type: object
    RunStepDeltaStepDetailsToolCallsFileSearchObject:
      properties:
        file_search:
          description: For now, this is always going to be an empty object.
          type: object
          x-oaiTypeLabel: map
        id:
          description: The ID of the tool call object.
          type: string
        index:
          description: The index of the tool call in the tool calls array.
          type: integer
        type:
          description: The type of tool call. This is always going to be `file_search` for this type of tool call.
          enum:
            - file_search
          type: string
          x-stainless-const: true
      required:
        - index
        - type
        - file_search
      title: File search tool call
      type: object
    RunStepDeltaStepDetailsToolCallsFunctionObject:
      properties:
        function:
          description: The definition of the function that was called.
          properties:
            arguments:
              description: The arguments passed to the function.
              type: string
            name:
              description: The name of the function.
              type: string
            output:
              description: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
              nullable: true
              type: string
          type: object
        id:
          description: The ID of the tool call object.
          type: string
        index:
          description: The index of the tool call in the tool calls array.
          type: integer
        type:
          description: The type of tool call. This is always going to be `function` for this type of tool call.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - index
        - type
      title: Function tool call
      type: object
    RunStepDeltaStepDetailsToolCallsObject:
      description: Details of the tool call.
      properties:
        tool_calls:
          description: "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n"
          items:
            oneOf:
              - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsCodeObject'
              - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFileSearchObject'
              - $ref: '#/components/schemas/RunStepDeltaStepDetailsToolCallsFunctionObject'
            x-oaiExpandable: true
          type: array
        type:
          description: Always `tool_calls`.
          enum:
            - tool_calls
          type: string
          x-stainless-const: true
      required:
        - type
      title: Tool calls
      type: object
    RunStepDetailsMessageCreationObject:
      description: Details of the message creation by the run step.
      properties:
        message_creation:
          properties:
            message_id:
              description: The ID of the message that was created by this run step.
              type: string
          required:
            - message_id
          type: object
        type:
          description: Always `message_creation`.
          enum:
            - message_creation
          type: string
          x-stainless-const: true
      required:
        - type
        - message_creation
      title: Message creation
      type: object
    RunStepDetailsToolCallsCodeObject:
      description: Details of the Code Interpreter tool call the run step was involved in.
      properties:
        code_interpreter:
          description: The Code Interpreter tool call definition.
          properties:
            input:
              description: The input to the Code Interpreter tool call.
              type: string
            outputs:
              description: The outputs from the Code Interpreter tool call. Code Interpreter can output one or more items, including text (`logs`) or images (`image`). Each of these are represented by a different object type.
              items:
                oneOf:
                  - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputLogsObject'
                  - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeOutputImageObject'
                type: object
                x-oaiExpandable: true
              type: array
          required:
            - input
            - outputs
          type: object
        id:
          description: The ID of the tool call.
          type: string
        type:
          description: The type of tool call. This is always going to be `code_interpreter` for this type of tool call.
          enum:
            - code_interpreter
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - code_interpreter
      title: Code Interpreter tool call
      type: object
    RunStepDetailsToolCallsCodeOutputImageObject:
      properties:
        image:
          properties:
            file_id:
              description: The [file](/docs/api-reference/files) ID of the image.
              type: string
          required:
            - file_id
          type: object
        type:
          description: Always `image`.
          enum:
            - image
          type: string
          x-stainless-const: true
      required:
        - type
        - image
      title: Code Interpreter image output
      type: object
    RunStepDetailsToolCallsCodeOutputLogsObject:
      description: Text output from the Code Interpreter tool call as part of a run step.
      properties:
        logs:
          description: The text output from the Code Interpreter tool call.
          type: string
        type:
          description: Always `logs`.
          enum:
            - logs
          type: string
          x-stainless-const: true
      required:
        - type
        - logs
      title: Code Interpreter log output
      type: object
    RunStepDetailsToolCallsFileSearchObject:
      properties:
        file_search:
          description: For now, this is always going to be an empty object.
          properties:
            ranking_options:
              $ref: '#/components/schemas/RunStepDetailsToolCallsFileSearchRankingOptionsObject'
            results:
              description: The results of the file search.
              items:
                $ref: '#/components/schemas/RunStepDetailsToolCallsFileSearchResultObject'
              type: array
          type: object
          x-oaiTypeLabel: map
        id:
          description: The ID of the tool call object.
          type: string
        type:
          description: The type of tool call. This is always going to be `file_search` for this type of tool call.
          enum:
            - file_search
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - file_search
      title: File search tool call
      type: object
    RunStepDetailsToolCallsFileSearchRankingOptionsObject:
      description: The ranking options for the file search.
      properties:
        ranker:
          $ref: '#/components/schemas/FileSearchRanker'
        score_threshold:
          description: The score threshold for the file search. All values must be a floating point number between 0 and 1.
          maximum: 1
          minimum: 0
          type: number
      required:
        - ranker
        - score_threshold
      title: File search tool call ranking options
      type: object
    RunStepDetailsToolCallsFileSearchResultObject:
      description: A result instance of the file search.
      properties:
        content:
          description: The content of the result that was found. The content is only included if requested via the include query parameter.
          items:
            properties:
              text:
                description: The text content of the file.
                type: string
              type:
                description: The type of the content.
                enum:
                  - text
                type: string
                x-stainless-const: true
            type: object
          type: array
        file_id:
          description: The ID of the file that result was found in.
          type: string
        file_name:
          description: The name of the file that result was found in.
          type: string
        score:
          description: The score of the result. All values must be a floating point number between 0 and 1.
          maximum: 1
          minimum: 0
          type: number
      required:
        - file_id
        - file_name
        - score
      title: File search tool call result
      type: object
      x-oaiTypeLabel: map
    RunStepDetailsToolCallsFunctionObject:
      properties:
        function:
          description: The definition of the function that was called.
          properties:
            arguments:
              description: The arguments passed to the function.
              type: string
            name:
              description: The name of the function.
              type: string
            output:
              description: The output of the function. This will be `null` if the outputs have not been [submitted](/docs/api-reference/runs/submitToolOutputs) yet.
              nullable: true
              type: string
          required:
            - name
            - arguments
            - output
          type: object
        id:
          description: The ID of the tool call object.
          type: string
        type:
          description: The type of tool call. This is always going to be `function` for this type of tool call.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - function
      title: Function tool call
      type: object
    RunStepDetailsToolCallsObject:
      description: Details of the tool call.
      properties:
        tool_calls:
          description: "An array of tool calls the run step was involved in. These can be associated with one of three types of tools: `code_interpreter`, `file_search`, or `function`.\n"
          items:
            oneOf:
              - $ref: '#/components/schemas/RunStepDetailsToolCallsCodeObject'
              - $ref: '#/components/schemas/RunStepDetailsToolCallsFileSearchObject'
              - $ref: '#/components/schemas/RunStepDetailsToolCallsFunctionObject'
            x-oaiExpandable: true
          type: array
        type:
          description: Always `tool_calls`.
          enum:
            - tool_calls
          type: string
          x-stainless-const: true
      required:
        - type
        - tool_calls
      title: Tool calls
      type: object
    RunStepObject:
      description: "Represents a step in execution of a run.\n"
      properties:
        assistant_id:
          description: The ID of the [assistant](/docs/api-reference/assistants) associated with the run step.
          type: string
        cancelled_at:
          description: The Unix timestamp (in seconds) for when the run step was cancelled.
          nullable: true
          type: integer
        completed_at:
          description: The Unix timestamp (in seconds) for when the run step completed.
          nullable: true
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the run step was created.
          type: integer
        expired_at:
          description: The Unix timestamp (in seconds) for when the run step expired. A step is considered expired if the parent run is expired.
          nullable: true
          type: integer
        failed_at:
          description: The Unix timestamp (in seconds) for when the run step failed.
          nullable: true
          type: integer
        id:
          description: The identifier of the run step, which can be referenced in API endpoints.
          type: string
        last_error:
          description: The last error associated with this run step. Will be `null` if there are no errors.
          nullable: true
          properties:
            code:
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
                - server_error
                - rate_limit_exceeded
              type: string
            message:
              description: A human-readable description of the error.
              type: string
          required:
            - code
            - message
          type: object
        metadata:
          $ref: '#/components/schemas/Metadata'
        object:
          description: The object type, which is always `thread.run.step`.
          enum:
            - thread.run.step
          type: string
          x-stainless-const: true
        run_id:
          description: The ID of the [run](/docs/api-reference/runs) that this run step is a part of.
          type: string
        status:
          description: The status of the run step, which can be either `in_progress`, `cancelled`, `failed`, `completed`, or `expired`.
          enum:
            - in_progress
            - cancelled
            - failed
            - completed
            - expired
          type: string
        step_details:
          description: The details of the run step.
          oneOf:
            - $ref: '#/components/schemas/RunStepDetailsMessageCreationObject'
            - $ref: '#/components/schemas/RunStepDetailsToolCallsObject'
          type: object
          x-oaiExpandable: true
        thread_id:
          description: The ID of the [thread](/docs/api-reference/threads) that was run.
          type: string
        type:
          description: The type of run step, which can be either `message_creation` or `tool_calls`.
          enum:
            - message_creation
            - tool_calls
          type: string
        usage:
          $ref: '#/components/schemas/RunStepCompletionUsage'
      required:
        - id
        - object
        - created_at
        - assistant_id
        - thread_id
        - run_id
        - type
        - status
        - step_details
        - last_error
        - expired_at
        - cancelled_at
        - failed_at
        - completed_at
        - metadata
        - usage
      title: Run steps
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"step_abc123\",\n  \"object\": \"thread.run.step\",\n  \"created_at\": 1699063291,\n  \"run_id\": \"run_abc123\",\n  \"assistant_id\": \"asst_abc123\",\n  \"thread_id\": \"thread_abc123\",\n  \"type\": \"message_creation\",\n  \"status\": \"completed\",\n  \"cancelled_at\": null,\n  \"completed_at\": 1699063291,\n  \"expired_at\": null,\n  \"failed_at\": null,\n  \"last_error\": null,\n  \"step_details\": {\n    \"type\": \"message_creation\",\n    \"message_creation\": {\n      \"message_id\": \"msg_abc123\"\n    }\n  },\n  \"usage\": {\n    \"prompt_tokens\": 123,\n    \"completion_tokens\": 456,\n    \"total_tokens\": 579\n  }\n}\n"
        name: The run step object
    RunStepStreamEvent:
      oneOf:
        - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object) is created.
          properties:
            data:
              $ref: '#/components/schemas/RunStepObject'
            event:
              enum:
                - thread.run.step.created
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
        - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object) moves to an `in_progress` state.
          properties:
            data:
              $ref: '#/components/schemas/RunStepObject'
            event:
              enum:
                - thread.run.step.in_progress
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
        - description: Occurs when parts of a [run step](/docs/api-reference/run-steps/step-object) are being streamed.
          properties:
            data:
              $ref: '#/components/schemas/RunStepDeltaObject'
            event:
              enum:
                - thread.run.step.delta
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run step delta](/docs/api-reference/assistants-streaming/run-step-delta-object)'
        - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object) is completed.
          properties:
            data:
              $ref: '#/components/schemas/RunStepObject'
            event:
              enum:
                - thread.run.step.completed
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
        - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object) fails.
          properties:
            data:
              $ref: '#/components/schemas/RunStepObject'
            event:
              enum:
                - thread.run.step.failed
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
        - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object) is cancelled.
          properties:
            data:
              $ref: '#/components/schemas/RunStepObject'
            event:
              enum:
                - thread.run.step.cancelled
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
        - description: Occurs when a [run step](/docs/api-reference/run-steps/step-object) expires.
          properties:
            data:
              $ref: '#/components/schemas/RunStepObject'
            event:
              enum:
                - thread.run.step.expired
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run step](/docs/api-reference/run-steps/step-object)'
    RunStreamEvent:
      oneOf:
        - description: Occurs when a new [run](/docs/api-reference/runs/object) is created.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.created
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
        - description: Occurs when a [run](/docs/api-reference/runs/object) moves to a `queued` status.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.queued
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
        - description: Occurs when a [run](/docs/api-reference/runs/object) moves to an `in_progress` status.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.in_progress
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
        - description: Occurs when a [run](/docs/api-reference/runs/object) moves to a `requires_action` status.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.requires_action
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
        - description: Occurs when a [run](/docs/api-reference/runs/object) is completed.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.completed
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
        - description: Occurs when a [run](/docs/api-reference/runs/object) ends with status `incomplete`.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.incomplete
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
        - description: Occurs when a [run](/docs/api-reference/runs/object) fails.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.failed
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
        - description: Occurs when a [run](/docs/api-reference/runs/object) moves to a `cancelling` status.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.cancelling
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
        - description: Occurs when a [run](/docs/api-reference/runs/object) is cancelled.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.cancelled
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
        - description: Occurs when a [run](/docs/api-reference/runs/object) expires.
          properties:
            data:
              $ref: '#/components/schemas/RunObject'
            event:
              enum:
                - thread.run.expired
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [run](/docs/api-reference/runs/object)'
    RunToolCallObject:
      description: Tool call objects
      properties:
        function:
          description: The function definition.
          properties:
            arguments:
              description: The arguments that the model expects you to pass to the function.
              type: string
            name:
              description: The name of the function.
              type: string
          required:
            - name
            - arguments
          type: object
        id:
          description: The ID of the tool call. This ID must be referenced when you submit the tool outputs in using the [Submit tool outputs to run](/docs/api-reference/runs/submitToolOutputs) endpoint.
          type: string
        type:
          description: The type of tool call the output is required for. For now, this is always `function`.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - function
      type: object
    Screenshot:
      description: "A screenshot action.\n"
      properties:
        type:
          default: screenshot
          description: "Specifies the event type. For a screenshot action, this property is \nalways set to `screenshot`.\n"
          enum:
            - screenshot
          type: string
          x-stainless-const: true
      required:
        - type
      title: Screenshot
      type: object
    Scroll:
      description: "A scroll action.\n"
      properties:
        scroll_x:
          description: "The horizontal scroll distance.\n"
          type: integer
        scroll_y:
          description: "The vertical scroll distance.\n"
          type: integer
        type:
          default: scroll
          description: "Specifies the event type. For a scroll action, this property is \nalways set to `scroll`.\n"
          enum:
            - scroll
          type: string
          x-stainless-const: true
        x:
          description: "The x-coordinate where the scroll occurred.\n"
          type: integer
        y:
          description: "The y-coordinate where the scroll occurred.\n"
          type: integer
      required:
        - type
        - x
        - y
        - scroll_x
        - scroll_y
      title: Scroll
      type: object
    StaticChunkingStrategy:
      additionalProperties: false
      properties:
        chunk_overlap_tokens:
          description: "The number of tokens that overlap between chunks. The default value is `400`.\n\nNote that the overlap must not exceed half of `max_chunk_size_tokens`.\n"
          type: integer
        max_chunk_size_tokens:
          description: The maximum number of tokens in each chunk. The default value is `800`. The minimum value is `100` and the maximum value is `4096`.
          maximum: 4096
          minimum: 100
          type: integer
      required:
        - max_chunk_size_tokens
        - chunk_overlap_tokens
      type: object
    StaticChunkingStrategyRequestParam:
      additionalProperties: false
      description: Customize your own chunking strategy by setting chunk size and chunk overlap.
      properties:
        static:
          $ref: '#/components/schemas/StaticChunkingStrategy'
        type:
          description: Always `static`.
          enum:
            - static
          type: string
          x-stainless-const: true
      required:
        - type
        - static
      title: Static Chunking Strategy
      type: object
    StaticChunkingStrategyResponseParam:
      additionalProperties: false
      properties:
        static:
          $ref: '#/components/schemas/StaticChunkingStrategy'
        type:
          description: Always `static`.
          enum:
            - static
          type: string
          x-stainless-const: true
      required:
        - type
        - static
      title: Static Chunking Strategy
      type: object
    StopConfiguration:
      default: null
      description: "Up to 4 sequences where the API will stop generating further tokens. The\nreturned text will not contain the stop sequence.\n"
      nullable: true
      oneOf:
        - default: <|endoftext|>
          example: "\n"
          nullable: true
          type: string
        - items:
            example: '["\n"]'
            type: string
          maxItems: 4
          minItems: 1
          type: array
    SubmitToolOutputsRunRequest:
      additionalProperties: false
      properties:
        stream:
          description: "If `true`, returns a stream of events that happen during the Run as server-sent events, terminating when the Run enters a terminal state with a `data: [DONE]` message.\n"
          nullable: true
          type: boolean
        tool_outputs:
          description: A list of tools for which the outputs are being submitted.
          items:
            properties:
              output:
                description: The output of the tool call to be submitted to continue the run.
                type: string
              tool_call_id:
                description: The ID of the tool call in the `required_action` object within the run object the output is being submitted for.
                type: string
            type: object
          type: array
      required:
        - tool_outputs
      type: object
    TextResponseFormatConfiguration:
      description: "An object specifying the format that the model must output.\n\nConfiguring `{ \"type\": \"json_schema\" }` enables Structured Outputs, \nwhich ensures the model will match your supplied JSON schema. Learn more in the \n[Structured Outputs guide](/docs/guides/structured-outputs).\n\nThe default format is `{ \"type\": \"text\" }` with no additional options.\n\n**Not recommended for gpt-4o and newer models:**\n\nSetting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\nensures the message the model generates is valid JSON. Using `json_schema`\nis preferred for models that support it.\n"
      oneOf:
        - $ref: '#/components/schemas/ResponseFormatText'
        - $ref: '#/components/schemas/TextResponseFormatJsonSchema'
        - $ref: '#/components/schemas/ResponseFormatJsonObject'
      x-oaiExpandable: true
    TextResponseFormatJsonSchema:
      description: "JSON Schema response format. Used to generate structured JSON responses.\nLearn more about [Structured Outputs](/docs/guides/structured-outputs).\n"
      properties:
        description:
          description: "A description of what the response format is for, used by the model to\ndetermine how to respond in the format.\n"
          type: string
        name:
          description: "The name of the response format. Must be a-z, A-Z, 0-9, or contain\nunderscores and dashes, with a maximum length of 64.\n"
          type: string
        schema:
          $ref: '#/components/schemas/ResponseFormatJsonSchemaSchema'
        strict:
          default: false
          description: "Whether to enable strict schema adherence when generating the output.\nIf set to true, the model will always follow the exact schema defined\nin the `schema` field. Only a subset of JSON Schema is supported when\n`strict` is `true`. To learn more, read the [Structured Outputs\nguide](/docs/guides/structured-outputs).\n"
          nullable: true
          type: boolean
        type:
          description: The type of response format being defined. Always `json_schema`.
          enum:
            - json_schema
          type: string
          x-stainless-const: true
      required:
        - type
        - schema
      title: JSON schema
      type: object
    ThreadObject:
      description: Represents a thread that contains [messages](/docs/api-reference/messages).
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the thread was created.
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        metadata:
          $ref: '#/components/schemas/Metadata'
        object:
          description: The object type, which is always `thread`.
          enum:
            - thread
          type: string
          x-stainless-const: true
        tool_resources:
          description: "A set of resources that are made available to the assistant's tools in this thread. The resources are specific to the type of tool. For example, the `code_interpreter` tool requires a list of file IDs, while the `file_search` tool requires a list of vector store IDs.\n"
          nullable: true
          properties:
            code_interpreter:
              properties:
                file_ids:
                  default: []
                  description: "A list of [file](/docs/api-reference/files) IDs made available to the `code_interpreter` tool. There can be a maximum of 20 files associated with the tool.\n"
                  items:
                    type: string
                  maxItems: 20
                  type: array
              type: object
            file_search:
              properties:
                vector_store_ids:
                  description: "The [vector store](/docs/api-reference/vector-stores/object) attached to this thread. There can be a maximum of 1 vector store attached to the thread.\n"
                  items:
                    type: string
                  maxItems: 1
                  type: array
              type: object
          type: object
      required:
        - id
        - object
        - created_at
        - tool_resources
        - metadata
      title: Thread
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"thread_abc123\",\n  \"object\": \"thread\",\n  \"created_at\": 1698107661,\n  \"metadata\": {}\n}\n"
        name: The thread object
    ThreadStreamEvent:
      oneOf:
        - description: Occurs when a new [thread](/docs/api-reference/threads/object) is created.
          properties:
            data:
              $ref: '#/components/schemas/ThreadObject'
            enabled:
              description: Whether to enable input audio transcription.
              type: boolean
            event:
              enum:
                - thread.created
              type: string
              x-stainless-const: true
          required:
            - event
            - data
          type: object
          x-oaiMeta:
            dataDescription: '`data` is a [thread](/docs/api-reference/threads/object)'
    Tool:
      oneOf:
        - $ref: '#/components/schemas/FileSearchTool'
        - $ref: '#/components/schemas/FunctionTool'
        - $ref: '#/components/schemas/ComputerTool'
        - $ref: '#/components/schemas/WebSearchTool'
      x-oaiExpandable: true
    ToolChoiceFunction:
      description: "Use this option to force the model to call a specific function.\n"
      properties:
        name:
          description: The name of the function to call.
          type: string
        type:
          description: For function calling, the type is always `function`.
          enum:
            - function
          type: string
          x-stainless-const: true
      required:
        - type
        - name
      title: Function tool
      type: object
    ToolChoiceOptions:
      description: "Controls which (if any) tool is called by the model.\n\n`none` means the model will not call any tool and instead generates a message.\n\n`auto` means the model can pick between generating a message or calling one or\nmore tools.\n\n`required` means the model must call one or more tools.\n"
      enum:
        - none
        - auto
        - required
      title: Tool choice mode
      type: string
    ToolChoiceTypes:
      description: "Indicates that the model should use a built-in tool to generate a response.\n[Learn more about built-in tools](/docs/guides/tools).\n"
      properties:
        type:
          description: "The type of hosted tool the model should to use. Learn more about\n[built-in tools](/docs/guides/tools).\n\nAllowed values are:\n- `file_search`\n- `web_search_preview`\n- `computer_use_preview`\n"
          enum:
            - file_search
            - web_search_preview
            - computer_use_preview
            - web_search_preview_2025_03_11
          type: string
      required:
        - type
      title: Hosted tool
      type: object
    TranscriptionSegment:
      properties:
        avg_logprob:
          description: Average logprob of the segment. If the value is lower than -1, consider the logprobs failed.
          format: float
          type: number
        compression_ratio:
          description: Compression ratio of the segment. If the value is greater than 2.4, consider the compression failed.
          format: float
          type: number
        end:
          description: End time of the segment in seconds.
          format: float
          type: number
        id:
          description: Unique identifier of the segment.
          type: integer
        no_speech_prob:
          description: Probability of no speech in the segment. If the value is higher than 1.0 and the `avg_logprob` is below -1, consider this segment silent.
          format: float
          type: number
        seek:
          description: Seek offset of the segment.
          type: integer
        start:
          description: Start time of the segment in seconds.
          format: float
          type: number
        temperature:
          description: Temperature parameter used for generating the segment.
          format: float
          type: number
        text:
          description: Text content of the segment.
          type: string
        tokens:
          description: Array of token IDs for the text content.
          items:
            type: integer
          type: array
      required:
        - id
        - seek
        - start
        - end
        - text
        - tokens
        - temperature
        - avg_logprob
        - compression_ratio
        - no_speech_prob
      type: object
    TranscriptionWord:
      properties:
        end:
          description: End time of the word in seconds.
          format: float
          type: number
        start:
          description: Start time of the word in seconds.
          format: float
          type: number
        word:
          description: The text content of the word.
          type: string
      required:
        - word
        - start
        - end
      type: object
    TruncationObject:
      description: Controls for how a thread will be truncated prior to the run. Use this to control the intial context window of the run.
      properties:
        last_messages:
          description: The number of most recent messages from the thread when constructing the context for the run.
          minimum: 1
          nullable: true
          type: integer
        type:
          description: The truncation strategy to use for the thread. The default is `auto`. If set to `last_messages`, the thread will be truncated to the n most recent messages in the thread. When set to `auto`, messages in the middle of the thread will be dropped to fit the context length of the model, `max_prompt_tokens`.
          enum:
            - auto
            - last_messages
          type: string
      required:
        - type
      title: Thread Truncation Controls
      type: object
    Type:
      description: "An action to type in text.\n"
      properties:
        text:
          description: "The text to type.\n"
          type: string
        type:
          default: type
          description: "Specifies the event type. For a type action, this property is \nalways set to `type`.\n"
          enum:
            - type
          type: string
          x-stainless-const: true
      required:
        - type
        - text
      title: Type
      type: object
    UpdateVectorStoreFileAttributesRequest:
      additionalProperties: false
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
      required:
        - attributes
      type: object
      x-oaiMeta:
        name: Update vector store file attributes request
    UpdateVectorStoreRequest:
      additionalProperties: false
      properties:
        expires_after:
          $ref: '#/components/schemas/VectorStoreExpirationAfter'
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The name of the vector store.
          nullable: true
          type: string
      type: object
    Upload:
      description: "The Upload object can accept byte chunks in the form of Parts.\n"
      properties:
        bytes:
          description: The intended number of bytes to be uploaded.
          type: integer
        created_at:
          description: The Unix timestamp (in seconds) for when the Upload was created.
          type: integer
        expires_at:
          description: The Unix timestamp (in seconds) for when the Upload will expire.
          type: integer
        file:
          $ref: '#/components/schemas/OpenAIFile'
        filename:
          description: The name of the file to be uploaded.
          type: string
        id:
          description: The Upload unique identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always "upload".
          enum:
            - upload
          type: string
          x-stainless-const: true
        purpose:
          description: The intended purpose of the file. [Please refer here](/docs/api-reference/files/object#files/object-purpose) for acceptable values.
          type: string
        status:
          description: The status of the Upload.
          enum:
            - pending
            - completed
            - cancelled
            - expired
          type: string
      required:
        - bytes
        - created_at
        - expires_at
        - filename
        - id
        - purpose
        - status
      title: Upload
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"upload_abc123\",\n  \"object\": \"upload\",\n  \"bytes\": 2147483648,\n  \"created_at\": 1719184911,\n  \"filename\": \"training_examples.jsonl\",\n  \"purpose\": \"fine-tune\",\n  \"status\": \"completed\",\n  \"expires_at\": 1719127296,\n  \"file\": {\n    \"id\": \"file-xyz321\",\n    \"object\": \"file\",\n    \"bytes\": 2147483648,\n    \"created_at\": 1719186911,\n    \"filename\": \"training_examples.jsonl\",\n    \"purpose\": \"fine-tune\",\n  }\n}\n"
        name: The upload object
    UploadPart:
      description: "The upload Part represents a chunk of bytes we can add to an Upload object.\n"
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the Part was created.
          type: integer
        id:
          description: The upload Part unique identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `upload.part`.
          enum:
            - upload.part
          type: string
          x-stainless-const: true
        upload_id:
          description: The ID of the Upload object that this Part was added to.
          type: string
      required:
        - created_at
        - id
        - object
        - upload_id
      title: UploadPart
      type: object
      x-oaiMeta:
        example: "{\n    \"id\": \"part_def456\",\n    \"object\": \"upload.part\",\n    \"created_at\": 1719186911,\n    \"upload_id\": \"upload_abc123\"\n}\n"
        name: The upload part object
    UrlCitation:
      description: "A citation for a web resource used to generate a model response.\n"
      properties:
        end_index:
          description: "The index of the last character of the URL citation in the message.\n"
          type: integer
        start_index:
          description: "The index of the first character of the URL citation in the message.\n"
          type: integer
        title:
          description: "The title of the web resource.\n"
          type: string
        type:
          description: "The type of the URL citation. Always `url_citation`.\n"
          enum:
            - url_citation
          type: string
          x-stainless-const: true
        url:
          description: "The URL of the web resource.\n"
          type: string
      required:
        - url
        - title
        - type
        - start_index
        - end_index
      title: URL citation
      type: object
    UsageAudioSpeechesResult:
      description: The aggregated audio speeches usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
          nullable: true
          type: string
        characters:
          description: The number of characters processed.
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          type: integer
        object:
          enum:
            - organization.usage.audio_speeches.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
          nullable: true
          type: string
      required:
        - object
        - characters
        - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.audio_speeches.result\",\n    \"characters\": 45,\n    \"num_model_requests\": 1,\n    \"project_id\": \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"key_abc\",\n    \"model\": \"tts-1\"\n}\n"
        name: Audio speeches usage object
    UsageAudioTranscriptionsResult:
      description: The aggregated audio transcriptions usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
          nullable: true
          type: string
        model:
          description: When `group_by=model`, this field provides the model name of the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          type: integer
        object:
          enum:
            - organization.usage.audio_transcriptions.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
          nullable: true
          type: string
        seconds:
          description: The number of seconds processed.
          type: integer
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
          nullable: true
          type: string
      required:
        - object
        - seconds
        - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.audio_transcriptions.result\",\n    \"seconds\": 10,\n    \"num_model_requests\": 1,\n    \"project_id\": \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"key_abc\",\n    \"model\": \"tts-1\"\n}\n"
        name: Audio transcriptions usage object
    UsageCodeInterpreterSessionsResult:
      description: The aggregated code interpreter sessions usage details of the specific time bucket.
      properties:
        num_sessions:
          description: The number of code interpreter sessions.
          type: integer
        object:
          enum:
            - organization.usage.code_interpreter_sessions.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
          nullable: true
          type: string
      required:
        - object
        - sessions
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.code_interpreter_sessions.result\",\n    \"num_sessions\": 1,\n    \"project_id\": \"proj_abc\"\n}\n"
        name: Code interpreter sessions usage object
    UsageCompletionsResult:
      description: The aggregated completions usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
          nullable: true
          type: string
        batch:
          description: When `group_by=batch`, this field tells whether the grouped usage result is batch or not.
          nullable: true
          type: boolean
        input_audio_tokens:
          description: The aggregated number of audio input tokens used, including cached tokens.
          type: integer
        input_cached_tokens:
          description: The aggregated number of text input tokens that has been cached from previous requests. For customers subscribe to scale tier, this includes scale tier tokens.
          type: integer
        input_tokens:
          description: The aggregated number of text input tokens used, including cached tokens. For customers subscribe to scale tier, this includes scale tier tokens.
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          type: integer
        object:
          enum:
            - organization.usage.completions.result
          type: string
          x-stainless-const: true
        output_audio_tokens:
          description: The aggregated number of audio output tokens used.
          type: integer
        output_tokens:
          description: The aggregated number of text output tokens used. For customers subscribe to scale tier, this includes scale tier tokens.
          type: integer
        project_id:
          description: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
          nullable: true
          type: string
      required:
        - object
        - input_tokens
        - output_tokens
        - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.completions.result\",\n    \"input_tokens\": 5000,\n    \"output_tokens\": 1000,\n    \"input_cached_tokens\": 4000,\n    \"input_audio_tokens\": 300,\n    \"output_audio_tokens\": 200,\n    \"num_model_requests\": 5,\n    \"project_id\": \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"key_abc\",\n    \"model\": \"gpt-4o-mini-2024-07-18\",\n    \"batch\": false\n}\n"
        name: Completions usage object
    UsageEmbeddingsResult:
      description: The aggregated embeddings usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
          nullable: true
          type: string
        input_tokens:
          description: The aggregated number of input tokens used.
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          type: integer
        object:
          enum:
            - organization.usage.embeddings.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
          nullable: true
          type: string
      required:
        - object
        - input_tokens
        - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.embeddings.result\",\n    \"input_tokens\": 20,\n    \"num_model_requests\": 2,\n    \"project_id\": \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"key_abc\",\n    \"model\": \"text-embedding-ada-002-v2\"\n}\n"
        name: Embeddings usage object
    UsageImagesResult:
      description: The aggregated images usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
          nullable: true
          type: string
        images:
          description: The number of images processed.
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          type: integer
        object:
          enum:
            - organization.usage.images.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
          nullable: true
          type: string
        size:
          description: When `group_by=size`, this field provides the image size of the grouped usage result.
          nullable: true
          type: string
        source:
          description: When `group_by=source`, this field provides the source of the grouped usage result, possible values are `image.generation`, `image.edit`, `image.variation`.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
          nullable: true
          type: string
      required:
        - object
        - images
        - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.images.result\",\n    \"images\": 2,\n    \"num_model_requests\": 2,\n    \"size\": \"1024x1024\",\n    \"source\": \"image.generation\",\n    \"project_id\": \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"key_abc\",\n    \"model\": \"dall-e-3\"\n}\n"
        name: Images usage object
    UsageModerationsResult:
      description: The aggregated moderations usage details of the specific time bucket.
      properties:
        api_key_id:
          description: When `group_by=api_key_id`, this field provides the API key ID of the grouped usage result.
          nullable: true
          type: string
        input_tokens:
          description: The aggregated number of input tokens used.
          type: integer
        model:
          description: When `group_by=model`, this field provides the model name of the grouped usage result.
          nullable: true
          type: string
        num_model_requests:
          description: The count of requests made to the model.
          type: integer
        object:
          enum:
            - organization.usage.moderations.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
          nullable: true
          type: string
        user_id:
          description: When `group_by=user_id`, this field provides the user ID of the grouped usage result.
          nullable: true
          type: string
      required:
        - object
        - input_tokens
        - num_model_requests
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.moderations.result\",\n    \"input_tokens\": 20,\n    \"num_model_requests\": 2,\n    \"project_id\": \"proj_abc\",\n    \"user_id\": \"user-abc\",\n    \"api_key_id\": \"key_abc\",\n    \"model\": \"text-moderation\"\n}\n"
        name: Moderations usage object
    UsageResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/UsageTimeBucket'
          type: array
        has_more:
          type: boolean
        next_page:
          type: string
        object:
          enum:
            - page
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - has_more
        - next_page
      type: object
    UsageTimeBucket:
      properties:
        end_time:
          type: integer
        object:
          enum:
            - bucket
          type: string
          x-stainless-const: true
        result:
          items:
            oneOf:
              - $ref: '#/components/schemas/UsageCompletionsResult'
              - $ref: '#/components/schemas/UsageEmbeddingsResult'
              - $ref: '#/components/schemas/UsageModerationsResult'
              - $ref: '#/components/schemas/UsageImagesResult'
              - $ref: '#/components/schemas/UsageAudioSpeechesResult'
              - $ref: '#/components/schemas/UsageAudioTranscriptionsResult'
              - $ref: '#/components/schemas/UsageVectorStoresResult'
              - $ref: '#/components/schemas/UsageCodeInterpreterSessionsResult'
              - $ref: '#/components/schemas/CostsResult'
          type: array
        start_time:
          type: integer
      required:
        - object
        - start_time
        - end_time
        - result
      type: object
    UsageVectorStoresResult:
      description: The aggregated vector stores usage details of the specific time bucket.
      properties:
        object:
          enum:
            - organization.usage.vector_stores.result
          type: string
          x-stainless-const: true
        project_id:
          description: When `group_by=project_id`, this field provides the project ID of the grouped usage result.
          nullable: true
          type: string
        usage_bytes:
          description: The vector stores usage in bytes.
          type: integer
      required:
        - object
        - usage_bytes
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.usage.vector_stores.result\",\n    \"usage_bytes\": 1024,\n    \"project_id\": \"proj_abc\"\n}\n"
        name: Vector stores usage object
    User:
      description: Represents an individual `user` within an organization.
      properties:
        added_at:
          description: The Unix timestamp (in seconds) of when the user was added.
          type: integer
        email:
          description: The email address of the user
          type: string
        id:
          description: The identifier, which can be referenced in API endpoints
          type: string
        name:
          description: The name of the user
          type: string
        object:
          description: The object type, which is always `organization.user`
          enum:
            - organization.user
          type: string
          x-stainless-const: true
        role:
          description: '`owner` or `reader`'
          enum:
            - owner
            - reader
          type: string
      required:
        - object
        - id
        - name
        - email
        - role
        - added_at
      type: object
      x-oaiMeta:
        example: "{\n    \"object\": \"organization.user\",\n    \"id\": \"user_abc\",\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\",\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        name: The user object
    UserDeleteResponse:
      properties:
        deleted:
          type: boolean
        id:
          type: string
        object:
          enum:
            - organization.user.deleted
          type: string
          x-stainless-const: true
      required:
        - object
        - id
        - deleted
      type: object
    UserListResponse:
      properties:
        data:
          items:
            $ref: '#/components/schemas/User'
          type: array
        first_id:
          type: string
        has_more:
          type: boolean
        last_id:
          type: string
        object:
          enum:
            - list
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - first_id
        - last_id
        - has_more
      type: object
    UserRoleUpdateRequest:
      properties:
        role:
          description: '`owner` or `reader`'
          enum:
            - owner
            - reader
          type: string
      required:
        - role
      type: object
    VectorStoreExpirationAfter:
      description: The expiration policy for a vector store.
      properties:
        anchor:
          description: 'Anchor timestamp after which the expiration policy applies. Supported anchors: `last_active_at`.'
          enum:
            - last_active_at
          type: string
          x-stainless-const: true
        days:
          description: The number of days after the anchor time that the vector store will expire.
          maximum: 365
          minimum: 1
          type: integer
      required:
        - anchor
        - days
      title: Vector store expiration policy
      type: object
    VectorStoreFileAttributes:
      additionalProperties:
        oneOf:
          - maxLength: 512
            type: string
          - type: number
          - type: boolean
      description: "Set of 16 key-value pairs that can be attached to an object. This can be \nuseful for storing additional information about the object in a structured \nformat, and querying for objects via API or the dashboard. Keys are strings \nwith a maximum length of 64 characters. Values are strings with a maximum \nlength of 512 characters, booleans, or numbers.\n"
      maxProperties: 16
      nullable: true
      type: object
      x-oaiTypeLabel: map
    VectorStoreFileBatchObject:
      description: A batch of files attached to a vector store.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store files batch was created.
          type: integer
        file_counts:
          properties:
            cancelled:
              description: The number of files that where cancelled.
              type: integer
            completed:
              description: The number of files that have been processed.
              type: integer
            failed:
              description: The number of files that have failed to process.
              type: integer
            in_progress:
              description: The number of files that are currently being processed.
              type: integer
            total:
              description: The total number of files.
              type: integer
          required:
            - in_progress
            - completed
            - cancelled
            - failed
            - total
          type: object
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        object:
          description: The object type, which is always `vector_store.file_batch`.
          enum:
            - vector_store.files_batch
          type: string
          x-stainless-const: true
        status:
          description: The status of the vector store files batch, which can be either `in_progress`, `completed`, `cancelled` or `failed`.
          enum:
            - in_progress
            - completed
            - cancelled
            - failed
          type: string
        vector_store_id:
          description: The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
          type: string
      required:
        - id
        - object
        - created_at
        - vector_store_id
        - status
        - file_counts
      title: Vector store file batch
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"vsfb_123\",\n  \"object\": \"vector_store.files_batch\",\n  \"created_at\": 1698107661,\n  \"vector_store_id\": \"vs_abc123\",\n  \"status\": \"completed\",\n  \"file_counts\": {\n    \"in_progress\": 0,\n    \"completed\": 100,\n    \"failed\": 0,\n    \"cancelled\": 0,\n    \"total\": 100\n  }\n}\n"
        name: The vector store files batch object
    VectorStoreFileContentResponse:
      description: Represents the parsed content of a vector store file.
      properties:
        data:
          description: Parsed content of the file.
          items:
            properties:
              text:
                description: The text content
                type: string
              type:
                description: The content type (currently only `"text"`)
                type: string
            type: object
          type: array
        has_more:
          description: Indicates if there are more content pages to fetch.
          type: boolean
        next_page:
          description: The token for the next page, if any.
          nullable: true
          type: string
        object:
          description: The object type, which is always `vector_store.file_content.page`
          enum:
            - vector_store.file_content.page
          type: string
          x-stainless-const: true
      required:
        - object
        - data
        - has_more
        - next_page
      type: object
    VectorStoreFileObject:
      description: A list of files attached to a vector store.
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
        chunking_strategy:
          description: The strategy used to chunk the file.
          oneOf:
            - $ref: '#/components/schemas/StaticChunkingStrategyResponseParam'
            - $ref: '#/components/schemas/OtherChunkingStrategyResponseParam'
          type: object
          x-oaiExpandable: true
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store file was created.
          type: integer
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        last_error:
          description: The last error associated with this vector store file. Will be `null` if there are no errors.
          nullable: true
          properties:
            code:
              description: One of `server_error` or `rate_limit_exceeded`.
              enum:
                - server_error
                - unsupported_file
                - invalid_file
              type: string
            message:
              description: A human-readable description of the error.
              type: string
          required:
            - code
            - message
          type: object
        object:
          description: The object type, which is always `vector_store.file`.
          enum:
            - vector_store.file
          type: string
          x-stainless-const: true
        status:
          description: The status of the vector store file, which can be either `in_progress`, `completed`, `cancelled`, or `failed`. The status `completed` indicates that the vector store file is ready for use.
          enum:
            - in_progress
            - completed
            - cancelled
            - failed
          type: string
        usage_bytes:
          description: The total vector store usage in bytes. Note that this may be different from the original file size.
          type: integer
        vector_store_id:
          description: The ID of the [vector store](/docs/api-reference/vector-stores/object) that the [File](/docs/api-reference/files) is attached to.
          type: string
      required:
        - id
        - object
        - usage_bytes
        - created_at
        - vector_store_id
        - status
        - last_error
      title: Vector store files
      type: object
      x-oaiMeta:
        beta: true
        example: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"vector_store.file\",\n  \"usage_bytes\": 1234,\n  \"created_at\": 1698107661,\n  \"vector_store_id\": \"vs_abc123\",\n  \"status\": \"completed\",\n  \"last_error\": null,\n  \"chunking_strategy\": {\n    \"type\": \"static\",\n    \"static\": {\n      \"max_chunk_size_tokens\": 800,\n      \"chunk_overlap_tokens\": 400\n    }\n  }\n}\n"
        name: The vector store file object
    VectorStoreObject:
      description: A vector store is a collection of processed files can be used by the `file_search` tool.
      properties:
        created_at:
          description: The Unix timestamp (in seconds) for when the vector store was created.
          type: integer
        expires_after:
          $ref: '#/components/schemas/VectorStoreExpirationAfter'
        expires_at:
          description: The Unix timestamp (in seconds) for when the vector store will expire.
          nullable: true
          type: integer
        file_counts:
          properties:
            cancelled:
              description: The number of files that were cancelled.
              type: integer
            completed:
              description: The number of files that have been successfully processed.
              type: integer
            failed:
              description: The number of files that have failed to process.
              type: integer
            in_progress:
              description: The number of files that are currently being processed.
              type: integer
            total:
              description: The total number of files.
              type: integer
          required:
            - in_progress
            - completed
            - failed
            - cancelled
            - total
          type: object
        id:
          description: The identifier, which can be referenced in API endpoints.
          type: string
        last_active_at:
          description: The Unix timestamp (in seconds) for when the vector store was last active.
          nullable: true
          type: integer
        metadata:
          $ref: '#/components/schemas/Metadata'
        name:
          description: The name of the vector store.
          type: string
        object:
          description: The object type, which is always `vector_store`.
          enum:
            - vector_store
          type: string
          x-stainless-const: true
        status:
          description: The status of the vector store, which can be either `expired`, `in_progress`, or `completed`. A status of `completed` indicates that the vector store is ready for use.
          enum:
            - expired
            - in_progress
            - completed
          type: string
        usage_bytes:
          description: The total number of bytes used by the files in the vector store.
          type: integer
      required:
        - id
        - object
        - usage_bytes
        - created_at
        - status
        - last_active_at
        - name
        - file_counts
        - metadata
      title: Vector store
      type: object
      x-oaiMeta:
        example: "{\n  \"id\": \"vs_123\",\n  \"object\": \"vector_store\",\n  \"created_at\": 1698107661,\n  \"usage_bytes\": 123456,\n  \"last_active_at\": 1698107661,\n  \"name\": \"my_vector_store\",\n  \"status\": \"completed\",\n  \"file_counts\": {\n    \"in_progress\": 0,\n    \"completed\": 100,\n    \"cancelled\": 0,\n    \"failed\": 0,\n    \"total\": 100\n  },\n  \"last_used_at\": 1698107661\n}\n"
        name: The vector store object
    VectorStoreSearchRequest:
      additionalProperties: false
      properties:
        filters:
          description: A filter to apply based on file attributes.
          oneOf:
            - $ref: '#/components/schemas/ComparisonFilter'
            - $ref: '#/components/schemas/CompoundFilter'
          x-oaiExpandable: true
        max_num_results:
          default: 10
          description: The maximum number of results to return. This number should be between 1 and 50 inclusive.
          maximum: 50
          minimum: 1
          type: integer
        query:
          description: A query string for a search
          oneOf:
            - type: string
            - items:
                description: A list of queries to search for.
                minItems: 1
                type: string
              type: array
        ranking_options:
          additionalProperties: false
          description: Ranking options for search.
          properties:
            ranker:
              default: auto
              enum:
                - auto
                - default-2024-11-15
              type: string
            score_threshold:
              default: 0
              maximum: 1
              minimum: 0
              type: number
          type: object
        rewrite_query:
          default: false
          description: Whether to rewrite the natural language query for vector search.
          type: boolean
      required:
        - query
      type: object
      x-oaiMeta:
        name: Vector store search request
    VectorStoreSearchResultContentObject:
      additionalProperties: false
      properties:
        text:
          description: The text content returned from search.
          type: string
        type:
          description: The type of content.
          enum:
            - text
          type: string
      required:
        - type
        - text
      type: object
      x-oaiMeta:
        name: Vector store search result content object
    VectorStoreSearchResultItem:
      additionalProperties: false
      properties:
        attributes:
          $ref: '#/components/schemas/VectorStoreFileAttributes'
        content:
          description: Content chunks from the file.
          items:
            $ref: '#/components/schemas/VectorStoreSearchResultContentObject'
          type: array
        file_id:
          description: The ID of the vector store file.
          type: string
        filename:
          description: The name of the vector store file.
          type: string
        score:
          description: The similarity score for the result.
          maximum: 1
          minimum: 0
          type: number
      required:
        - file_id
        - filename
        - score
        - attributes
        - content
      type: object
      x-oaiMeta:
        name: Vector store search result item
    VectorStoreSearchResultsPage:
      additionalProperties: false
      properties:
        data:
          description: The list of search result items.
          items:
            $ref: '#/components/schemas/VectorStoreSearchResultItem'
          type: array
        has_more:
          description: Indicates if there are more results to fetch.
          type: boolean
        next_page:
          description: The token for the next page, if any.
          nullable: true
          type: string
        object:
          description: The object type, which is always `vector_store.search_results.page`
          enum:
            - vector_store.search_results.page
          type: string
          x-stainless-const: true
        search_query:
          items:
            description: The query used for this search.
            minItems: 1
            type: string
          type: array
      required:
        - object
        - search_query
        - data
        - has_more
        - next_page
      type: object
      x-oaiMeta:
        name: Vector store search results page
    Wait:
      description: "A wait action.\n"
      properties:
        type:
          default: wait
          description: "Specifies the event type. For a wait action, this property is \nalways set to `wait`.\n"
          enum:
            - wait
          type: string
          x-stainless-const: true
      required:
        - type
      title: Wait
      type: object
    WebSearchContextSize:
      default: medium
      description: "High level guidance for the amount of context window space to use for the \nsearch. One of `low`, `medium`, or `high`. `medium` is the default.\n"
      enum:
        - low
        - medium
        - high
      type: string
    WebSearchLocation:
      description: Approximate location parameters for the search.
      properties:
        city:
          description: "Free text input for the city of the user, e.g. `San Francisco`.\n"
          type: string
        country:
          description: "The two-letter \n[ISO country code](https://en.wikipedia.org/wiki/ISO_3166-1) of the user,\ne.g. `US`.\n"
          type: string
        region:
          description: "Free text input for the region of the user, e.g. `California`.\n"
          type: string
        timezone:
          description: "The [IANA timezone](https://timeapi.io/documentation/iana-timezones) \nof the user, e.g. `America/Los_Angeles`.\n"
          type: string
      title: Web search location
      type: object
    WebSearchTool:
      description: "This tool searches the web for relevant results to use in a response.\nLearn more about the [web search tool](/docs/guides/tools-web-search).\n"
      properties:
        search_context_size:
          $ref: '#/components/schemas/WebSearchContextSize'
        type:
          description: "The type of the web search tool. One of:\n- `web_search_preview`\n- `web_search_preview_2025_03_11`\n"
          enum:
            - web_search_preview
            - web_search_preview_2025_03_11
          type: string
        user_location:
          allOf:
            - $ref: '#/components/schemas/WebSearchLocation'
            - properties:
                type:
                  description: "The type of location approximation. Always `approximate`.\n"
                  enum:
                    - approximate
                  type: string
                  x-stainless-const: true
              required:
                - type
              type: object
          nullable: true
      required:
        - type
      title: Web search
      type: object
    WebSearchToolCall:
      description: "The results of a web search tool call. See the \n[web search guide](/docs/guides/tools-web-search) for more information.\n"
      properties:
        id:
          description: "The unique ID of the web search tool call.\n"
          type: string
        status:
          description: "The status of the web search tool call.\n"
          enum:
            - in_progress
            - searching
            - completed
            - failed
          type: string
        type:
          description: "The type of the web search tool call. Always `web_search_call`.\n"
          enum:
            - web_search_call
          type: string
          x-stainless-const: true
      required:
        - id
        - type
        - status
      title: Web search tool call
      type: object
  securitySchemes:
    ApiKeyAuth:
      scheme: bearer
      type: http
info:
  contact:
    name: OpenAI Support
    url: https://help.openai.com/
  description: The OpenAI REST API. Please see https://platform.openai.com/docs/api-reference for more details.
  license:
    name: MIT
    url: https://github.com/openai/openai-openapi/blob/master/LICENSE
  termsOfService: https://openai.com/policies/terms-of-use
  title: OpenAI API
  version: 2.3.0
openapi: 3.0.3
paths:
  /assistants:
    get:
      operationId: listAssistants
      parameters:
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          in: query
          name: order
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          schema:
            type: string
        - description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          in: query
          name: before
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAssistantsResponse'
          description: OK
      summary: Returns a list of assistants.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/assistants?order=desc&limit=20\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const myAssistants = await openai.beta.assistants.list({\n    order: \"desc\",\n    limit: \"20\",\n  });\n\n  console.log(myAssistants.data);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nmy_assistants = client.beta.assistants.list(\n    order=\"desc\",\n    limit=\"20\",\n)\nprint(my_assistants.data)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"asst_abc123\",\n      \"object\": \"assistant\",\n      \"created_at\": 1698982736,\n      \"name\": \"Coding Tutor\",\n      \"description\": null,\n      \"model\": \"gpt-4o\",\n      \"instructions\": \"You are a helpful assistant designed to make me better at coding!\",\n      \"tools\": [],\n      \"tool_resources\": {},\n      \"metadata\": {},\n      \"top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"response_format\": \"auto\"\n    },\n    {\n      \"id\": \"asst_abc456\",\n      \"object\": \"assistant\",\n      \"created_at\": 1698982718,\n      \"name\": \"My Assistant\",\n      \"description\": null,\n      \"model\": \"gpt-4o\",\n      \"instructions\": \"You are a helpful assistant designed to make me better at coding!\",\n      \"tools\": [],\n      \"tool_resources\": {},\n      \"metadata\": {},\n      \"top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"response_format\": \"auto\"\n    },\n    {\n      \"id\": \"asst_abc789\",\n      \"object\": \"assistant\",\n      \"created_at\": 1698982643,\n      \"name\": null,\n      \"description\": null,\n      \"model\": \"gpt-4o\",\n      \"instructions\": null,\n      \"tools\": [],\n      \"tool_resources\": {},\n      \"metadata\": {},\n      \"top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"response_format\": \"auto\"\n    }\n  ],\n  \"first_id\": \"asst_abc123\",\n  \"last_id\": \"asst_abc789\",\n  \"has_more\": false\n}\n"
        group: assistants
        name: List assistants
        returns: A list of [assistant](/docs/api-reference/assistants/object) objects.
    post:
      operationId: createAssistant
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssistantRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantObject'
          description: OK
      summary: Create an assistant with a model and instructions.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        example:
          request:
            curl: "curl \"https://api.openai.com/v1/assistants\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n    \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    \"name\": \"Math Tutor\",\n    \"tools\": [{\"type\": \"code_interpreter\"}],\n    \"model\": \"gpt-4o\"\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const myAssistant = await openai.beta.assistants.create({\n    instructions:\n      \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    name: \"Math Tutor\",\n    tools: [{ type: \"code_interpreter\" }],\n    model: \"gpt-4o\",\n  });\n\n  console.log(myAssistant);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nmy_assistant = client.beta.assistants.create(\n    instructions=\"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n    name=\"Math Tutor\",\n    tools=[{\"type\": \"code_interpreter\"}],\n    model=\"gpt-4o\",\n)\nprint(my_assistant)\n"
          response: "{\n  \"id\": \"asst_abc123\",\n  \"object\": \"assistant\",\n  \"created_at\": 1698984975,\n  \"name\": \"Math Tutor\",\n  \"description\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": \"You are a personal math tutor. When asked a question, write and run Python code to answer the question.\",\n  \"tools\": [\n    {\n      \"type\": \"code_interpreter\"\n    }\n  ],\n  \"metadata\": {},\n  \"top_p\": 1.0,\n  \"temperature\": 1.0,\n  \"response_format\": \"auto\"\n}\n"
          title: Code Interpreter
        group: assistants
        name: Create assistant
        returns: An [assistant](/docs/api-reference/assistants/object) object.
  /assistants/{assistant_id}:
    delete:
      operationId: deleteAssistant
      parameters:
        - description: The ID of the assistant to delete.
          in: path
          name: assistant_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteAssistantResponse'
          description: OK
      summary: Delete an assistant.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/assistants/asst_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -X DELETE\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const response = await openai.beta.assistants.del(\"asst_abc123\");\n\n  console.log(response);\n}\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nresponse = client.beta.assistants.delete(\"asst_abc123\")\nprint(response)\n"
          response: "{\n  \"id\": \"asst_abc123\",\n  \"object\": \"assistant.deleted\",\n  \"deleted\": true\n}\n"
        group: assistants
        name: Delete assistant
        returns: Deletion status
    get:
      operationId: getAssistant
      parameters:
        - description: The ID of the assistant to retrieve.
          in: path
          name: assistant_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantObject'
          description: OK
      summary: Retrieves an assistant.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/assistants/asst_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const myAssistant = await openai.beta.assistants.retrieve(\n    \"asst_abc123\"\n  );\n\n  console.log(myAssistant);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nmy_assistant = client.beta.assistants.retrieve(\"asst_abc123\")\nprint(my_assistant)\n"
          response: "{\n  \"id\": \"asst_abc123\",\n  \"object\": \"assistant\",\n  \"created_at\": 1699009709,\n  \"name\": \"HR Helper\",\n  \"description\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": \"You are an HR bot, and you have access to files to answer employee questions about company policies.\",\n  \"tools\": [\n    {\n      \"type\": \"file_search\"\n    }\n  ],\n  \"metadata\": {},\n  \"top_p\": 1.0,\n  \"temperature\": 1.0,\n  \"response_format\": \"auto\"\n}\n"
        group: assistants
        name: Retrieve assistant
        returns: The [assistant](/docs/api-reference/assistants/object) object matching the specified ID.
    post:
      operationId: modifyAssistant
      parameters:
        - description: The ID of the assistant to modify.
          in: path
          name: assistant_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyAssistantRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssistantObject'
          description: OK
      summary: Modifies an assistant.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/assistants/asst_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n      \"instructions\": \"You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.\",\n      \"tools\": [{\"type\": \"file_search\"}],\n      \"model\": \"gpt-4o\"\n    }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const myUpdatedAssistant = await openai.beta.assistants.update(\n    \"asst_abc123\",\n    {\n      instructions:\n        \"You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.\",\n      name: \"HR Helper\",\n      tools: [{ type: \"file_search\" }],\n      model: \"gpt-4o\"\n    }\n  );\n\n  console.log(myUpdatedAssistant);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nmy_updated_assistant = client.beta.assistants.update(\n  \"asst_abc123\",\n  instructions=\"You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.\",\n  name=\"HR Helper\",\n  tools=[{\"type\": \"file_search\"}],\n  model=\"gpt-4o\"\n)\n\nprint(my_updated_assistant)\n"
          response: "{\n  \"id\": \"asst_123\",\n  \"object\": \"assistant\",\n  \"created_at\": 1699009709,\n  \"name\": \"HR Helper\",\n  \"description\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": \"You are an HR bot, and you have access to files to answer employee questions about company policies. Always response with info from either of the files.\",\n  \"tools\": [\n    {\n      \"type\": \"file_search\"\n    }\n  ],\n  \"tool_resources\": {\n    \"file_search\": {\n      \"vector_store_ids\": []\n    }\n  },\n  \"metadata\": {},\n  \"top_p\": 1.0,\n  \"temperature\": 1.0,\n  \"response_format\": \"auto\"\n}\n"
        group: assistants
        name: Modify assistant
        returns: The modified [assistant](/docs/api-reference/assistants/object) object.
  /audio/speech:
    post:
      operationId: createSpeech
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSpeechRequest'
        required: true
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: binary
                type: string
          description: OK
          headers:
            Transfer-Encoding:
              description: chunked
              schema:
                type: string
      summary: Generates audio from the input text.
      tags:
        - Audio
      x-oaiMeta:
        examples:
          request:
            csharp: "using System;\nusing System.IO;\n\nusing OpenAI.Audio;\n\nAudioClient client = new(\n    model: \"tts-1\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nBinaryData speech = client.GenerateSpeech(\n    text: \"The quick brown fox jumped over the lazy dog.\",\n    voice: GeneratedSpeechVoice.Alloy\n);\n\nusing FileStream stream = File.OpenWrite(\"speech.mp3\");\nspeech.ToStream().CopyTo(stream);\n"
            curl: "curl https://api.openai.com/v1/audio/speech \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"tts-1\",\n    \"input\": \"The quick brown fox jumped over the lazy dog.\",\n    \"voice\": \"alloy\"\n  }' \\\n  --output speech.mp3\n"
            node: "import fs from \"fs\";\nimport path from \"path\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nconst speechFile = path.resolve(\"./speech.mp3\");\n\nasync function main() {\n  const mp3 = await openai.audio.speech.create({\n    model: \"tts-1\",\n    voice: \"alloy\",\n    input: \"Today is a wonderful day to build something people love!\",\n  });\n  console.log(speechFile);\n  const buffer = Buffer.from(await mp3.arrayBuffer());\n  await fs.promises.writeFile(speechFile, buffer);\n}\nmain();\n"
            python: "from pathlib import Path\nimport openai\n\nspeech_file_path = Path(__file__).parent / \"speech.mp3\"\nresponse = openai.audio.speech.create(\n  model=\"tts-1\",\n  voice=\"alloy\",\n  input=\"The quick brown fox jumped over the lazy dog.\"\n)\nresponse.stream_to_file(speech_file_path)\n"
        group: audio
        name: Create speech
        returns: The audio file content.
  /audio/transcriptions:
    post:
      operationId: createTranscription
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranscriptionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateTranscriptionResponseJson'
                  - $ref: '#/components/schemas/CreateTranscriptionResponseVerboseJson'
          description: OK
      summary: Transcribes audio into the input language.
      tags:
        - Audio
      x-oaiMeta:
        example:
          request:
            csharp: "using System;\n\nusing OpenAI.Audio;\nstring audioFilePath = \"audio.mp3\";\n\nAudioClient client = new(\n    model: \"whisper-1\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nAudioTranscription transcription = client.TranscribeAudio(audioFilePath);\n\nConsole.WriteLine($\"{transcription.Text}\");\n"
            curl: "curl https://api.openai.com/v1/audio/transcriptions \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: multipart/form-data\" \\\n  -F file=\"@/path/to/file/audio.mp3\" \\\n  -F model=\"whisper-1\"\n"
            node: "import fs from \"fs\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const transcription = await openai.audio.transcriptions.create({\n    file: fs.createReadStream(\"audio.mp3\"),\n    model: \"whisper-1\",\n  });\n\n  console.log(transcription.text);\n}\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\naudio_file = open(\"speech.mp3\", \"rb\")\ntranscript = client.audio.transcriptions.create(\n  model=\"whisper-1\",\n  file=audio_file\n)\n"
          response: "{\n  \"text\": \"Imagine the wildest idea that you've ever had, and you're curious about how it might scale to something that's a 100, a 1,000 times bigger. This is a place where you can get to do that.\"\n}\n"
          title: Default
        group: audio
        name: Create transcription
        returns: The [transcription object](/docs/api-reference/audio/json-object) or a [verbose transcription object](/docs/api-reference/audio/verbose-json-object).
  /audio/translations:
    post:
      operationId: createTranslation
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTranslationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/CreateTranslationResponseJson'
                  - $ref: '#/components/schemas/CreateTranslationResponseVerboseJson'
          description: OK
      summary: Translates audio into English.
      tags:
        - Audio
      x-oaiMeta:
        examples:
          request:
            csharp: "using System;\n\nusing OpenAI.Audio;\n\nstring audioFilePath = \"audio.mp3\";\n\nAudioClient client = new(\n    model: \"whisper-1\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nAudioTranscription transcription = client.TranscribeAudio(audioFilePath);\n\nConsole.WriteLine($\"{transcription.Text}\");\n"
            curl: "curl https://api.openai.com/v1/audio/translations \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: multipart/form-data\" \\\n  -F file=\"@/path/to/file/german.m4a\" \\\n  -F model=\"whisper-1\"\n"
            node: "import fs from \"fs\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n    const translation = await openai.audio.translations.create({\n        file: fs.createReadStream(\"speech.mp3\"),\n        model: \"whisper-1\",\n    });\n\n    console.log(translation.text);\n}\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\naudio_file = open(\"speech.mp3\", \"rb\")\ntranscript = client.audio.translations.create(\n  model=\"whisper-1\",\n  file=audio_file\n)\n"
          response: "{\n  \"text\": \"Hello, my name is Wolfgang and I come from Germany. Where are you heading today?\"\n}\n"
        group: audio
        name: Create translation
        returns: The translated text.
  /batches:
    get:
      operationId: listBatches
      parameters:
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListBatchesResponse'
          description: Batch listed successfully.
      summary: List your organization's batches.
      tags:
        - Batch
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/batches?limit=2 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
            node: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.batches.list();\n\n  for await (const batch of list) {\n    console.log(batch);\n  }\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.batches.list()\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"batch_abc123\",\n      \"object\": \"batch\",\n      \"endpoint\": \"/v1/chat/completions\",\n      \"errors\": null,\n      \"input_file_id\": \"file-abc123\",\n      \"completion_window\": \"24h\",\n      \"status\": \"completed\",\n      \"output_file_id\": \"file-cvaTdG\",\n      \"error_file_id\": \"file-HOWS94\",\n      \"created_at\": 1711471533,\n      \"in_progress_at\": 1711471538,\n      \"expires_at\": 1711557933,\n      \"finalizing_at\": 1711493133,\n      \"completed_at\": 1711493163,\n      \"failed_at\": null,\n      \"expired_at\": null,\n      \"cancelling_at\": null,\n      \"cancelled_at\": null,\n      \"request_counts\": {\n        \"total\": 100,\n        \"completed\": 95,\n        \"failed\": 5\n      },\n      \"metadata\": {\n        \"customer_id\": \"user_123456789\",\n        \"batch_description\": \"Nightly job\",\n      }\n    },\n    { ... },\n  ],\n  \"first_id\": \"batch_abc123\",\n  \"last_id\": \"batch_abc456\",\n  \"has_more\": true\n}\n"
        group: batch
        name: List batch
        returns: A list of paginated [Batch](/docs/api-reference/batch/object) objects.
    post:
      operationId: createBatch
      requestBody:
        content:
          application/json:
            schema:
              properties:
                completion_window:
                  description: The time frame within which the batch should be processed. Currently only `24h` is supported.
                  enum:
                    - 24h
                  type: string
                endpoint:
                  description: The endpoint to be used for all requests in the batch. Currently `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions` are supported. Note that `/v1/embeddings` batches are also restricted to a maximum of 50,000 embedding inputs across all requests in the batch.
                  enum:
                    - /v1/chat/completions
                    - /v1/embeddings
                    - /v1/completions
                  type: string
                input_file_id:
                  description: "The ID of an uploaded file that contains requests for the new batch.\n\nSee [upload file](/docs/api-reference/files/create) for how to upload a file.\n\nYour input file must be formatted as a [JSONL file](/docs/api-reference/batch/request-input), and must be uploaded with the purpose `batch`. The file can contain up to 50,000 requests, and can be up to 200 MB in size.\n"
                  type: string
                metadata:
                  $ref: '#/components/schemas/Metadata'
              required:
                - input_file_id
                - endpoint
                - completion_window
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: Batch created successfully.
      summary: Creates and executes a batch from an uploaded file of requests
      tags:
        - Batch
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/batches \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input_file_id\": \"file-abc123\",\n    \"endpoint\": \"/v1/chat/completions\",\n    \"completion_window\": \"24h\"\n  }'\n"
            node: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const batch = await openai.batches.create({\n    input_file_id: \"file-abc123\",\n    endpoint: \"/v1/chat/completions\",\n    completion_window: \"24h\"\n  });\n\n  console.log(batch);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.batches.create(\n  input_file_id=\"file-abc123\",\n  endpoint=\"/v1/chat/completions\",\n  completion_window=\"24h\"\n)\n"
          response: "{\n  \"id\": \"batch_abc123\",\n  \"object\": \"batch\",\n  \"endpoint\": \"/v1/chat/completions\",\n  \"errors\": null,\n  \"input_file_id\": \"file-abc123\",\n  \"completion_window\": \"24h\",\n  \"status\": \"validating\",\n  \"output_file_id\": null,\n  \"error_file_id\": null,\n  \"created_at\": 1711471533,\n  \"in_progress_at\": null,\n  \"expires_at\": null,\n  \"finalizing_at\": null,\n  \"completed_at\": null,\n  \"failed_at\": null,\n  \"expired_at\": null,\n  \"cancelling_at\": null,\n  \"cancelled_at\": null,\n  \"request_counts\": {\n    \"total\": 0,\n    \"completed\": 0,\n    \"failed\": 0\n  },\n  \"metadata\": {\n    \"customer_id\": \"user_123456789\",\n    \"batch_description\": \"Nightly eval job\",\n  }\n}\n"
        group: batch
        name: Create batch
        returns: The created [Batch](/docs/api-reference/batch/object) object.
  /batches/{batch_id}:
    get:
      operationId: retrieveBatch
      parameters:
        - description: The ID of the batch to retrieve.
          in: path
          name: batch_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: Batch retrieved successfully.
      summary: Retrieves a batch.
      tags:
        - Batch
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/batches/batch_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n"
            node: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const batch = await openai.batches.retrieve(\"batch_abc123\");\n\n  console.log(batch);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.batches.retrieve(\"batch_abc123\")\n"
          response: "{\n  \"id\": \"batch_abc123\",\n  \"object\": \"batch\",\n  \"endpoint\": \"/v1/completions\",\n  \"errors\": null,\n  \"input_file_id\": \"file-abc123\",\n  \"completion_window\": \"24h\",\n  \"status\": \"completed\",\n  \"output_file_id\": \"file-cvaTdG\",\n  \"error_file_id\": \"file-HOWS94\",\n  \"created_at\": 1711471533,\n  \"in_progress_at\": 1711471538,\n  \"expires_at\": 1711557933,\n  \"finalizing_at\": 1711493133,\n  \"completed_at\": 1711493163,\n  \"failed_at\": null,\n  \"expired_at\": null,\n  \"cancelling_at\": null,\n  \"cancelled_at\": null,\n  \"request_counts\": {\n    \"total\": 100,\n    \"completed\": 95,\n    \"failed\": 5\n  },\n  \"metadata\": {\n    \"customer_id\": \"user_123456789\",\n    \"batch_description\": \"Nightly eval job\",\n  }\n}\n"
        group: batch
        name: Retrieve batch
        returns: The [Batch](/docs/api-reference/batch/object) object matching the specified ID.
  /batches/{batch_id}/cancel:
    post:
      operationId: cancelBatch
      parameters:
        - description: The ID of the batch to cancel.
          in: path
          name: batch_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Batch'
          description: Batch is cancelling. Returns the cancelling batch's details.
      summary: Cancels an in-progress batch. The batch will be in status `cancelling` for up to 10 minutes, before changing to `cancelled`, where it will have partial results (if any) available in the output file.
      tags:
        - Batch
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/batches/batch_abc123/cancel \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -X POST\n"
            node: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const batch = await openai.batches.cancel(\"batch_abc123\");\n\n  console.log(batch);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.batches.cancel(\"batch_abc123\")\n"
          response: "{\n  \"id\": \"batch_abc123\",\n  \"object\": \"batch\",\n  \"endpoint\": \"/v1/chat/completions\",\n  \"errors\": null,\n  \"input_file_id\": \"file-abc123\",\n  \"completion_window\": \"24h\",\n  \"status\": \"cancelling\",\n  \"output_file_id\": null,\n  \"error_file_id\": null,\n  \"created_at\": 1711471533,\n  \"in_progress_at\": 1711471538,\n  \"expires_at\": 1711557933,\n  \"finalizing_at\": null,\n  \"completed_at\": null,\n  \"failed_at\": null,\n  \"expired_at\": null,\n  \"cancelling_at\": 1711475133,\n  \"cancelled_at\": null,\n  \"request_counts\": {\n    \"total\": 100,\n    \"completed\": 23,\n    \"failed\": 1\n  },\n  \"metadata\": {\n    \"customer_id\": \"user_123456789\",\n    \"batch_description\": \"Nightly eval job\",\n  }\n}\n"
        group: batch
        name: Cancel batch
        returns: The [Batch](/docs/api-reference/batch/object) object matching the specified ID.
  /chat/completions:
    get:
      operationId: listChatCompletions
      parameters:
        - description: The model used to generate the Chat Completions.
          in: query
          name: model
          required: false
          schema:
            type: string
        - description: "A list of metadata keys to filter the Chat Completions by. Example:\n\n`metadata[key1]=value1&metadata[key2]=value2`\n"
          in: query
          name: metadata
          required: false
          schema:
            $ref: '#/components/schemas/Metadata'
        - description: Identifier for the last chat completion from the previous pagination request.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: Number of Chat Completions to retrieve.
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: Sort order for Chat Completions by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
          in: query
          name: order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionList'
          description: A list of Chat Completions
      summary: "List stored Chat Completions. Only Chat Completions that have been stored\nwith the `store` parameter set to `true` will be returned.\n"
      tags:
        - Chat
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncompletions = client.chat.completions.list()\nprint(completions)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"chat.completion\",\n      \"id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n      \"model\": \"gpt-4o-2024-08-06\",\n      \"created\": 1738960610,\n      \"request_id\": \"req_ded8ab984ec4bf840f37566c1011c417\",\n      \"tool_choice\": null,\n      \"usage\": {\n        \"total_tokens\": 31,\n        \"completion_tokens\": 18,\n        \"prompt_tokens\": 13\n      },\n      \"seed\": 4944116822809979520,\n      \"top_p\": 1.0,\n      \"temperature\": 1.0,\n      \"presence_penalty\": 0.0,\n      \"frequency_penalty\": 0.0,\n      \"system_fingerprint\": \"fp_50cad350e4\",\n      \"input_user\": null,\n      \"service_tier\": \"default\",\n      \"tools\": null,\n      \"metadata\": {},\n      \"choices\": [\n        {\n          \"index\": 0,\n          \"message\": {\n            \"content\": \"Mind of circuits hum,  \\nLearning patterns in silence—  \\nFuture's quiet spark.\",\n            \"role\": \"assistant\",\n            \"tool_calls\": null,\n            \"function_call\": null\n          },\n          \"finish_reason\": \"stop\",\n          \"logprobs\": null\n        }\n      ],\n      \"response_format\": null\n    }\n  ],\n  \"first_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n  \"last_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n  \"has_more\": false\n}\n"
        group: chat
        name: List Chat Completions
        path: list
        returns: A list of [Chat Completions](/docs/api-reference/chat/list-object) matching the specified filters.
    post:
      operationId: createChatCompletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChatCompletionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionStreamResponse'
          description: OK
      summary: "**Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses) \nto take advantage of the latest OpenAI platform features. Compare\n[Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).\n\n---\n\nCreates a model response for the given chat conversation. Learn more in the\n[text generation](/docs/guides/text-generation), [vision](/docs/guides/vision),\nand [audio](/docs/guides/audio) guides.\n\nParameter support can differ depending on the model used to generate the\nresponse, particularly for newer reasoning models. Parameters that are only\nsupported for reasoning models are noted below. For the current state of \nunsupported parameters in reasoning models, \n[refer to the reasoning guide](/docs/guides/reasoning).\n"
      tags:
        - Chat
      x-oaiMeta:
        example:
          request:
            csharp: "using System;\nusing System.Collections.Generic;\n\nusing OpenAI.Chat;\n\nChatClient client = new(\n    model: \"gpt-4o\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nList<ChatMessage> messages =\n[\n    new SystemChatMessage(\"You are a helpful assistant.\"),\n    new UserChatMessage(\"Hello!\")\n];\n\nChatCompletion completion = client.CompleteChat(messages);\n\nConsole.WriteLine(completion.Content[0].Text);\n"
            curl: "curl https://api.openai.com/v1/chat/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_chat_model_id\",\n    \"messages\": [\n      {\n        \"role\": \"developer\",\n        \"content\": \"You are a helpful assistant.\"\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"Hello!\"\n      }\n    ]\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const completion = await openai.chat.completions.create({\n    messages: [{ role: \"developer\", content: \"You are a helpful assistant.\" }],\n    model: \"VAR_chat_model_id\",\n    store: true,\n  });\n\n  console.log(completion.choices[0]);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncompletion = client.chat.completions.create(\n  model=\"VAR_chat_model_id\",\n  messages=[\n    {\"role\": \"developer\", \"content\": \"You are a helpful assistant.\"},\n    {\"role\": \"user\", \"content\": \"Hello!\"}\n  ]\n)\n\nprint(completion.choices[0].message)\n"
          response: "{\n  \"id\": \"chatcmpl-B9MBs8CjcvOU2jLn4n570S5qMJKcT\",\n  \"object\": \"chat.completion\",\n  \"created\": 1741569952,\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"role\": \"assistant\",\n        \"content\": \"Hello! How can I assist you today?\",\n        \"refusal\": null,\n        \"annotations\": []\n      },\n      \"logprobs\": null,\n      \"finish_reason\": \"stop\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 19,\n    \"completion_tokens\": 10,\n    \"total_tokens\": 29,\n    \"prompt_tokens_details\": {\n      \"cached_tokens\": 0,\n      \"audio_tokens\": 0\n    },\n    \"completion_tokens_details\": {\n      \"reasoning_tokens\": 0,\n      \"audio_tokens\": 0,\n      \"accepted_prediction_tokens\": 0,\n      \"rejected_prediction_tokens\": 0\n    }\n  },\n  \"service_tier\": \"default\"\n}\n"
          title: Default
        group: chat
        name: Create chat completion
        path: create
        returns: "Returns a [chat completion](/docs/api-reference/chat/object) object, or a streamed sequence of [chat completion chunk](/docs/api-reference/chat/streaming) objects if the request is streamed.\n"
  /chat/completions/{completion_id}:
    delete:
      operationId: deleteChatCompletion
      parameters:
        - description: The ID of the chat completion to delete.
          in: path
          name: completion_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionDeleted'
          description: The chat completion was deleted successfully.
      summary: "Delete a stored chat completion. Only Chat Completions that have been\ncreated with the `store` parameter set to `true` can be deleted.\n"
      tags:
        - Chat
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/chat/completions/chat_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncompletions = client.chat.completions.list()\nfirst_id = completions[0].id\ndelete_response = client.chat.completions.delete(completion_id=first_id)\nprint(delete_response)\n"
          response: "{\n  \"object\": \"chat.completion.deleted\",\n  \"id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n  \"deleted\": true\n}\n"
        group: chat
        name: Delete chat completion
        returns: A deletion confirmation object.
    get:
      operationId: getChatCompletion
      parameters:
        - description: The ID of the chat completion to retrieve.
          in: path
          name: completion_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
          description: A chat completion
      summary: "Get a stored chat completion. Only Chat Completions that have been created\nwith the `store` parameter set to `true` will be returned.\n"
      tags:
        - Chat
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/chat/completions/chatcmpl-abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncompletions = client.chat.completions.list()\nfirst_id = completions[0].id\nfirst_completion = client.chat.completions.retrieve(completion_id=first_id)\nprint(first_completion)\n"
          response: "{\n  \"object\": \"chat.completion\",\n  \"id\": \"chatcmpl-abc123\",\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"created\": 1738960610,\n  \"request_id\": \"req_ded8ab984ec4bf840f37566c1011c417\",\n  \"tool_choice\": null,\n  \"usage\": {\n    \"total_tokens\": 31,\n    \"completion_tokens\": 18,\n    \"prompt_tokens\": 13\n  },\n  \"seed\": 4944116822809979520,\n  \"top_p\": 1.0,\n  \"temperature\": 1.0,\n  \"presence_penalty\": 0.0,\n  \"frequency_penalty\": 0.0,\n  \"system_fingerprint\": \"fp_50cad350e4\",\n  \"input_user\": null,\n  \"service_tier\": \"default\",\n  \"tools\": null,\n  \"metadata\": {},\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"content\": \"Mind of circuits hum,  \\nLearning patterns in silence—  \\nFuture's quiet spark.\",\n        \"role\": \"assistant\",\n        \"tool_calls\": null,\n        \"function_call\": null\n      },\n      \"finish_reason\": \"stop\",\n      \"logprobs\": null\n    }\n  ],\n  \"response_format\": null\n}\n"
        group: chat
        name: Get chat completion
        returns: The [ChatCompletion](/docs/api-reference/chat/object) object matching the specified ID.
    post:
      operationId: updateChatCompletion
      parameters:
        - description: The ID of the chat completion to update.
          in: path
          name: completion_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              properties:
                metadata:
                  $ref: '#/components/schemas/Metadata'
              required:
                - metadata
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateChatCompletionResponse'
          description: A chat completion
      summary: "Modify a stored chat completion. Only Chat Completions that have been\ncreated with the `store` parameter set to `true` can be modified. Currently,\nthe only supported modification is to update the `metadata` field.\n"
      tags:
        - Chat
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/chat/completions/chat_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"metadata\": {\"foo\": \"bar\"}}'\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncompletions = client.chat.completions.list()\nfirst_id = completions[0].id\nupdated_completion = client.chat.completions.update(completion_id=first_id, request_body={\"metadata\": {\"foo\": \"bar\"}})\nprint(updated_completion)\n"
          response: "{\n  \"object\": \"chat.completion\",\n  \"id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2\",\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"created\": 1738960610,\n  \"request_id\": \"req_ded8ab984ec4bf840f37566c1011c417\",\n  \"tool_choice\": null,\n  \"usage\": {\n    \"total_tokens\": 31,\n    \"completion_tokens\": 18,\n    \"prompt_tokens\": 13\n  },\n  \"seed\": 4944116822809979520,\n  \"top_p\": 1.0,\n  \"temperature\": 1.0,\n  \"presence_penalty\": 0.0,\n  \"frequency_penalty\": 0.0,\n  \"system_fingerprint\": \"fp_50cad350e4\",\n  \"input_user\": null,\n  \"service_tier\": \"default\",\n  \"tools\": null,\n  \"metadata\": {\n    \"foo\": \"bar\"\n  },\n  \"choices\": [\n    {\n      \"index\": 0,\n      \"message\": {\n        \"content\": \"Mind of circuits hum,  \\nLearning patterns in silence—  \\nFuture's quiet spark.\",\n        \"role\": \"assistant\",\n        \"tool_calls\": null,\n        \"function_call\": null\n      },\n      \"finish_reason\": \"stop\",\n      \"logprobs\": null\n    }\n  ],\n  \"response_format\": null\n}\n"
        group: chat
        name: Update chat completion
        returns: The [ChatCompletion](/docs/api-reference/chat/object) object matching the specified ID.
  /chat/completions/{completion_id}/messages:
    get:
      operationId: getChatCompletionMessages
      parameters:
        - description: The ID of the chat completion to retrieve messages from.
          in: path
          name: completion_id
          required: true
          schema:
            type: string
        - description: Identifier for the last message from the previous pagination request.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: Number of messages to retrieve.
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: Sort order for messages by timestamp. Use `asc` for ascending order or `desc` for descending order. Defaults to `asc`.
          in: query
          name: order
          required: false
          schema:
            default: asc
            enum:
              - asc
              - desc
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatCompletionMessageList'
          description: A list of messages
      summary: "Get the messages in a stored chat completion. Only Chat Completions that\nhave been created with the `store` parameter set to `true` will be\nreturned.\n"
      tags:
        - Chat
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/chat/completions/chat_abc123/messages \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncompletions = client.chat.completions.list()\nfirst_id = completions[0].id\nfirst_completion = client.chat.completions.retrieve(completion_id=first_id)\nmessages = client.chat.completions.messages.list(completion_id=first_id)\nprint(messages)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0\",\n      \"role\": \"user\",\n      \"content\": \"write a haiku about ai\",\n      \"name\": null,\n      \"content_parts\": null\n    }\n  ],\n  \"first_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0\",\n  \"last_id\": \"chatcmpl-AyPNinnUqUDYo9SAdA52NobMflmj2-0\",\n  \"has_more\": false\n}\n"
        group: chat
        name: Get chat messages
        returns: A list of [messages](/docs/api-reference/chat/message-list) for the specified chat completion.
  /completions:
    post:
      operationId: createCompletion
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCompletionRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCompletionResponse'
          description: OK
      summary: Creates a completion for the provided prompt and parameters.
      tags:
        - Completions
      x-oaiMeta:
        example:
          request:
            curl: "curl https://api.openai.com/v1/completions \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"VAR_completion_model_id\",\n    \"prompt\": \"Say this is a test\",\n    \"max_tokens\": 7,\n    \"temperature\": 0\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const completion = await openai.completions.create({\n    model: \"VAR_completion_model_id\",\n    prompt: \"Say this is a test.\",\n    max_tokens: 7,\n    temperature: 0,\n  });\n\n  console.log(completion);\n}\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.completions.create(\n  model=\"VAR_completion_model_id\",\n  prompt=\"Say this is a test\",\n  max_tokens=7,\n  temperature=0\n)\n"
          response: "{\n  \"id\": \"cmpl-uqkvlQyYK7bGYrRHQ0eXlWi7\",\n  \"object\": \"text_completion\",\n  \"created\": 1589478378,\n  \"model\": \"VAR_completion_model_id\",\n  \"system_fingerprint\": \"fp_44709d6fcb\",\n  \"choices\": [\n    {\n      \"text\": \"\\n\\nThis is indeed a test\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"finish_reason\": \"length\"\n    }\n  ],\n  \"usage\": {\n    \"prompt_tokens\": 5,\n    \"completion_tokens\": 7,\n    \"total_tokens\": 12\n  }\n}\n"
          title: No streaming
        group: completions
        legacy: true
        name: Create completion
        returns: "Returns a [completion](/docs/api-reference/completions/object) object, or a sequence of completion objects if the request is streamed.\n"
  /embeddings:
    post:
      operationId: createEmbedding
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmbeddingRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateEmbeddingResponse'
          description: OK
      summary: Creates an embedding vector representing the input text.
      tags:
        - Embeddings
      x-oaiMeta:
        examples:
          request:
            csharp: "using System;\n\nusing OpenAI.Embeddings;\n\nEmbeddingClient client = new(\n    model: \"text-embedding-3-small\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nOpenAIEmbedding embedding = client.GenerateEmbedding(input: \"The quick brown fox jumped over the lazy dog\");\nReadOnlyMemory<float> vector = embedding.ToFloats();\n\nfor (int i = 0; i < vector.Length; i++)\n{\n    Console.WriteLine($\"  [{i,4}] = {vector.Span[i]}\");\n}\n"
            curl: "curl https://api.openai.com/v1/embeddings \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"input\": \"The food was delicious and the waiter...\",\n    \"model\": \"text-embedding-ada-002\",\n    \"encoding_format\": \"float\"\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const embedding = await openai.embeddings.create({\n    model: \"text-embedding-ada-002\",\n    input: \"The quick brown fox jumped over the lazy dog\",\n    encoding_format: \"float\",\n  });\n\n  console.log(embedding);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.embeddings.create(\n  model=\"text-embedding-ada-002\",\n  input=\"The food was delicious and the waiter...\",\n  encoding_format=\"float\"\n)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"embedding\",\n      \"embedding\": [\n        0.0023064255,\n        -0.009327292,\n        .... (1536 floats total for ada-002)\n        -0.0028842222,\n      ],\n      \"index\": 0\n    }\n  ],\n  \"model\": \"text-embedding-ada-002\",\n  \"usage\": {\n    \"prompt_tokens\": 8,\n    \"total_tokens\": 8\n  }\n}\n"
        group: embeddings
        name: Create embeddings
        returns: A list of [embedding](/docs/api-reference/embeddings/object) objects.
  /files:
    get:
      operationId: listFiles
      parameters:
        - description: Only return files with the given purpose.
          in: query
          name: purpose
          required: false
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 10,000, and the default is 10,000.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 10000
            type: integer
        - description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          in: query
          name: order
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFilesResponse'
          description: OK
      summary: Returns a list of files.
      tags:
        - Files
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/files \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.files.list();\n\n  for await (const file of list) {\n    console.log(file);\n  }\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.files.list()\n"
          response: "{\n  \"data\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 175,\n      \"created_at\": 1613677385,\n      \"filename\": \"salesOverview.pdf\",\n      \"purpose\": \"assistants\",\n    },\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"file\",\n      \"bytes\": 140,\n      \"created_at\": 1613779121,\n      \"filename\": \"puppy.jsonl\",\n      \"purpose\": \"fine-tune\",\n    }\n  ],\n  \"object\": \"list\"\n}\n"
        group: files
        name: List files
        returns: A list of [File](/docs/api-reference/files/object) objects.
    post:
      operationId: createFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateFileRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFile'
          description: OK
      summary: "Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.\n\nThe Assistants API supports files up to 2 million tokens and of specific file types. See the [Assistants Tools guide](/docs/assistants/tools) for details.\n\nThe Fine-tuning API only supports `.jsonl` files. The input also has certain required formats for fine-tuning [chat](/docs/api-reference/fine-tuning/chat-input) or [completions](/docs/api-reference/fine-tuning/completions-input) models.\n\nThe Batch API only supports `.jsonl` files up to 200 MB in size. The input also has a specific required [format](/docs/api-reference/batch/request-input).\n\nPlease [contact us](https://help.openai.com/) if you need to increase these storage limits.\n"
      tags:
        - Files
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/files \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -F purpose=\"fine-tune\" \\\n  -F file=\"@mydata.jsonl\"\n"
            node.js: "import fs from \"fs\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const file = await openai.files.create({\n    file: fs.createReadStream(\"mydata.jsonl\"),\n    purpose: \"fine-tune\",\n  });\n\n  console.log(file);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.files.create(\n  file=open(\"mydata.jsonl\", \"rb\"),\n  purpose=\"fine-tune\"\n)\n"
          response: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"file\",\n  \"bytes\": 120000,\n  \"created_at\": 1677610602,\n  \"filename\": \"mydata.jsonl\",\n  \"purpose\": \"fine-tune\",\n}\n"
        group: files
        name: Upload file
        returns: The uploaded [File](/docs/api-reference/files/object) object.
  /files/{file_id}:
    delete:
      operationId: deleteFile
      parameters:
        - description: The ID of the file to use for this request.
          in: path
          name: file_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteFileResponse'
          description: OK
      summary: Delete a file.
      tags:
        - Files
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/files/file-abc123 \\\n  -X DELETE \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const file = await openai.files.del(\"file-abc123\");\n\n  console.log(file);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.files.delete(\"file-abc123\")\n"
          response: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"file\",\n  \"deleted\": true\n}\n"
        group: files
        name: Delete file
        returns: Deletion status.
    get:
      operationId: retrieveFile
      parameters:
        - description: The ID of the file to use for this request.
          in: path
          name: file_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenAIFile'
          description: OK
      summary: Returns information about a specific file.
      tags:
        - Files
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/files/file-abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const file = await openai.files.retrieve(\"file-abc123\");\n\n  console.log(file);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.files.retrieve(\"file-abc123\")\n"
          response: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"file\",\n  \"bytes\": 120000,\n  \"created_at\": 1677610602,\n  \"filename\": \"mydata.jsonl\",\n  \"purpose\": \"fine-tune\",\n}\n"
        group: files
        name: Retrieve file
        returns: The [File](/docs/api-reference/files/object) object matching the specified ID.
  /files/{file_id}/content:
    get:
      operationId: downloadFile
      parameters:
        - description: The ID of the file to use for this request.
          in: path
          name: file_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
      summary: Returns the contents of the specified file.
      tags:
        - Files
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/files/file-abc123/content \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" > file.jsonl\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const file = await openai.files.content(\"file-abc123\");\n\n  console.log(file);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ncontent = client.files.content(\"file-abc123\")\n"
        group: files
        name: Retrieve file content
        returns: The file content.
  /fine_tuning/jobs:
    get:
      operationId: listPaginatedFineTuningJobs
      parameters:
        - description: Identifier for the last job from the previous pagination request.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: Number of fine-tuning jobs to retrieve.
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "Optional metadata filter. To filter, use the syntax `metadata[k]=v`. Alternatively, set `metadata=null` to indicate no metadata.\n"
          explode: true
          in: query
          name: metadata
          required: false
          schema:
            additionalProperties:
              type: string
            nullable: true
            type: object
          style: deepObject
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListPaginatedFineTuningJobsResponse'
          description: OK
      summary: "List your organization's fine-tuning jobs\n"
      tags:
        - Fine-tuning
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/fine_tuning/jobs?limit=2&metadata[key]=value \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.fineTuning.jobs.list();\n\n  for await (const fineTune of list) {\n    console.log(fineTune);\n  }\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.fine_tuning.jobs.list()\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"fine_tuning.job\",\n      \"id\": \"ftjob-abc123\",\n      \"model\": \"gpt-4o-mini-2024-07-18\",\n      \"created_at\": 1721764800,\n      \"fine_tuned_model\": null,\n      \"organization_id\": \"org-123\",\n      \"result_files\": [],\n      \"status\": \"queued\",\n      \"validation_file\": null,\n      \"training_file\": \"file-abc123\",\n      \"metadata\": {\n        \"key\": \"value\"\n      }\n    },\n    { ... },\n    { ... }\n  ], \"has_more\": true\n}\n"
        group: fine-tuning
        name: List fine-tuning jobs
        returns: A list of paginated [fine-tuning job](/docs/api-reference/fine-tuning/object) objects.
    post:
      operationId: createFineTuningJob
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFineTuningJobRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJob'
          description: OK
      summary: "Creates a fine-tuning job which begins the process of creating a new model from a given dataset.\n\nResponse includes details of the enqueued job including job status and the name of the fine-tuned models once complete.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n"
      tags:
        - Fine-tuning
      x-oaiMeta:
        example:
          request:
            curl: "curl https://api.openai.com/v1/fine_tuning/jobs \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"training_file\": \"file-BK7bzQj3FfZFXr7DbL6xJwfo\",\n    \"model\": \"gpt-4o-mini\"\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTuning.jobs.create({\n    training_file: \"file-abc123\"\n  });\n\n  console.log(fineTune);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.fine_tuning.jobs.create(\n  training_file=\"file-abc123\",\n  model=\"gpt-4o-mini\"\n)\n"
          response: "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"gpt-4o-mini-2024-07-18\",\n  \"created_at\": 1721764800,\n  \"fine_tuned_model\": null,\n  \"organization_id\": \"org-123\",\n  \"result_files\": [],\n  \"status\": \"queued\",\n  \"validation_file\": null,\n  \"training_file\": \"file-abc123\",\n  \"method\": {\n    \"type\": \"supervised\",\n    \"supervised\": {\n      \"hyperparameters\": {\n        \"batch_size\": \"auto\",\n        \"learning_rate_multiplier\": \"auto\",\n        \"n_epochs\": \"auto\",\n      }\n    }\n  },\n  \"metadata\": null\n}\n"
          title: Default
        group: fine-tuning
        name: Create fine-tuning job
        returns: A [fine-tuning.job](/docs/api-reference/fine-tuning/object) object.
  /fine_tuning/jobs/{fine_tuning_job_id}:
    get:
      operationId: retrieveFineTuningJob
      parameters:
        - description: "The ID of the fine-tuning job.\n"
          in: path
          name: fine_tuning_job_id
          required: true
          schema:
            example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJob'
          description: OK
      summary: "Get info about a fine-tuning job.\n\n[Learn more about fine-tuning](/docs/guides/fine-tuning)\n"
      tags:
        - Fine-tuning
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/fine_tuning/jobs/ft-AF1WoRqd3aJAHsqc9NY7iL8F \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTuning.jobs.retrieve(\"ftjob-abc123\");\n\n  console.log(fineTune);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.fine_tuning.jobs.retrieve(\"ftjob-abc123\")\n"
          response: "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"davinci-002\",\n  \"created_at\": 1692661014,\n  \"finished_at\": 1692661190,\n  \"fine_tuned_model\": \"ft:davinci-002:my-org:custom_suffix:7q8mpxmy\",\n  \"organization_id\": \"org-123\",\n  \"result_files\": [\n      \"file-abc123\"\n  ],\n  \"status\": \"succeeded\",\n  \"validation_file\": null,\n  \"training_file\": \"file-abc123\",\n  \"hyperparameters\": {\n      \"n_epochs\": 4,\n      \"batch_size\": 1,\n      \"learning_rate_multiplier\": 1.0\n  },\n  \"trained_tokens\": 5768,\n  \"integrations\": [],\n  \"seed\": 0,\n  \"estimated_finish\": 0,\n  \"method\": {\n    \"type\": \"supervised\",\n    \"supervised\": {\n      \"hyperparameters\": {\n        \"n_epochs\": 4,\n        \"batch_size\": 1,\n        \"learning_rate_multiplier\": 1.0\n      }\n    }\n  }\n}\n"
        group: fine-tuning
        name: Retrieve fine-tuning job
        returns: The [fine-tuning](/docs/api-reference/fine-tuning/object) object with the given ID.
  /fine_tuning/jobs/{fine_tuning_job_id}/cancel:
    post:
      operationId: cancelFineTuningJob
      parameters:
        - description: "The ID of the fine-tuning job to cancel.\n"
          in: path
          name: fine_tuning_job_id
          required: true
          schema:
            example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FineTuningJob'
          description: OK
      summary: "Immediately cancel a fine-tune job.\n"
      tags:
        - Fine-tuning
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/cancel \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const fineTune = await openai.fineTuning.jobs.cancel(\"ftjob-abc123\");\n\n  console.log(fineTune);\n}\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.fine_tuning.jobs.cancel(\"ftjob-abc123\")\n"
          response: "{\n  \"object\": \"fine_tuning.job\",\n  \"id\": \"ftjob-abc123\",\n  \"model\": \"gpt-4o-mini-2024-07-18\",\n  \"created_at\": 1721764800,\n  \"fine_tuned_model\": null,\n  \"organization_id\": \"org-123\",\n  \"result_files\": [],\n  \"status\": \"cancelled\",\n  \"validation_file\": \"file-abc123\",\n  \"training_file\": \"file-abc123\"\n}\n"
        group: fine-tuning
        name: Cancel fine-tuning
        returns: The cancelled [fine-tuning](/docs/api-reference/fine-tuning/object) object.
  /fine_tuning/jobs/{fine_tuning_job_id}/checkpoints:
    get:
      operationId: listFineTuningJobCheckpoints
      parameters:
        - description: "The ID of the fine-tuning job to get checkpoints for.\n"
          in: path
          name: fine_tuning_job_id
          required: true
          schema:
            example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
            type: string
        - description: Identifier for the last checkpoint ID from the previous pagination request.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: Number of checkpoints to retrieve.
          in: query
          name: limit
          required: false
          schema:
            default: 10
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFineTuningJobCheckpointsResponse'
          description: OK
      summary: "List checkpoints for a fine-tuning job.\n"
      tags:
        - Fine-tuning
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/checkpoints \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
          response: "{\n  \"object\": \"list\"\n  \"data\": [\n    {\n      \"object\": \"fine_tuning.job.checkpoint\",\n      \"id\": \"ftckpt_zc4Q7MP6XxulcVzj4MZdwsAB\",\n      \"created_at\": 1721764867,\n      \"fine_tuned_model_checkpoint\": \"ft:gpt-4o-mini-2024-07-18:my-org:custom-suffix:96olL566:ckpt-step-2000\",\n      \"metrics\": {\n        \"full_valid_loss\": 0.134,\n        \"full_valid_mean_token_accuracy\": 0.874\n      },\n      \"fine_tuning_job_id\": \"ftjob-abc123\",\n      \"step_number\": 2000,\n    },\n    {\n      \"object\": \"fine_tuning.job.checkpoint\",\n      \"id\": \"ftckpt_enQCFmOTGj3syEpYVhBRLTSy\",\n      \"created_at\": 1721764800,\n      \"fine_tuned_model_checkpoint\": \"ft:gpt-4o-mini-2024-07-18:my-org:custom-suffix:7q8mpxmy:ckpt-step-1000\",\n      \"metrics\": {\n        \"full_valid_loss\": 0.167,\n        \"full_valid_mean_token_accuracy\": 0.781\n      },\n      \"fine_tuning_job_id\": \"ftjob-abc123\",\n      \"step_number\": 1000,\n    },\n  ],\n  \"first_id\": \"ftckpt_zc4Q7MP6XxulcVzj4MZdwsAB\",\n  \"last_id\": \"ftckpt_enQCFmOTGj3syEpYVhBRLTSy\",\n  \"has_more\": true\n}\n"
        group: fine-tuning
        name: List fine-tuning checkpoints
        returns: A list of fine-tuning [checkpoint objects](/docs/api-reference/fine-tuning/checkpoint-object) for a fine-tuning job.
  /fine_tuning/jobs/{fine_tuning_job_id}/events:
    get:
      operationId: listFineTuningEvents
      parameters:
        - description: "The ID of the fine-tuning job to get events for.\n"
          in: path
          name: fine_tuning_job_id
          required: true
          schema:
            example: ft-AF1WoRqd3aJAHsqc9NY7iL8F
            type: string
        - description: Identifier for the last event from the previous pagination request.
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: Number of events to retrieve.
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListFineTuningJobEventsResponse'
          description: OK
      summary: "Get status updates for a fine-tuning job.\n"
      tags:
        - Fine-tuning
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/fine_tuning/jobs/ftjob-abc123/events \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.fineTuning.list_events(id=\"ftjob-abc123\", limit=2);\n\n  for await (const fineTune of list) {\n    console.log(fineTune);\n  }\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.fine_tuning.jobs.list_events(\n  fine_tuning_job_id=\"ftjob-abc123\",\n  limit=2\n)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"fine_tuning.job.event\",\n      \"id\": \"ft-event-ddTJfwuMVpfLXseO0Am0Gqjm\",\n      \"created_at\": 1721764800,\n      \"level\": \"info\",\n      \"message\": \"Fine tuning job successfully completed\",\n      \"data\": null,\n      \"type\": \"message\"\n    },\n    {\n      \"object\": \"fine_tuning.job.event\",\n      \"id\": \"ft-event-tyiGuB72evQncpH87xe505Sv\",\n      \"created_at\": 1721764800,\n      \"level\": \"info\",\n      \"message\": \"New fine-tuned model created: ft:gpt-4o-mini:openai::7p4lURel\",\n      \"data\": null,\n      \"type\": \"message\"\n    }\n  ],\n  \"has_more\": true\n}\n"
        group: fine-tuning
        name: List fine-tuning events
        returns: A list of fine-tuning event objects.
  /images/edits:
    post:
      operationId: createImageEdit
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageEditRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
          description: OK
      summary: Creates an edited or extended image given an original image and a prompt.
      tags:
        - Images
      x-oaiMeta:
        examples:
          request:
            csharp: "using System;\n\nusing OpenAI.Images;\n\nImageClient client = new(\n    model: \"dall-e-2\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nGeneratedImage image = client.GenerateImageEdit(\n    imageFilePath: \"otter.png\",\n    prompt: \"A cute baby sea otter wearing a beret\",\n    maskFilePath: \"mask.png\"\n);\n\nConsole.WriteLine(image.ImageUri);\n"
            curl: "curl https://api.openai.com/v1/images/edits \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -F image=\"@otter.png\" \\\n  -F mask=\"@mask.png\" \\\n  -F prompt=\"A cute baby sea otter wearing a beret\" \\\n  -F n=2 \\\n  -F size=\"1024x1024\"\n"
            node.js: "import fs from \"fs\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const image = await openai.images.edit({\n    image: fs.createReadStream(\"otter.png\"),\n    mask: fs.createReadStream(\"mask.png\"),\n    prompt: \"A cute baby sea otter wearing a beret\",\n  });\n\n  console.log(image.data);\n}\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.images.edit(\n  image=open(\"otter.png\", \"rb\"),\n  mask=open(\"mask.png\", \"rb\"),\n  prompt=\"A cute baby sea otter wearing a beret\",\n  n=2,\n  size=\"1024x1024\"\n)\n"
          response: "{\n  \"created\": 1589478378,\n  \"data\": [\n    {\n      \"url\": \"https://...\"\n    },\n    {\n      \"url\": \"https://...\"\n    }\n  ]\n}\n"
        group: images
        name: Create image edit
        returns: Returns a list of [image](/docs/api-reference/images/object) objects.
  /images/generations:
    post:
      operationId: createImage
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateImageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
          description: OK
      summary: Creates an image given a prompt.
      tags:
        - Images
      x-oaiMeta:
        examples:
          request:
            csharp: "using System;\n\nusing OpenAI.Images;\n\nImageClient client = new(\n    model: \"dall-e-3\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nGeneratedImage image = client.GenerateImage(prompt: \"A cute baby sea otter.\");\n\nConsole.WriteLine(image.ImageUri);\n"
            curl: "curl https://api.openai.com/v1/images/generations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"dall-e-3\",\n    \"prompt\": \"A cute baby sea otter\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const image = await openai.images.generate({ model: \"dall-e-3\", prompt: \"A cute baby sea otter\" });\n\n  console.log(image.data);\n}\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.images.generate(\n  model=\"dall-e-3\",\n  prompt=\"A cute baby sea otter\",\n  n=1,\n  size=\"1024x1024\"\n)\n"
          response: "{\n  \"created\": 1589478378,\n  \"data\": [\n    {\n      \"url\": \"https://...\"\n    },\n    {\n      \"url\": \"https://...\"\n    }\n  ]\n}\n"
        group: images
        name: Create image
        returns: Returns a list of [image](/docs/api-reference/images/object) objects.
  /images/variations:
    post:
      operationId: createImageVariation
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateImageVariationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImagesResponse'
          description: OK
      summary: Creates a variation of a given image.
      tags:
        - Images
      x-oaiMeta:
        examples:
          request:
            csharp: "using System;\n\nusing OpenAI.Images;\n\nImageClient client = new(\n    model: \"dall-e-2\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nGeneratedImage image = client.GenerateImageVariation(imageFilePath: \"otter.png\");\n\nConsole.WriteLine(image.ImageUri);\n"
            curl: "curl https://api.openai.com/v1/images/variations \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -F image=\"@otter.png\" \\\n  -F n=2 \\\n  -F size=\"1024x1024\"\n"
            node.js: "import fs from \"fs\";\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const image = await openai.images.createVariation({\n    image: fs.createReadStream(\"otter.png\"),\n  });\n\n  console.log(image.data);\n}\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nresponse = client.images.create_variation(\n  image=open(\"image_edit_original.png\", \"rb\"),\n  n=2,\n  size=\"1024x1024\"\n)\n"
          response: "{\n  \"created\": 1589478378,\n  \"data\": [\n    {\n      \"url\": \"https://...\"\n    },\n    {\n      \"url\": \"https://...\"\n    }\n  ]\n}\n"
        group: images
        name: Create image variation
        returns: Returns a list of [image](/docs/api-reference/images/object) objects.
  /models:
    get:
      operationId: listModels
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListModelsResponse'
          description: OK
      summary: Lists the currently available models, and provides basic information about each one such as the owner and availability.
      tags:
        - Models
      x-oaiMeta:
        examples:
          request:
            csharp: "using System;\n\nusing OpenAI.Models;\n\nOpenAIModelClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nforeach (var model in client.GetModels().Value)\n{\n    Console.WriteLine(model.Id);\n}\n"
            curl: "curl https://api.openai.com/v1/models \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const list = await openai.models.list();\n\n  for await (const model of list) {\n    console.log(model);\n  }\n}\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.models.list()\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"model-id-0\",\n      \"object\": \"model\",\n      \"created\": 1686935002,\n      \"owned_by\": \"organization-owner\"\n    },\n    {\n      \"id\": \"model-id-1\",\n      \"object\": \"model\",\n      \"created\": 1686935002,\n      \"owned_by\": \"organization-owner\",\n    },\n    {\n      \"id\": \"model-id-2\",\n      \"object\": \"model\",\n      \"created\": 1686935002,\n      \"owned_by\": \"openai\"\n    },\n  ],\n  \"object\": \"list\"\n}\n"
        group: models
        name: List models
        returns: A list of [model](/docs/api-reference/models/object) objects.
  /models/{model}:
    delete:
      operationId: deleteModel
      parameters:
        - description: The model to delete
          in: path
          name: model
          required: true
          schema:
            example: ft:gpt-4o-mini:acemeco:suffix:abc123
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteModelResponse'
          description: OK
      summary: Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
      tags:
        - Models
      x-oaiMeta:
        examples:
          request:
            csharp: "using System;\nusing System.ClientModel;\n\nusing OpenAI.Models;\n\nOpenAIModelClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nClientResult success = client.DeleteModel(\"ft:gpt-4o-mini:acemeco:suffix:abc123\");\nConsole.WriteLine(success);\n"
            curl: "curl https://api.openai.com/v1/models/ft:gpt-4o-mini:acemeco:suffix:abc123 \\\n  -X DELETE \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const model = await openai.models.del(\"ft:gpt-4o-mini:acemeco:suffix:abc123\");\n\n  console.log(model);\n}\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.models.delete(\"ft:gpt-4o-mini:acemeco:suffix:abc123\")\n"
          response: "{\n  \"id\": \"ft:gpt-4o-mini:acemeco:suffix:abc123\",\n  \"object\": \"model\",\n  \"deleted\": true\n}\n"
        group: models
        name: Delete a fine-tuned model
        returns: Deletion status.
    get:
      operationId: retrieveModel
      parameters:
        - description: The ID of the model to use for this request
          in: path
          name: model
          required: true
          schema:
            example: gpt-4o-mini
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'
          description: OK
      summary: Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
      tags:
        - Models
      x-oaiMeta:
        examples:
          request:
            csharp: "using System;\nusing System.ClientModel;\n\nusing OpenAI.Models;\n\n  OpenAIModelClient client = new(\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nClientResult<OpenAIModel> model = client.GetModel(\"babbage-002\");\nConsole.WriteLine(model.Value.Id);\n"
            curl: "curl https://api.openai.com/v1/models/VAR_chat_model_id \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const model = await openai.models.retrieve(\"VAR_chat_model_id\");\n\n  console.log(model);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nclient.models.retrieve(\"VAR_chat_model_id\")\n"
          response: "{\n  \"id\": \"VAR_chat_model_id\",\n  \"object\": \"model\",\n  \"created\": 1686935002,\n  \"owned_by\": \"openai\"\n}\n"
        group: models
        name: Retrieve model
        returns: The [model](/docs/api-reference/models/object) object matching the specified ID.
  /moderations:
    post:
      operationId: createModeration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModerationRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateModerationResponse'
          description: OK
      summary: "Classifies if text and/or image inputs are potentially harmful. Learn\nmore in the [moderation guide](/docs/guides/moderation).\n"
      tags:
        - Moderations
      x-oaiMeta:
        example:
          request:
            csharp: "using System;\nusing System.ClientModel;\n\nusing OpenAI.Moderations;\n\nModerationClient client = new(\n    model: \"omni-moderation-latest\",\n    apiKey: Environment.GetEnvironmentVariable(\"OPENAI_API_KEY\")\n);\n\nClientResult<ModerationResult> moderation = client.ClassifyText(\"I want to kill them.\");\n"
            curl: "curl https://api.openai.com/v1/moderations \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"input\": \"I want to kill them.\"\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const moderation = await openai.moderations.create({ input: \"I want to kill them.\" });\n\n  console.log(moderation);\n}\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nmoderation = client.moderations.create(input=\"I want to kill them.\")\nprint(moderation)\n"
          response: "{\n  \"id\": \"modr-AB8CjOTu2jiq12hp1AQPfeqFWaORR\",\n  \"model\": \"text-moderation-007\",\n  \"results\": [\n    {\n      \"flagged\": true,\n      \"categories\": {\n        \"sexual\": false,\n        \"hate\": false,\n        \"harassment\": true,\n        \"self-harm\": false,\n        \"sexual/minors\": false,\n        \"hate/threatening\": false,\n        \"violence/graphic\": false,\n        \"self-harm/intent\": false,\n        \"self-harm/instructions\": false,\n        \"harassment/threatening\": true,\n        \"violence\": true\n      },\n      \"category_scores\": {\n        \"sexual\": 0.000011726012417057063,\n        \"hate\": 0.22706663608551025,\n        \"harassment\": 0.5215635299682617,\n        \"self-harm\": 2.227119921371923e-6,\n        \"sexual/minors\": 7.107352217872176e-8,\n        \"hate/threatening\": 0.023547329008579254,\n        \"violence/graphic\": 0.00003391829886822961,\n        \"self-harm/intent\": 1.646940972932498e-6,\n        \"self-harm/instructions\": 1.1198755256458526e-9,\n        \"harassment/threatening\": 0.5694745779037476,\n        \"violence\": 0.9971134662628174\n      }\n    }\n  ]\n}\n"
          title: Single string
        group: moderations
        name: Create moderation
        returns: A [moderation](/docs/api-reference/moderations/object) object.
  /organization/admin_api_keys:
    get:
      description: Retrieve a paginated list of organization admin API keys.
      operationId: admin-api-keys-list
      parameters:
        - in: query
          name: after
          required: false
          schema:
            description: Return keys with IDs that come after this ID in the pagination order.
            nullable: true
            type: string
        - in: query
          name: order
          required: false
          schema:
            default: asc
            description: Order results by creation time, ascending or descending.
            enum:
              - asc
              - desc
            type: string
        - in: query
          name: limit
          required: false
          schema:
            default: 20
            description: Maximum number of keys to return.
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyList'
          description: A list of organization API keys.
      summary: List organization API keys
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/admin_api_keys?after=key_abc&limit=20 \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"organization.admin_api_key\",\n      \"id\": \"key_abc\",\n      \"name\": \"Main Admin Key\",\n      \"redacted_value\": \"sk-admin...def\",\n      \"created_at\": 1711471533,\n      \"owner\": {\n        \"type\": \"service_account\",\n        \"object\": \"organization.service_account\",\n        \"id\": \"sa_456\",\n        \"name\": \"My Service Account\",\n        \"created_at\": 1711471533,\n        \"role\": \"member\"\n      }\n    }\n  ],\n  \"first_id\": \"key_abc\",\n  \"last_id\": \"key_abc\",\n  \"has_more\": false\n}\n"
        group: administration
        name: List admin API keys
        returns: A list of admin API key objects.
    post:
      description: Create a new admin-level API key for the organization.
      operationId: admin-api-keys-create
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  example: New Admin Key
                  type: string
              required:
                - name
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminApiKey'
          description: The newly created admin API key.
      summary: Create an organization admin API key
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/admin_api_keys \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n      \"name\": \"New Admin Key\"\n  }'\n"
          response: "{\n  \"object\": \"organization.admin_api_key\",\n  \"id\": \"key_xyz\",\n  \"name\": \"New Admin Key\",\n  \"redacted_value\": \"sk-admin...xyz\",\n  \"created_at\": 1711471533,\n  \"owner\": {\n    \"type\": \"user\",\n    \"object\": \"organization.user\",\n    \"id\": \"user_123\",\n    \"name\": \"John Doe\",\n    \"created_at\": 1711471533,\n    \"role\": \"owner\"\n  },\n  \"value\": \"sk-admin-1234abcd\"\n}\n"
        group: administration
        name: Create admin API key
        returns: The created admin API key object.
  /organization/admin_api_keys/{key_id}:
    delete:
      description: Delete the specified admin API key.
      operationId: admin-api-keys-delete
      parameters:
        - in: path
          name: key_id
          required: true
          schema:
            description: The ID of the API key to be deleted.
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  deleted:
                    example: true
                    type: boolean
                  id:
                    example: key_abc
                    type: string
                  object:
                    example: organization.admin_api_key.deleted
                    type: string
                type: object
          description: Confirmation that the API key was deleted.
      summary: Delete an organization admin API key
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/admin_api_keys/key_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n  \"id\": \"key_abc\",\n  \"object\": \"organization.admin_api_key.deleted\",\n  \"deleted\": true\n}\n"
        group: administration
        name: Delete admin API key
        returns: A confirmation object indicating the key was deleted.
    get:
      description: Get details for a specific organization API key by its ID.
      operationId: admin-api-keys-get
      parameters:
        - in: path
          name: key_id
          required: true
          schema:
            description: The ID of the API key.
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminApiKey'
          description: Details of the requested API key.
      summary: Retrieve a single organization API key
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/admin_api_keys/key_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n  \"object\": \"organization.admin_api_key\",\n  \"id\": \"key_abc\",\n  \"name\": \"Main Admin Key\",\n  \"redacted_value\": \"sk-admin...xyz\",\n  \"created_at\": 1711471533,\n  \"owner\": {\n    \"type\": \"user\",\n    \"object\": \"organization.user\",\n    \"id\": \"user_123\",\n    \"name\": \"John Doe\",\n    \"created_at\": 1711471533,\n    \"role\": \"owner\"\n  }\n}\n"
        group: administration
        name: Retrieve admin API key
        returns: The requested admin API key object.
  /organization/audit_logs:
    get:
      operationId: list-audit-logs
      parameters:
        - description: Return only events whose `effective_at` (Unix seconds) is in this range.
          in: query
          name: effective_at
          required: false
          schema:
            properties:
              gt:
                description: Return only events whose `effective_at` (Unix seconds) is greater than this value.
                type: integer
              gte:
                description: Return only events whose `effective_at` (Unix seconds) is greater than or equal to this value.
                type: integer
              lt:
                description: Return only events whose `effective_at` (Unix seconds) is less than this value.
                type: integer
              lte:
                description: Return only events whose `effective_at` (Unix seconds) is less than or equal to this value.
                type: integer
            type: object
        - description: Return only events for these projects.
          in: query
          name: project_ids[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only events with a `type` in one of these values. For example, `project.created`. For all options, see the documentation for the [audit log object](/docs/api-reference/audit-logs/object).
          in: query
          name: event_types[]
          required: false
          schema:
            items:
              $ref: '#/components/schemas/AuditLogEventType'
            type: array
        - description: Return only events performed by these actors. Can be a user ID, a service account ID, or an api key tracking ID.
          in: query
          name: actor_ids[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only events performed by users with these emails.
          in: query
          name: actor_emails[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only events performed on these targets. For example, a project ID updated.
          in: query
          name: resource_ids[]
          required: false
          schema:
            items:
              type: string
            type: array
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          schema:
            type: string
        - description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          in: query
          name: before
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAuditLogsResponse'
          description: Audit logs listed successfully.
      summary: List user actions and configuration changes within this organization.
      tags:
        - Audit Logs
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/audit_logs \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\": \"audit_log-xxx_yyyymmdd\",\n            \"type\": \"project.archived\",\n            \"effective_at\": 1722461446,\n            \"actor\": {\n                \"type\": \"api_key\",\n                \"api_key\": {\n                    \"type\": \"user\",\n                    \"user\": {\n                        \"id\": \"user-xxx\",\n                        \"email\": \"user@example.com\"\n                    }\n                }\n            },\n            \"project.archived\": {\n                \"id\": \"proj_abc\"\n            },\n        },\n        {\n            \"id\": \"audit_log-yyy__20240101\",\n            \"type\": \"api_key.updated\",\n            \"effective_at\": 1720804190,\n            \"actor\": {\n                \"type\": \"session\",\n                \"session\": {\n                    \"user\": {\n                        \"id\": \"user-xxx\",\n                        \"email\": \"user@example.com\"\n                    },\n                    \"ip_address\": \"127.0.0.1\",\n                    \"user_agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36\",\n                    \"ja3\": \"a497151ce4338a12c4418c44d375173e\",\n                    \"ja4\": \"q13d0313h3_55b375c5d22e_c7319ce65786\",\n                    \"ip_address_details\": {\n                      \"country\": \"US\",\n                      \"city\": \"San Francisco\",\n                      \"region\": \"California\",\n                      \"region_code\": \"CA\",\n                      \"asn\": \"1234\",\n                      \"latitude\": \"37.77490\",\n                      \"longitude\": \"-122.41940\"\n                    }\n                }\n            },\n            \"api_key.updated\": {\n                \"id\": \"key_xxxx\",\n                \"data\": {\n                    \"scopes\": [\"resource_2.operation_2\"]\n                }\n            },\n        }\n    ],\n    \"first_id\": \"audit_log-xxx__20240101\",\n    \"last_id\": \"audit_log_yyy__20240101\",\n    \"has_more\": true\n}\n"
        group: audit-logs
        name: List audit logs
        returns: A list of paginated [Audit Log](/docs/api-reference/audit-logs/object) objects.
  /organization/costs:
    get:
      operationId: usage-costs
      parameters:
        - description: Start time (Unix seconds) of the query time range, inclusive.
          in: query
          name: start_time
          required: true
          schema:
            type: integer
        - description: End time (Unix seconds) of the query time range, exclusive.
          in: query
          name: end_time
          required: false
          schema:
            type: integer
        - description: Width of each time bucket in response. Currently only `1d` is supported, default to `1d`.
          in: query
          name: bucket_width
          required: false
          schema:
            default: 1d
            enum:
              - 1d
            type: string
        - description: Return only costs for these projects.
          in: query
          name: project_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Group the costs by the specified fields. Support fields include `project_id`, `line_item` and any combination of them.
          in: query
          name: group_by
          required: false
          schema:
            items:
              enum:
                - project_id
                - line_item
              type: string
            type: array
        - description: "A limit on the number of buckets to be returned. Limit can range between 1 and 180, and the default is 7.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 7
            type: integer
        - description: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
          in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Costs data retrieved successfully.
      summary: Get costs details for the organization.
      tags:
        - Usage
      x-oaiMeta:
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/organization/costs?start_time=1730419200&limit=1\" \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"page\",\n    \"data\": [\n        {\n            \"object\": \"bucket\",\n            \"start_time\": 1730419200,\n            \"end_time\": 1730505600,\n            \"results\": [\n                {\n                    \"object\": \"organization.costs.result\",\n                    \"amount\": {\n                        \"value\": 0.06,\n                        \"currency\": \"usd\"\n                    },\n                    \"line_item\": null,\n                    \"project_id\": null\n                }\n            ]\n        }\n    ],\n    \"has_more\": false,\n    \"next_page\": null\n}\n"
        group: usage-costs
        name: Costs
        returns: A list of paginated, time bucketed [Costs](/docs/api-reference/usage/costs_object) objects.
  /organization/invites:
    get:
      operationId: list-invites
      parameters:
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteListResponse'
          description: Invites listed successfully.
      summary: Returns a list of invites in the organization.
      tags:
        - Invites
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/invites?after=invite-abc&limit=20 \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"object\": \"organization.invite\",\n      \"id\": \"invite-abc\",\n      \"email\": \"user@example.com\",\n      \"role\": \"owner\",\n      \"status\": \"accepted\",\n      \"invited_at\": 1711471533,\n      \"expires_at\": 1711471533,\n      \"accepted_at\": 1711471533\n    }\n  ],\n  \"first_id\": \"invite-abc\",\n  \"last_id\": \"invite-abc\",\n  \"has_more\": false\n}\n"
        group: administration
        name: List invites
        returns: A list of [Invite](/docs/api-reference/invite/object) objects.
    post:
      operationId: inviteUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteRequest'
        description: The invite request payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invite'
          description: User invited successfully.
      summary: Create an invite for a user to the organization. The invite must be accepted by the user before they have access to the organization.
      tags:
        - Invites
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/invites \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n      \"email\": \"anotheruser@example.com\",\n      \"role\": \"reader\",\n      \"projects\": [\n        {\n          \"id\": \"project-xyz\",\n          \"role\": \"member\"\n        },\n        {\n          \"id\": \"project-abc\",\n          \"role\": \"owner\"\n        }\n      ]\n  }'\n"
          response: "{\n  \"object\": \"organization.invite\",\n  \"id\": \"invite-def\",\n  \"email\": \"anotheruser@example.com\",\n  \"role\": \"reader\",\n  \"status\": \"pending\",\n  \"invited_at\": 1711471533,\n  \"expires_at\": 1711471533,\n  \"accepted_at\": null,\n  \"projects\": [\n    {\n      \"id\": \"project-xyz\",\n      \"role\": \"member\"\n    },\n    {\n      \"id\": \"project-abc\",\n      \"role\": \"owner\"\n    }\n  ]\n}\n"
        group: administration
        name: Create invite
        returns: The created [Invite](/docs/api-reference/invite/object) object.
  /organization/invites/{invite_id}:
    delete:
      operationId: delete-invite
      parameters:
        - description: The ID of the invite to delete.
          in: path
          name: invite_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InviteDeleteResponse'
          description: Invite deleted successfully.
      summary: Delete an invite. If the invite has already been accepted, it cannot be deleted.
      tags:
        - Invites
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/invites/invite-abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.invite.deleted\",\n    \"id\": \"invite-abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete invite
        returns: Confirmation that the invite has been deleted
    get:
      operationId: retrieve-invite
      parameters:
        - description: The ID of the invite to retrieve.
          in: path
          name: invite_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invite'
          description: Invite retrieved successfully.
      summary: Retrieves an invite.
      tags:
        - Invites
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/invites/invite-abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.invite\",\n    \"id\": \"invite-abc\",\n    \"email\": \"user@example.com\",\n    \"role\": \"owner\",\n    \"status\": \"accepted\",\n    \"invited_at\": 1711471533,\n    \"expires_at\": 1711471533,\n    \"accepted_at\": 1711471533\n}\n"
        group: administration
        name: Retrieve invite
        returns: The [Invite](/docs/api-reference/invite/object) object matching the specified ID.
  /organization/projects:
    get:
      operationId: list-projects
      parameters:
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: If `true` returns all projects including those that have been `archived`. Archived projects are not included by default.
          in: query
          name: include_archived
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectListResponse'
          description: Projects listed successfully.
      summary: Returns a list of projects.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects?after=proj_abc&limit=20&include_archived=false \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"id\": \"proj_abc\",\n            \"object\": \"organization.project\",\n            \"name\": \"Project example\",\n            \"created_at\": 1711471533,\n            \"archived_at\": null,\n            \"status\": \"active\"\n        }\n    ],\n    \"first_id\": \"proj-abc\",\n    \"last_id\": \"proj-xyz\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List projects
        returns: A list of [Project](/docs/api-reference/projects/object) objects.
    post:
      operationId: create-project
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectCreateRequest'
        description: The project create request payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project created successfully.
      summary: Create a new project in the organization. Projects can be created and archived, but cannot be deleted.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n      \"name\": \"Project ABC\"\n  }'\n"
          response: "{\n    \"id\": \"proj_abc\",\n    \"object\": \"organization.project\",\n    \"name\": \"Project ABC\",\n    \"created_at\": 1711471533,\n    \"archived_at\": null,\n    \"status\": \"active\"\n}\n"
        group: administration
        name: Create project
        returns: The created [Project](/docs/api-reference/projects/object) object.
  /organization/projects/{project_id}:
    get:
      operationId: retrieve-project
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project retrieved successfully.
      summary: Retrieves a project.
      tags:
        - Projects
      x-oaiMeta:
        description: Retrieve a project.
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"id\": \"proj_abc\",\n    \"object\": \"organization.project\",\n    \"name\": \"Project example\",\n    \"created_at\": 1711471533,\n    \"archived_at\": null,\n    \"status\": \"active\"\n}\n"
        group: administration
        name: Retrieve project
        returns: The [Project](/docs/api-reference/projects/object) object matching the specified ID.
    post:
      operationId: modify-project
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUpdateRequest'
        description: The project update request payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project updated successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response when updating the default project.
      summary: Modifies a project in the organization.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n      \"name\": \"Project DEF\"\n  }'\n"
        group: administration
        name: Modify project
        returns: The updated [Project](/docs/api-reference/projects/object) object.
  /organization/projects/{project_id}/api_keys:
    get:
      operationId: list-project-api-keys
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApiKeyListResponse'
          description: Project API keys listed successfully.
      summary: Returns a list of API keys in the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/api_keys?after=key_abc&limit=20 \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"organization.project.api_key\",\n            \"redacted_value\": \"sk-abc...def\",\n            \"name\": \"My API Key\",\n            \"created_at\": 1711471533,\n            \"id\": \"key_abc\",\n            \"owner\": {\n                \"type\": \"user\",\n                \"user\": {\n                    \"object\": \"organization.project.user\",\n                    \"id\": \"user_abc\",\n                    \"name\": \"First Last\",\n                    \"email\": \"user@example.com\",\n                    \"role\": \"owner\",\n                    \"added_at\": 1711471533\n                }\n            }\n        }\n    ],\n    \"first_id\": \"key_abc\",\n    \"last_id\": \"key_xyz\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List project API keys
        returns: A list of [ProjectApiKey](/docs/api-reference/project-api-keys/object) objects.
  /organization/projects/{project_id}/api_keys/{key_id}:
    delete:
      operationId: delete-project-api-key
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: The ID of the API key.
          in: path
          name: key_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApiKeyDeleteResponse'
          description: Project API key deleted successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Deletes an API key from the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/projects/proj_abc/api_keys/key_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.project.api_key.deleted\",\n    \"id\": \"key_abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete project API key
        returns: Confirmation of the key's deletion or an error if the key belonged to a service account
    get:
      operationId: retrieve-project-api-key
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: The ID of the API key.
          in: path
          name: key_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectApiKey'
          description: Project API key retrieved successfully.
      summary: Retrieves an API key in the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/api_keys/key_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.project.api_key\",\n    \"redacted_value\": \"sk-abc...def\",\n    \"name\": \"My API Key\",\n    \"created_at\": 1711471533,\n    \"id\": \"key_abc\",\n    \"owner\": {\n        \"type\": \"user\",\n        \"user\": {\n            \"object\": \"organization.project.user\",\n            \"id\": \"user_abc\",\n            \"name\": \"First Last\",\n            \"email\": \"user@example.com\",\n            \"role\": \"owner\",\n            \"added_at\": 1711471533\n        }\n    }\n}\n"
        group: administration
        name: Retrieve project API key
        returns: The [ProjectApiKey](/docs/api-reference/project-api-keys/object) object matching the specified ID.
  /organization/projects/{project_id}/archive:
    post:
      operationId: archive-project
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: Project archived successfully.
      summary: Archives a project in the organization. Archived projects cannot be used or updated.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/archive \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"id\": \"proj_abc\",\n    \"object\": \"organization.project\",\n    \"name\": \"Project DEF\",\n    \"created_at\": 1711471533,\n    \"archived_at\": 1711471533,\n    \"status\": \"archived\"\n}\n"
        group: administration
        name: Archive project
        returns: The archived [Project](/docs/api-reference/projects/object) object.
  /organization/projects/{project_id}/rate_limits:
    get:
      operationId: list-project-rate-limits
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. The default is 100.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 100
            type: integer
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, beginning with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          in: query
          name: before
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRateLimitListResponse'
          description: Project rate limits listed successfully.
      summary: Returns the rate limits per model for a project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          error_response: "{\n    \"code\": 404,\n    \"message\": \"The project {project_id} was not found\"\n}\n"
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/rate_limits?after=rl_xxx&limit=20 \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n          \"object\": \"project.rate_limit\",\n          \"id\": \"rl-ada\",\n          \"model\": \"ada\",\n          \"max_requests_per_1_minute\": 600,\n          \"max_tokens_per_1_minute\": 150000,\n          \"max_images_per_1_minute\": 10\n        }\n    ],\n    \"first_id\": \"rl-ada\",\n    \"last_id\": \"rl-ada\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List project rate limits
        returns: A list of [ProjectRateLimit](/docs/api-reference/project-rate-limits/object) objects.
  /organization/projects/{project_id}/rate_limits/{rate_limit_id}:
    post:
      operationId: update-project-rate-limits
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: The ID of the rate limit.
          in: path
          name: rate_limit_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectRateLimitUpdateRequest'
        description: The project rate limit update request payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRateLimit'
          description: Project rate limit updated successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Updates a project rate limit.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          error_response: "{\n    \"code\": 404,\n    \"message\": \"The project {project_id} was not found\"\n}\n"
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/rate_limits/rl_xxx \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n      \"max_requests_per_1_minute\": 500\n  }'\n"
          response: "{\n    \"object\": \"project.rate_limit\",\n    \"id\": \"rl-ada\",\n    \"model\": \"ada\",\n    \"max_requests_per_1_minute\": 600,\n    \"max_tokens_per_1_minute\": 150000,\n    \"max_images_per_1_minute\": 10\n  }\n"
        group: administration
        name: Modify project rate limit
        returns: The updated [ProjectRateLimit](/docs/api-reference/project-rate-limits/object) object.
  /organization/projects/{project_id}/service_accounts:
    get:
      operationId: list-project-service-accounts
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccountListResponse'
          description: Project service accounts listed successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response when project is archived.
      summary: Returns a list of service accounts in the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/service_accounts?after=custom_id&limit=20 \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"organization.project.service_account\",\n            \"id\": \"svc_acct_abc\",\n            \"name\": \"Service Account\",\n            \"role\": \"owner\",\n            \"created_at\": 1711471533\n        }\n    ],\n    \"first_id\": \"svc_acct_abc\",\n    \"last_id\": \"svc_acct_xyz\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List project service accounts
        returns: A list of [ProjectServiceAccount](/docs/api-reference/project-service-accounts/object) objects.
    post:
      operationId: create-project-service-account
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectServiceAccountCreateRequest'
        description: The project service account create request payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccountCreateResponse'
          description: Project service account created successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response when project is archived.
      summary: Creates a new service account in the project. This also returns an unredacted API key for the service account.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/service_accounts \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n      \"name\": \"Production App\"\n  }'\n"
          response: "{\n    \"object\": \"organization.project.service_account\",\n    \"id\": \"svc_acct_abc\",\n    \"name\": \"Production App\",\n    \"role\": \"member\",\n    \"created_at\": 1711471533,\n    \"api_key\": {\n        \"object\": \"organization.project.service_account.api_key\",\n        \"value\": \"sk-abcdefghijklmnop123\",\n        \"name\": \"Secret Key\",\n        \"created_at\": 1711471533,\n        \"id\": \"key_abc\"\n    }\n}\n"
        group: administration
        name: Create project service account
        returns: The created [ProjectServiceAccount](/docs/api-reference/project-service-accounts/object) object.
  /organization/projects/{project_id}/service_accounts/{service_account_id}:
    delete:
      operationId: delete-project-service-account
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: The ID of the service account.
          in: path
          name: service_account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccountDeleteResponse'
          description: Project service account deleted successfully.
      summary: Deletes a service account from the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/projects/proj_abc/service_accounts/svc_acct_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.project.service_account.deleted\",\n    \"id\": \"svc_acct_abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete project service account
        returns: Confirmation of service account being deleted, or an error in case of an archived project, which has no service accounts
    get:
      operationId: retrieve-project-service-account
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: The ID of the service account.
          in: path
          name: service_account_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectServiceAccount'
          description: Project service account retrieved successfully.
      summary: Retrieves a service account in the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/service_accounts/svc_acct_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.project.service_account\",\n    \"id\": \"svc_acct_abc\",\n    \"name\": \"Service Account\",\n    \"role\": \"owner\",\n    \"created_at\": 1711471533\n}\n"
        group: administration
        name: Retrieve project service account
        returns: The [ProjectServiceAccount](/docs/api-reference/project-service-accounts/object) object matching the specified ID.
  /organization/projects/{project_id}/users:
    get:
      operationId: list-project-users
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          required: false
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUserListResponse'
          description: Project users listed successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response when project is archived.
      summary: Returns a list of users in the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/users?after=user_abc&limit=20 \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"organization.project.user\",\n            \"id\": \"user_abc\",\n            \"name\": \"First Last\",\n            \"email\": \"user@example.com\",\n            \"role\": \"owner\",\n            \"added_at\": 1711471533\n        }\n    ],\n    \"first_id\": \"user-abc\",\n    \"last_id\": \"user-xyz\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List project users
        returns: A list of [ProjectUser](/docs/api-reference/project-users/object) objects.
    post:
      operationId: create-project-user
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUserCreateRequest'
        description: The project user create request payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
          description: User added to project successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Adds a user to the project. Users must already be members of the organization to be added to a project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/users \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n      \"user_id\": \"user_abc\",\n      \"role\": \"member\"\n  }'\n"
          response: "{\n    \"object\": \"organization.project.user\",\n    \"id\": \"user_abc\",\n    \"email\": \"user@example.com\",\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Create project user
        returns: The created [ProjectUser](/docs/api-reference/project-users/object) object.
  /organization/projects/{project_id}/users/{user_id}:
    delete:
      operationId: delete-project-user
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUserDeleteResponse'
          description: Project user deleted successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Deletes a user from the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/projects/proj_abc/users/user_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.project.user.deleted\",\n    \"id\": \"user_abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete project user
        returns: Confirmation that project has been deleted or an error in case of an archived project, which has no users
    get:
      operationId: retrieve-project-user
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
          description: Project user retrieved successfully.
      summary: Retrieves a user in the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/projects/proj_abc/users/user_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.project.user\",\n    \"id\": \"user_abc\",\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\",\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Retrieve project user
        returns: The [ProjectUser](/docs/api-reference/project-users/object) object matching the specified ID.
    post:
      operationId: modify-project-user
      parameters:
        - description: The ID of the project.
          in: path
          name: project_id
          required: true
          schema:
            type: string
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectUserUpdateRequest'
        description: The project user update request payload.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectUser'
          description: Project user's role updated successfully.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: Error response for various conditions.
      summary: Modifies a user's role in the project.
      tags:
        - Projects
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/projects/proj_abc/users/user_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n      \"role\": \"owner\"\n  }'\n"
          response: "{\n    \"object\": \"organization.project.user\",\n    \"id\": \"user_abc\",\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\",\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Modify project user
        returns: The updated [ProjectUser](/docs/api-reference/project-users/object) object.
  /organization/usage/audio_speeches:
    get:
      operationId: usage-audio-speeches
      parameters:
        - description: Start time (Unix seconds) of the query time range, inclusive.
          in: query
          name: start_time
          required: true
          schema:
            type: integer
        - description: End time (Unix seconds) of the query time range, exclusive.
          in: query
          name: end_time
          required: false
          schema:
            type: integer
        - description: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
          in: query
          name: bucket_width
          required: false
          schema:
            default: 1d
            enum:
              - 1m
              - 1h
              - 1d
            type: string
        - description: Return only usage for these projects.
          in: query
          name: project_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these users.
          in: query
          name: user_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these API keys.
          in: query
          name: api_key_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these models.
          in: query
          name: models
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
          in: query
          name: group_by
          required: false
          schema:
            items:
              enum:
                - project_id
                - user_id
                - api_key_id
                - model
              type: string
            type: array
        - description: "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
          in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Usage data retrieved successfully.
      summary: Get audio speeches usage details for the organization.
      tags:
        - Usage
      x-oaiMeta:
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/organization/usage/audio_speeches?start_time=1730419200&limit=1\" \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"page\",\n    \"data\": [\n        {\n            \"object\": \"bucket\",\n            \"start_time\": 1730419200,\n            \"end_time\": 1730505600,\n            \"results\": [\n                {\n                    \"object\": \"organization.usage.audio_speeches.result\",\n                    \"characters\": 45,\n                    \"num_model_requests\": 1,\n                    \"project_id\": null,\n                    \"user_id\": null,\n                    \"api_key_id\": null,\n                    \"model\": null\n                }\n            ]\n        }\n    ],\n    \"has_more\": false,\n    \"next_page\": null\n}\n"
        group: usage-audio-speeches
        name: Audio speeches
        returns: A list of paginated, time bucketed [Audio speeches usage](/docs/api-reference/usage/audio_speeches_object) objects.
  /organization/usage/audio_transcriptions:
    get:
      operationId: usage-audio-transcriptions
      parameters:
        - description: Start time (Unix seconds) of the query time range, inclusive.
          in: query
          name: start_time
          required: true
          schema:
            type: integer
        - description: End time (Unix seconds) of the query time range, exclusive.
          in: query
          name: end_time
          required: false
          schema:
            type: integer
        - description: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
          in: query
          name: bucket_width
          required: false
          schema:
            default: 1d
            enum:
              - 1m
              - 1h
              - 1d
            type: string
        - description: Return only usage for these projects.
          in: query
          name: project_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these users.
          in: query
          name: user_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these API keys.
          in: query
          name: api_key_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these models.
          in: query
          name: models
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
          in: query
          name: group_by
          required: false
          schema:
            items:
              enum:
                - project_id
                - user_id
                - api_key_id
                - model
              type: string
            type: array
        - description: "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
          in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Usage data retrieved successfully.
      summary: Get audio transcriptions usage details for the organization.
      tags:
        - Usage
      x-oaiMeta:
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/organization/usage/audio_transcriptions?start_time=1730419200&limit=1\" \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"page\",\n    \"data\": [\n        {\n            \"object\": \"bucket\",\n            \"start_time\": 1730419200,\n            \"end_time\": 1730505600,\n            \"results\": [\n                {\n                    \"object\": \"organization.usage.audio_transcriptions.result\",\n                    \"seconds\": 20,\n                    \"num_model_requests\": 1,\n                    \"project_id\": null,\n                    \"user_id\": null,\n                    \"api_key_id\": null,\n                    \"model\": null\n                }\n            ]\n        }\n    ],\n    \"has_more\": false,\n    \"next_page\": null\n}\n"
        group: usage-audio-transcriptions
        name: Audio transcriptions
        returns: A list of paginated, time bucketed [Audio transcriptions usage](/docs/api-reference/usage/audio_transcriptions_object) objects.
  /organization/usage/code_interpreter_sessions:
    get:
      operationId: usage-code-interpreter-sessions
      parameters:
        - description: Start time (Unix seconds) of the query time range, inclusive.
          in: query
          name: start_time
          required: true
          schema:
            type: integer
        - description: End time (Unix seconds) of the query time range, exclusive.
          in: query
          name: end_time
          required: false
          schema:
            type: integer
        - description: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
          in: query
          name: bucket_width
          required: false
          schema:
            default: 1d
            enum:
              - 1m
              - 1h
              - 1d
            type: string
        - description: Return only usage for these projects.
          in: query
          name: project_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Group the usage data by the specified fields. Support fields include `project_id`.
          in: query
          name: group_by
          required: false
          schema:
            items:
              enum:
                - project_id
              type: string
            type: array
        - description: "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
          in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Usage data retrieved successfully.
      summary: Get code interpreter sessions usage details for the organization.
      tags:
        - Usage
      x-oaiMeta:
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/organization/usage/code_interpreter_sessions?start_time=1730419200&limit=1\" \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"page\",\n    \"data\": [\n        {\n            \"object\": \"bucket\",\n            \"start_time\": 1730419200,\n            \"end_time\": 1730505600,\n            \"results\": [\n                {\n                    \"object\": \"organization.usage.code_interpreter_sessions.result\",\n                    \"num_sessions\": 1,\n                    \"project_id\": null\n                }\n            ]\n        }\n    ],\n    \"has_more\": false,\n    \"next_page\": null\n}\n"
        group: usage-code-interpreter-sessions
        name: Code interpreter sessions
        returns: A list of paginated, time bucketed [Code interpreter sessions usage](/docs/api-reference/usage/code_interpreter_sessions_object) objects.
  /organization/usage/completions:
    get:
      operationId: usage-completions
      parameters:
        - description: Start time (Unix seconds) of the query time range, inclusive.
          in: query
          name: start_time
          required: true
          schema:
            type: integer
        - description: End time (Unix seconds) of the query time range, exclusive.
          in: query
          name: end_time
          required: false
          schema:
            type: integer
        - description: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
          in: query
          name: bucket_width
          required: false
          schema:
            default: 1d
            enum:
              - 1m
              - 1h
              - 1d
            type: string
        - description: Return only usage for these projects.
          in: query
          name: project_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these users.
          in: query
          name: user_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these API keys.
          in: query
          name: api_key_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these models.
          in: query
          name: models
          required: false
          schema:
            items:
              type: string
            type: array
        - description: "If `true`, return batch jobs only. If `false`, return non-batch jobs only. By default, return both.\n"
          in: query
          name: batch
          required: false
          schema:
            type: boolean
        - description: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `batch` or any combination of them.
          in: query
          name: group_by
          required: false
          schema:
            items:
              enum:
                - project_id
                - user_id
                - api_key_id
                - model
                - batch
              type: string
            type: array
        - description: "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
          in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Usage data retrieved successfully.
      summary: Get completions usage details for the organization.
      tags:
        - Usage
      x-oaiMeta:
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/organization/usage/completions?start_time=1730419200&limit=1\" \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"page\",\n    \"data\": [\n        {\n            \"object\": \"bucket\",\n            \"start_time\": 1730419200,\n            \"end_time\": 1730505600,\n            \"results\": [\n                {\n                    \"object\": \"organization.usage.completions.result\",\n                    \"input_tokens\": 1000,\n                    \"output_tokens\": 500,\n                    \"input_cached_tokens\": 800,\n                    \"input_audio_tokens\": 0,\n                    \"output_audio_tokens\": 0,\n                    \"num_model_requests\": 5,\n                    \"project_id\": null,\n                    \"user_id\": null,\n                    \"api_key_id\": null,\n                    \"model\": null,\n                    \"batch\": null\n                }\n            ]\n        }\n    ],\n    \"has_more\": true,\n    \"next_page\": \"page_AAAAAGdGxdEiJdKOAAAAAGcqsYA=\"\n}\n"
        group: usage-completions
        name: Completions
        returns: A list of paginated, time bucketed [Completions usage](/docs/api-reference/usage/completions_object) objects.
  /organization/usage/embeddings:
    get:
      operationId: usage-embeddings
      parameters:
        - description: Start time (Unix seconds) of the query time range, inclusive.
          in: query
          name: start_time
          required: true
          schema:
            type: integer
        - description: End time (Unix seconds) of the query time range, exclusive.
          in: query
          name: end_time
          required: false
          schema:
            type: integer
        - description: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
          in: query
          name: bucket_width
          required: false
          schema:
            default: 1d
            enum:
              - 1m
              - 1h
              - 1d
            type: string
        - description: Return only usage for these projects.
          in: query
          name: project_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these users.
          in: query
          name: user_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these API keys.
          in: query
          name: api_key_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these models.
          in: query
          name: models
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
          in: query
          name: group_by
          required: false
          schema:
            items:
              enum:
                - project_id
                - user_id
                - api_key_id
                - model
              type: string
            type: array
        - description: "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
          in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Usage data retrieved successfully.
      summary: Get embeddings usage details for the organization.
      tags:
        - Usage
      x-oaiMeta:
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/organization/usage/embeddings?start_time=1730419200&limit=1\" \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"page\",\n    \"data\": [\n        {\n            \"object\": \"bucket\",\n            \"start_time\": 1730419200,\n            \"end_time\": 1730505600,\n            \"results\": [\n                {\n                    \"object\": \"organization.usage.embeddings.result\",\n                    \"input_tokens\": 16,\n                    \"num_model_requests\": 2,\n                    \"project_id\": null,\n                    \"user_id\": null,\n                    \"api_key_id\": null,\n                    \"model\": null\n                }\n            ]\n        }\n    ],\n    \"has_more\": false,\n    \"next_page\": null\n}\n"
        group: usage-embeddings
        name: Embeddings
        returns: A list of paginated, time bucketed [Embeddings usage](/docs/api-reference/usage/embeddings_object) objects.
  /organization/usage/images:
    get:
      operationId: usage-images
      parameters:
        - description: Start time (Unix seconds) of the query time range, inclusive.
          in: query
          name: start_time
          required: true
          schema:
            type: integer
        - description: End time (Unix seconds) of the query time range, exclusive.
          in: query
          name: end_time
          required: false
          schema:
            type: integer
        - description: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
          in: query
          name: bucket_width
          required: false
          schema:
            default: 1d
            enum:
              - 1m
              - 1h
              - 1d
            type: string
        - description: Return only usages for these sources. Possible values are `image.generation`, `image.edit`, `image.variation` or any combination of them.
          in: query
          name: sources
          required: false
          schema:
            items:
              enum:
                - image.generation
                - image.edit
                - image.variation
              type: string
            type: array
        - description: Return only usages for these image sizes. Possible values are `256x256`, `512x512`, `1024x1024`, `1792x1792`, `1024x1792` or any combination of them.
          in: query
          name: sizes
          required: false
          schema:
            items:
              enum:
                - 256x256
                - 512x512
                - 1024x1024
                - 1792x1792
                - 1024x1792
              type: string
            type: array
        - description: Return only usage for these projects.
          in: query
          name: project_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these users.
          in: query
          name: user_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these API keys.
          in: query
          name: api_key_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these models.
          in: query
          name: models
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model`, `size`, `source` or any combination of them.
          in: query
          name: group_by
          required: false
          schema:
            items:
              enum:
                - project_id
                - user_id
                - api_key_id
                - model
                - size
                - source
              type: string
            type: array
        - description: "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
          in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Usage data retrieved successfully.
      summary: Get images usage details for the organization.
      tags:
        - Usage
      x-oaiMeta:
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/organization/usage/images?start_time=1730419200&limit=1\" \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"page\",\n    \"data\": [\n        {\n            \"object\": \"bucket\",\n            \"start_time\": 1730419200,\n            \"end_time\": 1730505600,\n            \"results\": [\n                {\n                    \"object\": \"organization.usage.images.result\",\n                    \"images\": 2,\n                    \"num_model_requests\": 2,\n                    \"size\": null,\n                    \"source\": null,\n                    \"project_id\": null,\n                    \"user_id\": null,\n                    \"api_key_id\": null,\n                    \"model\": null\n                }\n            ]\n        }\n    ],\n    \"has_more\": false,\n    \"next_page\": null\n}\n"
        group: usage-images
        name: Images
        returns: A list of paginated, time bucketed [Images usage](/docs/api-reference/usage/images_object) objects.
  /organization/usage/moderations:
    get:
      operationId: usage-moderations
      parameters:
        - description: Start time (Unix seconds) of the query time range, inclusive.
          in: query
          name: start_time
          required: true
          schema:
            type: integer
        - description: End time (Unix seconds) of the query time range, exclusive.
          in: query
          name: end_time
          required: false
          schema:
            type: integer
        - description: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
          in: query
          name: bucket_width
          required: false
          schema:
            default: 1d
            enum:
              - 1m
              - 1h
              - 1d
            type: string
        - description: Return only usage for these projects.
          in: query
          name: project_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these users.
          in: query
          name: user_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these API keys.
          in: query
          name: api_key_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Return only usage for these models.
          in: query
          name: models
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Group the usage data by the specified fields. Support fields include `project_id`, `user_id`, `api_key_id`, `model` or any combination of them.
          in: query
          name: group_by
          required: false
          schema:
            items:
              enum:
                - project_id
                - user_id
                - api_key_id
                - model
              type: string
            type: array
        - description: "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
          in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Usage data retrieved successfully.
      summary: Get moderations usage details for the organization.
      tags:
        - Usage
      x-oaiMeta:
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/organization/usage/moderations?start_time=1730419200&limit=1\" \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"page\",\n    \"data\": [\n        {\n            \"object\": \"bucket\",\n            \"start_time\": 1730419200,\n            \"end_time\": 1730505600,\n            \"results\": [\n                {\n                    \"object\": \"organization.usage.moderations.result\",\n                    \"input_tokens\": 16,\n                    \"num_model_requests\": 2,\n                    \"project_id\": null,\n                    \"user_id\": null,\n                    \"api_key_id\": null,\n                    \"model\": null\n                }\n            ]\n        }\n    ],\n    \"has_more\": false,\n    \"next_page\": null\n}\n"
        group: usage-moderations
        name: Moderations
        returns: A list of paginated, time bucketed [Moderations usage](/docs/api-reference/usage/moderations_object) objects.
  /organization/usage/vector_stores:
    get:
      operationId: usage-vector-stores
      parameters:
        - description: Start time (Unix seconds) of the query time range, inclusive.
          in: query
          name: start_time
          required: true
          schema:
            type: integer
        - description: End time (Unix seconds) of the query time range, exclusive.
          in: query
          name: end_time
          required: false
          schema:
            type: integer
        - description: Width of each time bucket in response. Currently `1m`, `1h` and `1d` are supported, default to `1d`.
          in: query
          name: bucket_width
          required: false
          schema:
            default: 1d
            enum:
              - 1m
              - 1h
              - 1d
            type: string
        - description: Return only usage for these projects.
          in: query
          name: project_ids
          required: false
          schema:
            items:
              type: string
            type: array
        - description: Group the usage data by the specified fields. Support fields include `project_id`.
          in: query
          name: group_by
          required: false
          schema:
            items:
              enum:
                - project_id
              type: string
            type: array
        - description: "Specifies the number of buckets to return.\n- `bucket_width=1d`: default: 7, max: 31\n- `bucket_width=1h`: default: 24, max: 168\n- `bucket_width=1m`: default: 60, max: 1440\n"
          in: query
          name: limit
          required: false
          schema:
            type: integer
        - description: A cursor for use in pagination. Corresponding to the `next_page` field from the previous response.
          in: query
          name: page
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageResponse'
          description: Usage data retrieved successfully.
      summary: Get vector stores usage details for the organization.
      tags:
        - Usage
      x-oaiMeta:
        examples:
          request:
            curl: "curl \"https://api.openai.com/v1/organization/usage/vector_stores?start_time=1730419200&limit=1\" \\\n-H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n-H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"page\",\n    \"data\": [\n        {\n            \"object\": \"bucket\",\n            \"start_time\": 1730419200,\n            \"end_time\": 1730505600,\n            \"results\": [\n                {\n                    \"object\": \"organization.usage.vector_stores.result\",\n                    \"usage_bytes\": 1024,\n                    \"project_id\": null\n                }\n            ]\n        }\n    ],\n    \"has_more\": false,\n    \"next_page\": null\n}\n"
        group: usage-vector-stores
        name: Vector stores
        returns: A list of paginated, time bucketed [Vector stores usage](/docs/api-reference/usage/vector_stores_object) objects.
  /organization/users:
    get:
      operationId: list-users
      parameters:
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          required: false
          schema:
            type: string
        - description: Filter by the email address of users.
          in: query
          name: emails
          required: false
          schema:
            items:
              type: string
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserListResponse'
          description: Users listed successfully.
      summary: Lists all of the users in the organization.
      tags:
        - Users
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/users?after=user_abc&limit=20 \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"list\",\n    \"data\": [\n        {\n            \"object\": \"organization.user\",\n            \"id\": \"user_abc\",\n            \"name\": \"First Last\",\n            \"email\": \"user@example.com\",\n            \"role\": \"owner\",\n            \"added_at\": 1711471533\n        }\n    ],\n    \"first_id\": \"user-abc\",\n    \"last_id\": \"user-xyz\",\n    \"has_more\": false\n}\n"
        group: administration
        name: List users
        returns: A list of [User](/docs/api-reference/users/object) objects.
  /organization/users/{user_id}:
    delete:
      operationId: delete-user
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDeleteResponse'
          description: User deleted successfully.
      summary: Deletes a user from the organization.
      tags:
        - Users
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/organization/users/user_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.user.deleted\",\n    \"id\": \"user_abc\",\n    \"deleted\": true\n}\n"
        group: administration
        name: Delete user
        returns: Confirmation of the deleted user
    get:
      operationId: retrieve-user
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User retrieved successfully.
      summary: Retrieves a user by their identifier.
      tags:
        - Users
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/organization/users/user_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\"\n"
          response: "{\n    \"object\": \"organization.user\",\n    \"id\": \"user_abc\",\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\",\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Retrieve user
        returns: The [User](/docs/api-reference/users/object) object matching the specified ID.
    post:
      operationId: modify-user
      parameters:
        - description: The ID of the user.
          in: path
          name: user_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRoleUpdateRequest'
        description: The new user role to modify. This must be one of `owner` or `member`.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User role updated successfully.
      summary: Modifies a user's role in the organization.
      tags:
        - Users
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/organization/users/user_abc \\\n  -H \"Authorization: Bearer $OPENAI_ADMIN_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n      \"role\": \"owner\"\n  }'\n"
          response: "{\n    \"object\": \"organization.user\",\n    \"id\": \"user_abc\",\n    \"name\": \"First Last\",\n    \"email\": \"user@example.com\",\n    \"role\": \"owner\",\n    \"added_at\": 1711471533\n}\n"
        group: administration
        name: Modify user
        returns: The updated [User](/docs/api-reference/users/object) object.
  /realtime/sessions:
    post:
      operationId: create-realtime-session
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RealtimeSessionCreateRequest'
        description: Create an ephemeral API key with the given session configuration.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RealtimeSessionCreateResponse'
          description: Session created successfully.
      summary: "Create an ephemeral API token for use in client-side applications with the\nRealtime API. Can be configured with the same session parameters as the\n`session.update` client event.\n\nIt responds with a session object, plus a `client_secret` key which contains\na usable ephemeral API token that can be used to authenticate browser clients\nfor the Realtime API.\n"
      tags:
        - Realtime
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST https://api.openai.com/v1/realtime/sessions \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"model\": \"gpt-4o-realtime-preview-2024-12-17\",\n    \"modalities\": [\"audio\", \"text\"],\n    \"instructions\": \"You are a friendly assistant.\"\n  }'\n"
          response: "{\n  \"id\": \"sess_001\",\n  \"object\": \"realtime.session\",\n  \"model\": \"gpt-4o-realtime-preview-2024-12-17\",\n  \"modalities\": [\"audio\", \"text\"],\n  \"instructions\": \"You are a friendly assistant.\",\n  \"voice\": \"alloy\",\n  \"input_audio_format\": \"pcm16\",\n  \"output_audio_format\": \"pcm16\",\n  \"input_audio_transcription\": {\n      \"model\": \"whisper-1\"\n  },\n  \"turn_detection\": null,\n  \"tools\": [],\n  \"tool_choice\": \"none\",\n  \"temperature\": 0.7,\n  \"max_response_output_tokens\": 200,\n  \"client_secret\": {\n    \"value\": \"ek_abc123\", \n    \"expires_at\": 1234567890\n  }\n}\n"
        group: realtime
        name: Create session
        returns: The created Realtime session object, plus an ephemeral key
  /responses:
    post:
      operationId: createResponse
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResponse'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            text/event-stream:
              schema:
                $ref: '#/components/schemas/ResponseStreamEvent'
          description: OK
      summary: "Creates a model response. Provide [text](/docs/guides/text) or\n[image](/docs/guides/images) inputs to generate [text](/docs/guides/text)\nor [JSON](/docs/guides/structured-outputs) outputs. Have the model call\nyour own [custom code](/docs/guides/function-calling) or use built-in\n[tools](/docs/guides/tools) like [web search](/docs/guides/tools-web-search)\nor [file search](/docs/guides/tools-file-search) to use your own data\nas input for the model's response.\n"
      tags:
        - Responses
      x-oaiMeta:
        example:
          request:
            curl: "curl https://api.openai.com/v1/responses \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"model\": \"gpt-4o\",\n    \"input\": \"Tell me a three sentence bedtime story about a unicorn.\"\n  }'\n"
            javascript: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nconst response = await openai.responses.create({\n    model: \"gpt-4o\",\n    input: \"Tell me a three sentence bedtime story about a unicorn.\"\n});\n\nconsole.log(response);\n"
            python: "from openai import OpenAI\n\nclient = OpenAI()\n\nresponse = client.responses.create(\n  model=\"gpt-4o\",\n  input=\"Tell me a three sentence bedtime story about a unicorn.\"\n)\n\nprint(response)\n"
          response: "{\n  \"id\": \"resp_67ccd2bed1ec8190b14f964abc0542670bb6a6b452d3795b\",\n  \"object\": \"response\",\n  \"created_at\": 1741476542,\n  \"status\": \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"output\": [\n    {\n      \"type\": \"message\",\n      \"id\": \"msg_67ccd2bf17f0819081ff3bb2cf6508e60bb6a6b452d3795b\",\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n      \"content\": [\n        {\n          \"type\": \"output_text\",\n          \"text\": \"In a peaceful grove beneath a silver moon, a unicorn named Lumina discovered a hidden pool that reflected the stars. As she dipped her horn into the water, the pool began to shimmer, revealing a pathway to a magical realm of endless night skies. Filled with wonder, Lumina whispered a wish for all who dream to find their own hidden magic, and as she glanced back, her hoofprints sparkled like stardust.\",\n          \"annotations\": []\n        }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\": true,\n  \"previous_response_id\": null,\n  \"reasoning\": {\n    \"effort\": null,\n    \"summary\": null\n  },\n  \"store\": true,\n  \"temperature\": 1.0,\n  \"text\": {\n    \"format\": {\n      \"type\": \"text\"\n    }\n  },\n  \"tool_choice\": \"auto\",\n  \"tools\": [],\n  \"top_p\": 1.0,\n  \"truncation\": \"disabled\",\n  \"usage\": {\n    \"input_tokens\": 36,\n    \"input_tokens_details\": {\n      \"cached_tokens\": 0\n    },\n    \"output_tokens\": 87,\n    \"output_tokens_details\": {\n      \"reasoning_tokens\": 0\n    },\n    \"total_tokens\": 123\n  },\n  \"user\": null,\n  \"metadata\": {}\n}\n"
          title: Text input
        group: responses
        name: Create a model response
        path: create
        returns: "Returns a [Response](/docs/api-reference/responses/object) object.\n"
  /responses/{response_id}:
    delete:
      operationId: deleteResponse
      parameters:
        - description: The ID of the response to delete.
          in: path
          name: response_id
          required: true
          schema:
            example: resp_677efb5139a88190b512bc3fef8e535d
            type: string
      responses:
        "200":
          description: OK
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
      summary: "Deletes a model response with the given ID.\n"
      tags:
        - Responses
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/responses/resp_123 \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            javascript: "import OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst response = await client.responses.del(\"resp_123\");\nconsole.log(response);  \n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nresponse = client.responses.del(\"resp_123\")\nprint(response)\n"
          response: "{\n  \"id\": \"resp_6786a1bec27481909a17d673315b29f6\",\n  \"object\": \"response\",\n  \"deleted\": true\n}\n"
        group: responses
        name: Delete a model response
        returns: "A success message.\n"
    get:
      operationId: getResponse
      parameters:
        - description: The ID of the response to retrieve.
          in: path
          name: response_id
          required: true
          schema:
            example: resp_677efb5139a88190b512bc3fef8e535d
            type: string
        - description: "Additional fields to include in the response. See the `include`\nparameter for Response creation above for more information.\n"
          in: query
          name: include
          schema:
            items:
              $ref: '#/components/schemas/Includable'
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
          description: OK
      summary: "Retrieves a model response with the given ID.\n"
      tags:
        - Responses
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/responses/resp_123 \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            javascript: "import OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst response = await client.responses.retrieve(\"resp_123\");\nconsole.log(response);  \n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nresponse = client.responses.retrieve(\"resp_123\")\nprint(response)\n"
          response: "{\n  \"id\": \"resp_67cb71b351908190a308f3859487620d06981a8637e6bc44\",\n  \"object\": \"response\",\n  \"created_at\": 1741386163,\n  \"status\": \"completed\",\n  \"error\": null,\n  \"incomplete_details\": null,\n  \"instructions\": null,\n  \"max_output_tokens\": null,\n  \"model\": \"gpt-4o-2024-08-06\",\n  \"output\": [\n    {\n      \"type\": \"message\",\n      \"id\": \"msg_67cb71b3c2b0819084d481baaaf148f206981a8637e6bc44\",\n      \"status\": \"completed\",\n      \"role\": \"assistant\",\n      \"content\": [\n        {\n          \"type\": \"output_text\",\n          \"text\": \"Silent circuits hum,  \\nThoughts emerge in data streams—  \\nDigital dawn breaks.\",\n          \"annotations\": []\n        }\n      ]\n    }\n  ],\n  \"parallel_tool_calls\": true,\n  \"previous_response_id\": null,\n  \"reasoning\": {\n    \"effort\": null,\n    \"summary\": null\n  },\n  \"store\": true,\n  \"temperature\": 1.0,\n  \"text\": {\n    \"format\": {\n      \"type\": \"text\"\n    }\n  },\n  \"tool_choice\": \"auto\",\n  \"tools\": [],\n  \"top_p\": 1.0,\n  \"truncation\": \"disabled\",\n  \"usage\": {\n    \"input_tokens\": 32,\n    \"input_tokens_details\": {\n      \"cached_tokens\": 0\n    },\n    \"output_tokens\": 18,\n    \"output_tokens_details\": {\n      \"reasoning_tokens\": 0\n    },\n    \"total_tokens\": 50\n  },\n  \"user\": null,\n  \"metadata\": {}\n}\n"
        group: responses
        name: Get a model response
        returns: "The [Response](/docs/api-reference/responses/object) object matching the\nspecified ID.\n"
  /responses/{response_id}/input_items:
    get:
      operationId: listInputItems
      parameters:
        - description: The ID of the response to retrieve input items for.
          in: path
          name: response_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between\n1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "The order to return the input items in. Default is `asc`.\n- `asc`: Return the input items in ascending order.\n- `desc`: Return the input items in descending order.\n"
          in: query
          name: order
          schema:
            enum:
              - asc
              - desc
            type: string
        - description: "An item ID to list items after, used in pagination.\n"
          in: query
          name: after
          schema:
            type: string
        - description: "An item ID to list items before, used in pagination.\n"
          in: query
          name: before
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseItemList'
          description: OK
      summary: Returns a list of input items for a given response.
      tags:
        - Responses
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/responses/resp_abc123/input_items \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
            javascript: "import OpenAI from \"openai\";\nconst client = new OpenAI();\n\nconst response = await client.responses.inputItems.list(\"resp_123\");\nconsole.log(response.data);  \n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nresponse = client.responses.input_items.list(\"resp_123\")\nprint(response.data)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"msg_abc123\",\n      \"type\": \"message\",\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"input_text\",\n          \"text\": \"Tell me a three sentence bedtime story about a unicorn.\"\n        }\n      ]\n    }\n  ],\n  \"first_id\": \"msg_abc123\",\n  \"last_id\": \"msg_abc123\",\n  \"has_more\": false\n}\n"
        group: responses
        name: List input items
        returns: A list of input item objects.
  /threads:
    post:
      operationId: createThread
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadObject'
          description: OK
      summary: Create a thread.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        example:
          request:
            curl: "curl https://api.openai.com/v1/threads \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d ''\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const emptyThread = await openai.beta.threads.create();\n\n  console.log(emptyThread);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nempty_thread = client.beta.threads.create()\nprint(empty_thread)\n"
          response: "{\n  \"id\": \"thread_abc123\",\n  \"object\": \"thread\",\n  \"created_at\": 1699012949,\n  \"metadata\": {},\n  \"tool_resources\": {}\n}\n"
          title: Empty
        group: threads
        name: Create thread
        returns: A [thread](/docs/api-reference/threads) object.
  /threads/runs:
    post:
      operationId: createThreadAndRun
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateThreadAndRunRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Create a thread and run it in one request.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        example:
          request:
            curl: "curl https://api.openai.com/v1/threads/runs \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n      \"assistant_id\": \"asst_abc123\",\n      \"thread\": {\n        \"messages\": [\n          {\"role\": \"user\", \"content\": \"Explain deep learning to a 5 year old.\"}\n        ]\n      }\n    }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const run = await openai.beta.threads.createAndRun({\n    assistant_id: \"asst_abc123\",\n    thread: {\n      messages: [\n        { role: \"user\", content: \"Explain deep learning to a 5 year old.\" },\n      ],\n    },\n  });\n\n  console.log(run);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nrun = client.beta.threads.create_and_run(\n  assistant_id=\"asst_abc123\",\n  thread={\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"Explain deep learning to a 5 year old.\"}\n    ]\n  }\n)\n\nprint(run)\n"
          response: "{\n  \"id\": \"run_abc123\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1699076792,\n  \"assistant_id\": \"asst_abc123\",\n  \"thread_id\": \"thread_abc123\",\n  \"status\": \"queued\",\n  \"started_at\": null,\n  \"expires_at\": 1699077392,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": null,\n  \"required_action\": null,\n  \"last_error\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": \"You are a helpful assistant.\",\n  \"tools\": [],\n  \"tool_resources\": {},\n  \"metadata\": {},\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_completion_tokens\": null,\n  \"max_prompt_tokens\": null,\n  \"truncation_strategy\": {\n    \"type\": \"auto\",\n    \"last_messages\": null\n  },\n  \"incomplete_details\": null,\n  \"usage\": null,\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n"
          title: Default
        group: threads
        name: Create thread and run
        returns: A [run](/docs/api-reference/runs/object) object.
  /threads/{thread_id}:
    delete:
      operationId: deleteThread
      parameters:
        - description: The ID of the thread to delete.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteThreadResponse'
          description: OK
      summary: Delete a thread.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -X DELETE\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const response = await openai.beta.threads.del(\"thread_abc123\");\n\n  console.log(response);\n}\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nresponse = client.beta.threads.delete(\"thread_abc123\")\nprint(response)\n"
          response: "{\n  \"id\": \"thread_abc123\",\n  \"object\": \"thread.deleted\",\n  \"deleted\": true\n}\n"
        group: threads
        name: Delete thread
        returns: Deletion status
    get:
      operationId: getThread
      parameters:
        - description: The ID of the thread to retrieve.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadObject'
          description: OK
      summary: Retrieves a thread.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const myThread = await openai.beta.threads.retrieve(\n    \"thread_abc123\"\n  );\n\n  console.log(myThread);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nmy_thread = client.beta.threads.retrieve(\"thread_abc123\")\nprint(my_thread)\n"
          response: "{\n  \"id\": \"thread_abc123\",\n  \"object\": \"thread\",\n  \"created_at\": 1699014083,\n  \"metadata\": {},\n  \"tool_resources\": {\n    \"code_interpreter\": {\n      \"file_ids\": []\n    }\n  }\n}\n"
        group: threads
        name: Retrieve thread
        returns: The [thread](/docs/api-reference/threads/object) object matching the specified ID.
    post:
      operationId: modifyThread
      parameters:
        - description: The ID of the thread to modify. Only the `metadata` can be modified.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyThreadRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ThreadObject'
          description: OK
      summary: Modifies a thread.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n      \"metadata\": {\n        \"modified\": \"true\",\n        \"user\": \"abc123\"\n      }\n    }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const updatedThread = await openai.beta.threads.update(\n    \"thread_abc123\",\n    {\n      metadata: { modified: \"true\", user: \"abc123\" },\n    }\n  );\n\n  console.log(updatedThread);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nmy_updated_thread = client.beta.threads.update(\n  \"thread_abc123\",\n  metadata={\n    \"modified\": \"true\",\n    \"user\": \"abc123\"\n  }\n)\nprint(my_updated_thread)\n"
          response: "{\n  \"id\": \"thread_abc123\",\n  \"object\": \"thread\",\n  \"created_at\": 1699014083,\n  \"metadata\": {\n    \"modified\": \"true\",\n    \"user\": \"abc123\"\n  },\n  \"tool_resources\": {}\n}\n"
        group: threads
        name: Modify thread
        returns: The modified [thread](/docs/api-reference/threads/object) object matching the specified ID.
  /threads/{thread_id}/messages:
    get:
      operationId: listMessages
      parameters:
        - description: The ID of the [thread](/docs/api-reference/threads) the messages belong to.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          in: query
          name: order
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          schema:
            type: string
        - description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          in: query
          name: before
          schema:
            type: string
        - description: "Filter messages by the run ID that generated them.\n"
          in: query
          name: run_id
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListMessagesResponse'
          description: OK
      summary: Returns a list of messages for a given thread.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/messages \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const threadMessages = await openai.beta.threads.messages.list(\n    \"thread_abc123\"\n  );\n\n  console.log(threadMessages.data);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nthread_messages = client.beta.threads.messages.list(\"thread_abc123\")\nprint(thread_messages.data)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"msg_abc123\",\n      \"object\": \"thread.message\",\n      \"created_at\": 1699016383,\n      \"assistant_id\": null,\n      \"thread_id\": \"thread_abc123\",\n      \"run_id\": null,\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": {\n            \"value\": \"How does AI work? Explain it in simple terms.\",\n            \"annotations\": []\n          }\n        }\n      ],\n      \"attachments\": [],\n      \"metadata\": {}\n    },\n    {\n      \"id\": \"msg_abc456\",\n      \"object\": \"thread.message\",\n      \"created_at\": 1699016383,\n      \"assistant_id\": null,\n      \"thread_id\": \"thread_abc123\",\n      \"run_id\": null,\n      \"role\": \"user\",\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": {\n            \"value\": \"Hello, what is AI?\",\n            \"annotations\": []\n          }\n        }\n      ],\n      \"attachments\": [],\n      \"metadata\": {}\n    }\n  ],\n  \"first_id\": \"msg_abc123\",\n  \"last_id\": \"msg_abc456\",\n  \"has_more\": false\n}\n"
        group: threads
        name: List messages
        returns: A list of [message](/docs/api-reference/messages) objects.
    post:
      operationId: createMessage
      parameters:
        - description: The ID of the [thread](/docs/api-reference/threads) to create a message for.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMessageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageObject'
          description: OK
      summary: Create a message.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/messages \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n      \"role\": \"user\",\n      \"content\": \"How does AI work? Explain it in simple terms.\"\n    }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const threadMessages = await openai.beta.threads.messages.create(\n    \"thread_abc123\",\n    { role: \"user\", content: \"How does AI work? Explain it in simple terms.\" }\n  );\n\n  console.log(threadMessages);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nthread_message = client.beta.threads.messages.create(\n  \"thread_abc123\",\n  role=\"user\",\n  content=\"How does AI work? Explain it in simple terms.\",\n)\nprint(thread_message)\n"
          response: "{\n  \"id\": \"msg_abc123\",\n  \"object\": \"thread.message\",\n  \"created_at\": 1713226573,\n  \"assistant_id\": null,\n  \"thread_id\": \"thread_abc123\",\n  \"run_id\": null,\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": {\n        \"value\": \"How does AI work? Explain it in simple terms.\",\n        \"annotations\": []\n      }\n    }\n  ],\n  \"attachments\": [],\n  \"metadata\": {}\n}\n"
        group: threads
        name: Create message
        returns: A [message](/docs/api-reference/messages/object) object.
  /threads/{thread_id}/messages/{message_id}:
    delete:
      operationId: deleteMessage
      parameters:
        - description: The ID of the thread to which this message belongs.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: The ID of the message to delete.
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteMessageResponse'
          description: OK
      summary: Deletes a message.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl -X DELETE https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const deletedMessage = await openai.beta.threads.messages.del(\n    \"thread_abc123\",\n    \"msg_abc123\"\n  );\n\n  console.log(deletedMessage);\n}"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ndeleted_message = client.beta.threads.messages.delete(\n  message_id=\"msg_abc12\",\n  thread_id=\"thread_abc123\",\n)\nprint(deleted_message)\n"
          response: "{\n  \"id\": \"msg_abc123\",\n  \"object\": \"thread.message.deleted\",\n  \"deleted\": true\n}\n"
        group: threads
        name: Delete message
        returns: Deletion status
    get:
      operationId: getMessage
      parameters:
        - description: The ID of the [thread](/docs/api-reference/threads) to which this message belongs.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: The ID of the message to retrieve.
          in: path
          name: message_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageObject'
          description: OK
      summary: Retrieve a message.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const message = await openai.beta.threads.messages.retrieve(\n    \"thread_abc123\",\n    \"msg_abc123\"\n  );\n\n  console.log(message);\n}\n\nmain();"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nmessage = client.beta.threads.messages.retrieve(\n  message_id=\"msg_abc123\",\n  thread_id=\"thread_abc123\",\n)\nprint(message)\n"
          response: "{\n  \"id\": \"msg_abc123\",\n  \"object\": \"thread.message\",\n  \"created_at\": 1699017614,\n  \"assistant_id\": null,\n  \"thread_id\": \"thread_abc123\",\n  \"run_id\": null,\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": {\n        \"value\": \"How does AI work? Explain it in simple terms.\",\n        \"annotations\": []\n      }\n    }\n  ],\n  \"attachments\": [],\n  \"metadata\": {}\n}\n"
        group: threads
        name: Retrieve message
        returns: The [message](/docs/api-reference/messages/object) object matching the specified ID.
    post:
      operationId: modifyMessage
      parameters:
        - description: The ID of the thread to which this message belongs.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: The ID of the message to modify.
          in: path
          name: message_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyMessageRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageObject'
          description: OK
      summary: Modifies a message.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/messages/msg_abc123 \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n      \"metadata\": {\n        \"modified\": \"true\",\n        \"user\": \"abc123\"\n      }\n    }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const message = await openai.beta.threads.messages.update(\n    \"thread_abc123\",\n    \"msg_abc123\",\n    {\n      metadata: {\n        modified: \"true\",\n        user: \"abc123\",\n      },\n    }\n  }'"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nmessage = client.beta.threads.messages.update(\n  message_id=\"msg_abc12\",\n  thread_id=\"thread_abc123\",\n  metadata={\n    \"modified\": \"true\",\n    \"user\": \"abc123\",\n  },\n)\nprint(message)\n"
          response: "{\n  \"id\": \"msg_abc123\",\n  \"object\": \"thread.message\",\n  \"created_at\": 1699017614,\n  \"assistant_id\": null,\n  \"thread_id\": \"thread_abc123\",\n  \"run_id\": null,\n  \"role\": \"user\",\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": {\n        \"value\": \"How does AI work? Explain it in simple terms.\",\n        \"annotations\": []\n      }\n    }\n  ],\n  \"file_ids\": [],\n  \"metadata\": {\n    \"modified\": \"true\",\n    \"user\": \"abc123\"\n  }\n}\n"
        group: threads
        name: Modify message
        returns: The modified [message](/docs/api-reference/messages/object) object.
  /threads/{thread_id}/runs:
    get:
      operationId: listRuns
      parameters:
        - description: The ID of the thread the run belongs to.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          in: query
          name: order
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          schema:
            type: string
        - description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          in: query
          name: before
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunsResponse'
          description: OK
      summary: Returns a list of runs belonging to a thread.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/runs \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const runs = await openai.beta.threads.runs.list(\n    \"thread_abc123\"\n  );\n\n  console.log(runs);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nruns = client.beta.threads.runs.list(\n  \"thread_abc123\"\n)\n\nprint(runs)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"run_abc123\",\n      \"object\": \"thread.run\",\n      \"created_at\": 1699075072,\n      \"assistant_id\": \"asst_abc123\",\n      \"thread_id\": \"thread_abc123\",\n      \"status\": \"completed\",\n      \"started_at\": 1699075072,\n      \"expires_at\": null,\n      \"cancelled_at\": null,\n      \"failed_at\": null,\n      \"completed_at\": 1699075073,\n      \"last_error\": null,\n      \"model\": \"gpt-4o\",\n      \"instructions\": null,\n      \"incomplete_details\": null,\n      \"tools\": [\n        {\n          \"type\": \"code_interpreter\"\n        }\n      ],\n      \"tool_resources\": {\n        \"code_interpreter\": {\n          \"file_ids\": [\n            \"file-abc123\",\n            \"file-abc456\"\n          ]\n        }\n      },\n      \"metadata\": {},\n      \"usage\": {\n        \"prompt_tokens\": 123,\n        \"completion_tokens\": 456,\n        \"total_tokens\": 579\n      },\n      \"temperature\": 1.0,\n      \"top_p\": 1.0,\n      \"max_prompt_tokens\": 1000,\n      \"max_completion_tokens\": 1000,\n      \"truncation_strategy\": {\n        \"type\": \"auto\",\n        \"last_messages\": null\n      },\n      \"response_format\": \"auto\",\n      \"tool_choice\": \"auto\",\n      \"parallel_tool_calls\": true\n    },\n    {\n      \"id\": \"run_abc456\",\n      \"object\": \"thread.run\",\n      \"created_at\": 1699063290,\n      \"assistant_id\": \"asst_abc123\",\n      \"thread_id\": \"thread_abc123\",\n      \"status\": \"completed\",\n      \"started_at\": 1699063290,\n      \"expires_at\": null,\n      \"cancelled_at\": null,\n      \"failed_at\": null,\n      \"completed_at\": 1699063291,\n      \"last_error\": null,\n      \"model\": \"gpt-4o\",\n      \"instructions\": null,\n      \"incomplete_details\": null,\n      \"tools\": [\n        {\n          \"type\": \"code_interpreter\"\n        }\n      ],\n      \"tool_resources\": {\n        \"code_interpreter\": {\n          \"file_ids\": [\n            \"file-abc123\",\n            \"file-abc456\"\n          ]\n        }\n      },\n      \"metadata\": {},\n      \"usage\": {\n        \"prompt_tokens\": 123,\n        \"completion_tokens\": 456,\n        \"total_tokens\": 579\n      },\n      \"temperature\": 1.0,\n      \"top_p\": 1.0,\n      \"max_prompt_tokens\": 1000,\n      \"max_completion_tokens\": 1000,\n      \"truncation_strategy\": {\n        \"type\": \"auto\",\n        \"last_messages\": null\n      },\n      \"response_format\": \"auto\",\n      \"tool_choice\": \"auto\",\n      \"parallel_tool_calls\": true\n    }\n  ],\n  \"first_id\": \"run_abc123\",\n  \"last_id\": \"run_abc456\",\n  \"has_more\": false\n}\n"
        group: threads
        name: List runs
        returns: A list of [run](/docs/api-reference/runs/object) objects.
    post:
      operationId: createRun
      parameters:
        - description: The ID of the thread to run.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
          in: query
          name: include[]
          schema:
            items:
              enum:
                - step_details.tool_calls[*].file_search.results[*].content
              type: string
            type: array
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRunRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Create a run.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        example:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/runs \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n    \"assistant_id\": \"asst_abc123\"\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const run = await openai.beta.threads.runs.create(\n    \"thread_abc123\",\n    { assistant_id: \"asst_abc123\" }\n  );\n\n  console.log(run);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nrun = client.beta.threads.runs.create(\n  thread_id=\"thread_abc123\",\n  assistant_id=\"asst_abc123\"\n)\n\nprint(run)\n"
          response: "{\n  \"id\": \"run_abc123\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1699063290,\n  \"assistant_id\": \"asst_abc123\",\n  \"thread_id\": \"thread_abc123\",\n  \"status\": \"queued\",\n  \"started_at\": 1699063290,\n  \"expires_at\": null,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": 1699063291,\n  \"last_error\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": null,\n  \"incomplete_details\": null,\n  \"tools\": [\n    {\n      \"type\": \"code_interpreter\"\n    }\n  ],\n  \"metadata\": {},\n  \"usage\": null,\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_prompt_tokens\": 1000,\n  \"max_completion_tokens\": 1000,\n  \"truncation_strategy\": {\n    \"type\": \"auto\",\n    \"last_messages\": null\n  },\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n"
          title: Default
        group: threads
        name: Create run
        returns: A [run](/docs/api-reference/runs/object) object.
  /threads/{thread_id}/runs/{run_id}:
    get:
      operationId: getRun
      parameters:
        - description: The ID of the [thread](/docs/api-reference/threads) that was run.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: The ID of the run to retrieve.
          in: path
          name: run_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Retrieves a run.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const run = await openai.beta.threads.runs.retrieve(\n    \"thread_abc123\",\n    \"run_abc123\"\n  );\n\n  console.log(run);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nrun = client.beta.threads.runs.retrieve(\n  thread_id=\"thread_abc123\",\n  run_id=\"run_abc123\"\n)\n\nprint(run)\n"
          response: "{\n  \"id\": \"run_abc123\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1699075072,\n  \"assistant_id\": \"asst_abc123\",\n  \"thread_id\": \"thread_abc123\",\n  \"status\": \"completed\",\n  \"started_at\": 1699075072,\n  \"expires_at\": null,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": 1699075073,\n  \"last_error\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": null,\n  \"incomplete_details\": null,\n  \"tools\": [\n    {\n      \"type\": \"code_interpreter\"\n    }\n  ],\n  \"metadata\": {},\n  \"usage\": {\n    \"prompt_tokens\": 123,\n    \"completion_tokens\": 456,\n    \"total_tokens\": 579\n  },\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_prompt_tokens\": 1000,\n  \"max_completion_tokens\": 1000,\n  \"truncation_strategy\": {\n    \"type\": \"auto\",\n    \"last_messages\": null\n  },\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n"
        group: threads
        name: Retrieve run
        returns: The [run](/docs/api-reference/runs/object) object matching the specified ID.
    post:
      operationId: modifyRun
      parameters:
        - description: The ID of the [thread](/docs/api-reference/threads) that was run.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: The ID of the run to modify.
          in: path
          name: run_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyRunRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Modifies a run.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n    \"metadata\": {\n      \"user_id\": \"user_abc123\"\n    }\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const run = await openai.beta.threads.runs.update(\n    \"thread_abc123\",\n    \"run_abc123\",\n    {\n      metadata: {\n        user_id: \"user_abc123\",\n      },\n    }\n  );\n\n  console.log(run);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nrun = client.beta.threads.runs.update(\n  thread_id=\"thread_abc123\",\n  run_id=\"run_abc123\",\n  metadata={\"user_id\": \"user_abc123\"},\n)\n\nprint(run)\n"
          response: "{\n  \"id\": \"run_abc123\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1699075072,\n  \"assistant_id\": \"asst_abc123\",\n  \"thread_id\": \"thread_abc123\",\n  \"status\": \"completed\",\n  \"started_at\": 1699075072,\n  \"expires_at\": null,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": 1699075073,\n  \"last_error\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": null,\n  \"incomplete_details\": null,\n  \"tools\": [\n    {\n      \"type\": \"code_interpreter\"\n    }\n  ],\n  \"tool_resources\": {\n    \"code_interpreter\": {\n      \"file_ids\": [\n        \"file-abc123\",\n        \"file-abc456\"\n      ]\n    }\n  },\n  \"metadata\": {\n    \"user_id\": \"user_abc123\"\n  },\n  \"usage\": {\n    \"prompt_tokens\": 123,\n    \"completion_tokens\": 456,\n    \"total_tokens\": 579\n  },\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_prompt_tokens\": 1000,\n  \"max_completion_tokens\": 1000,\n  \"truncation_strategy\": {\n    \"type\": \"auto\",\n    \"last_messages\": null\n  },\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n"
        group: threads
        name: Modify run
        returns: The modified [run](/docs/api-reference/runs/object) object matching the specified ID.
  /threads/{thread_id}/runs/{run_id}/cancel:
    post:
      operationId: cancelRun
      parameters:
        - description: The ID of the thread to which this run belongs.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: The ID of the run to cancel.
          in: path
          name: run_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: Cancels a run that is `in_progress`.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/cancel \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -X POST\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const run = await openai.beta.threads.runs.cancel(\n    \"thread_abc123\",\n    \"run_abc123\"\n  );\n\n  console.log(run);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nrun = client.beta.threads.runs.cancel(\n  thread_id=\"thread_abc123\",\n  run_id=\"run_abc123\"\n)\n\nprint(run)\n"
          response: "{\n  \"id\": \"run_abc123\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1699076126,\n  \"assistant_id\": \"asst_abc123\",\n  \"thread_id\": \"thread_abc123\",\n  \"status\": \"cancelling\",\n  \"started_at\": 1699076126,\n  \"expires_at\": 1699076726,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": null,\n  \"last_error\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": \"You summarize books.\",\n  \"tools\": [\n    {\n      \"type\": \"file_search\"\n    }\n  ],\n  \"tool_resources\": {\n    \"file_search\": {\n      \"vector_store_ids\": [\"vs_123\"]\n    }\n  },\n  \"metadata\": {},\n  \"usage\": null,\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n"
        group: threads
        name: Cancel a run
        returns: The modified [run](/docs/api-reference/runs/object) object matching the specified ID.
  /threads/{thread_id}/runs/{run_id}/steps:
    get:
      operationId: listRunSteps
      parameters:
        - description: The ID of the thread the run and run steps belong to.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: The ID of the run the run steps belong to.
          in: path
          name: run_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          in: query
          name: order
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          schema:
            type: string
        - description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          in: query
          name: before
          schema:
            type: string
        - description: "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
          in: query
          name: include[]
          schema:
            items:
              enum:
                - step_details.tool_calls[*].file_search.results[*].content
              type: string
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunStepsResponse'
          description: OK
      summary: Returns a list of run steps belonging to a run.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/steps \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const runStep = await openai.beta.threads.runs.steps.list(\n    \"thread_abc123\",\n    \"run_abc123\"\n  );\n  console.log(runStep);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nrun_steps = client.beta.threads.runs.steps.list(\n    thread_id=\"thread_abc123\",\n    run_id=\"run_abc123\"\n)\n\nprint(run_steps)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"step_abc123\",\n      \"object\": \"thread.run.step\",\n      \"created_at\": 1699063291,\n      \"run_id\": \"run_abc123\",\n      \"assistant_id\": \"asst_abc123\",\n      \"thread_id\": \"thread_abc123\",\n      \"type\": \"message_creation\",\n      \"status\": \"completed\",\n      \"cancelled_at\": null,\n      \"completed_at\": 1699063291,\n      \"expired_at\": null,\n      \"failed_at\": null,\n      \"last_error\": null,\n      \"step_details\": {\n        \"type\": \"message_creation\",\n        \"message_creation\": {\n          \"message_id\": \"msg_abc123\"\n        }\n      },\n      \"usage\": {\n        \"prompt_tokens\": 123,\n        \"completion_tokens\": 456,\n        \"total_tokens\": 579\n      }\n    }\n  ],\n  \"first_id\": \"step_abc123\",\n  \"last_id\": \"step_abc456\",\n  \"has_more\": false\n}\n"
        group: threads
        name: List run steps
        returns: A list of [run step](/docs/api-reference/run-steps/step-object) objects.
  /threads/{thread_id}/runs/{run_id}/steps/{step_id}:
    get:
      operationId: getRunStep
      parameters:
        - description: The ID of the thread to which the run and run step belongs.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: The ID of the run to which the run step belongs.
          in: path
          name: run_id
          required: true
          schema:
            type: string
        - description: The ID of the run step to retrieve.
          in: path
          name: step_id
          required: true
          schema:
            type: string
        - description: "A list of additional fields to include in the response. Currently the only supported value is `step_details.tool_calls[*].file_search.results[*].content` to fetch the file search result content.\n\nSee the [file search tool documentation](/docs/assistants/tools/file-search#customizing-file-search-settings) for more information.\n"
          in: query
          name: include[]
          schema:
            items:
              enum:
                - step_details.tool_calls[*].file_search.results[*].content
              type: string
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStepObject'
          description: OK
      summary: Retrieves a run step.
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        examples:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_abc123/runs/run_abc123/steps/step_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const runStep = await openai.beta.threads.runs.steps.retrieve(\n    \"thread_abc123\",\n    \"run_abc123\",\n    \"step_abc123\"\n  );\n  console.log(runStep);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nrun_step = client.beta.threads.runs.steps.retrieve(\n    thread_id=\"thread_abc123\",\n    run_id=\"run_abc123\",\n    step_id=\"step_abc123\"\n)\n\nprint(run_step)\n"
          response: "{\n  \"id\": \"step_abc123\",\n  \"object\": \"thread.run.step\",\n  \"created_at\": 1699063291,\n  \"run_id\": \"run_abc123\",\n  \"assistant_id\": \"asst_abc123\",\n  \"thread_id\": \"thread_abc123\",\n  \"type\": \"message_creation\",\n  \"status\": \"completed\",\n  \"cancelled_at\": null,\n  \"completed_at\": 1699063291,\n  \"expired_at\": null,\n  \"failed_at\": null,\n  \"last_error\": null,\n  \"step_details\": {\n    \"type\": \"message_creation\",\n    \"message_creation\": {\n      \"message_id\": \"msg_abc123\"\n    }\n  },\n  \"usage\": {\n    \"prompt_tokens\": 123,\n    \"completion_tokens\": 456,\n    \"total_tokens\": 579\n  }\n}\n"
        group: threads
        name: Retrieve run step
        returns: The [run step](/docs/api-reference/run-steps/step-object) object matching the specified ID.
  /threads/{thread_id}/runs/{run_id}/submit_tool_outputs:
    post:
      operationId: submitToolOuputsToRun
      parameters:
        - description: The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
          in: path
          name: thread_id
          required: true
          schema:
            type: string
        - description: The ID of the run that requires the tool output submission.
          in: path
          name: run_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitToolOutputsRunRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunObject'
          description: OK
      summary: "When a run has the `status: \"requires_action\"` and `required_action.type` is `submit_tool_outputs`, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.\n"
      tags:
        - Assistants
      x-oaiMeta:
        beta: true
        example:
          request:
            curl: "curl https://api.openai.com/v1/threads/thread_123/runs/run_123/submit_tool_outputs \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n    \"tool_outputs\": [\n      {\n        \"tool_call_id\": \"call_001\",\n        \"output\": \"70 degrees and sunny.\"\n      }\n    ]\n  }'\n"
            node.js: "import OpenAI from \"openai\";\n\nconst openai = new OpenAI();\n\nasync function main() {\n  const run = await openai.beta.threads.runs.submitToolOutputs(\n    \"thread_123\",\n    \"run_123\",\n    {\n      tool_outputs: [\n        {\n          tool_call_id: \"call_001\",\n          output: \"70 degrees and sunny.\",\n        },\n      ],\n    }\n  );\n\n  console.log(run);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nrun = client.beta.threads.runs.submit_tool_outputs(\n  thread_id=\"thread_123\",\n  run_id=\"run_123\",\n  tool_outputs=[\n    {\n      \"tool_call_id\": \"call_001\",\n      \"output\": \"70 degrees and sunny.\"\n    }\n  ]\n)\n\nprint(run)\n"
          response: "{\n  \"id\": \"run_123\",\n  \"object\": \"thread.run\",\n  \"created_at\": 1699075592,\n  \"assistant_id\": \"asst_123\",\n  \"thread_id\": \"thread_123\",\n  \"status\": \"queued\",\n  \"started_at\": 1699075592,\n  \"expires_at\": 1699076192,\n  \"cancelled_at\": null,\n  \"failed_at\": null,\n  \"completed_at\": null,\n  \"last_error\": null,\n  \"model\": \"gpt-4o\",\n  \"instructions\": null,\n  \"tools\": [\n    {\n      \"type\": \"function\",\n      \"function\": {\n        \"name\": \"get_current_weather\",\n        \"description\": \"Get the current weather in a given location\",\n        \"parameters\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"location\": {\n              \"type\": \"string\",\n              \"description\": \"The city and state, e.g. San Francisco, CA\"\n            },\n            \"unit\": {\n              \"type\": \"string\",\n              \"enum\": [\"celsius\", \"fahrenheit\"]\n            }\n          },\n          \"required\": [\"location\"]\n        }\n      }\n    }\n  ],\n  \"metadata\": {},\n  \"usage\": null,\n  \"temperature\": 1.0,\n  \"top_p\": 1.0,\n  \"max_prompt_tokens\": 1000,\n  \"max_completion_tokens\": 1000,\n  \"truncation_strategy\": {\n    \"type\": \"auto\",\n    \"last_messages\": null\n  },\n  \"response_format\": \"auto\",\n  \"tool_choice\": \"auto\",\n  \"parallel_tool_calls\": true\n}\n"
          title: Default
        group: threads
        name: Submit tool outputs to run
        returns: The modified [run](/docs/api-reference/runs/object) object matching the specified ID.
  /uploads:
    post:
      operationId: createUpload
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUploadRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload'
          description: OK
      summary: "Creates an intermediate [Upload](/docs/api-reference/uploads/object) object\nthat you can add [Parts](/docs/api-reference/uploads/part-object) to.\nCurrently, an Upload can accept at most 8 GB in total and expires after an\nhour after you create it.\n\nOnce you complete the Upload, we will create a\n[File](/docs/api-reference/files/object) object that contains all the parts\nyou uploaded. This File is usable in the rest of our platform as a regular\nFile object.\n\nFor certain `purpose` values, the correct `mime_type` must be specified. \nPlease refer to documentation for the \n[supported MIME types for your use case](/docs/assistants/tools/file-search#supported-files).\n\nFor guidance on the proper filename extensions for each purpose, please\nfollow the documentation on [creating a\nFile](/docs/api-reference/files/create).\n"
      tags:
        - Uploads
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/uploads \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"purpose\": \"fine-tune\",\n    \"filename\": \"training_examples.jsonl\",\n    \"bytes\": 2147483648,\n    \"mime_type\": \"text/jsonl\"\n  }'\n"
          response: "{\n  \"id\": \"upload_abc123\",\n  \"object\": \"upload\",\n  \"bytes\": 2147483648,\n  \"created_at\": 1719184911,\n  \"filename\": \"training_examples.jsonl\",\n  \"purpose\": \"fine-tune\",\n  \"status\": \"pending\",\n  \"expires_at\": 1719127296\n}\n"
        group: uploads
        name: Create upload
        returns: The [Upload](/docs/api-reference/uploads/object) object with status `pending`.
  /uploads/{upload_id}/cancel:
    post:
      operationId: cancelUpload
      parameters:
        - description: "The ID of the Upload.\n"
          in: path
          name: upload_id
          required: true
          schema:
            example: upload_abc123
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload'
          description: OK
      summary: "Cancels the Upload. No Parts may be added after an Upload is cancelled.\n"
      tags:
        - Uploads
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/uploads/upload_abc123/cancel\n"
          response: "{\n  \"id\": \"upload_abc123\",\n  \"object\": \"upload\",\n  \"bytes\": 2147483648,\n  \"created_at\": 1719184911,\n  \"filename\": \"training_examples.jsonl\",\n  \"purpose\": \"fine-tune\",\n  \"status\": \"cancelled\",\n  \"expires_at\": 1719127296\n}\n"
        group: uploads
        name: Cancel upload
        returns: The [Upload](/docs/api-reference/uploads/object) object with status `cancelled`.
  /uploads/{upload_id}/complete:
    post:
      operationId: completeUpload
      parameters:
        - description: "The ID of the Upload.\n"
          in: path
          name: upload_id
          required: true
          schema:
            example: upload_abc123
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteUploadRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Upload'
          description: OK
      summary: "Completes the [Upload](/docs/api-reference/uploads/object). \n\nWithin the returned Upload object, there is a nested [File](/docs/api-reference/files/object) object that is ready to use in the rest of the platform.\n\nYou can specify the order of the Parts by passing in an ordered list of the Part IDs.\n\nThe number of bytes uploaded upon completion must match the number of bytes initially specified when creating the Upload object. No Parts may be added after an Upload is completed.\n"
      tags:
        - Uploads
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/uploads/upload_abc123/complete\n  -d '{\n    \"part_ids\": [\"part_def456\", \"part_ghi789\"]\n  }'\n"
          response: "{\n  \"id\": \"upload_abc123\",\n  \"object\": \"upload\",\n  \"bytes\": 2147483648,\n  \"created_at\": 1719184911,\n  \"filename\": \"training_examples.jsonl\",\n  \"purpose\": \"fine-tune\",\n  \"status\": \"completed\",\n  \"expires_at\": 1719127296,\n  \"file\": {\n    \"id\": \"file-xyz321\",\n    \"object\": \"file\",\n    \"bytes\": 2147483648,\n    \"created_at\": 1719186911,\n    \"filename\": \"training_examples.jsonl\",\n    \"purpose\": \"fine-tune\",\n  }\n}\n"
        group: uploads
        name: Complete upload
        returns: The [Upload](/docs/api-reference/uploads/object) object with status `completed` with an additional `file` property containing the created usable File object.
  /uploads/{upload_id}/parts:
    post:
      operationId: addUploadPart
      parameters:
        - description: "The ID of the Upload.\n"
          in: path
          name: upload_id
          required: true
          schema:
            example: upload_abc123
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AddUploadPartRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPart'
          description: OK
      summary: "Adds a [Part](/docs/api-reference/uploads/part-object) to an [Upload](/docs/api-reference/uploads/object) object. A Part represents a chunk of bytes from the file you are trying to upload. \n\nEach Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.\n\nIt is possible to add multiple Parts in parallel. You can decide the intended order of the Parts when you [complete the Upload](/docs/api-reference/uploads/complete).\n"
      tags:
        - Uploads
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/uploads/upload_abc123/parts\n  -F data=\"aHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MS91cGxvYWRz...\"\n"
          response: "{\n  \"id\": \"part_def456\",\n  \"object\": \"upload.part\",\n  \"created_at\": 1719185911,\n  \"upload_id\": \"upload_abc123\"\n}\n"
        group: uploads
        name: Add upload part
        returns: The upload [Part](/docs/api-reference/uploads/part-object) object.
  /vector_stores:
    get:
      operationId: listVectorStores
      parameters:
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          in: query
          name: order
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          schema:
            type: string
        - description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          in: query
          name: before
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVectorStoresResponse'
          description: OK
      summary: Returns a list of vector stores.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const vectorStores = await openai.vectorStores.list();\n  console.log(vectorStores);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_stores = client.vector_stores.list()\nprint(vector_stores)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"vs_abc123\",\n      \"object\": \"vector_store\",\n      \"created_at\": 1699061776,\n      \"name\": \"Support FAQ\",\n      \"bytes\": 139920,\n      \"file_counts\": {\n        \"in_progress\": 0,\n        \"completed\": 3,\n        \"failed\": 0,\n        \"cancelled\": 0,\n        \"total\": 3\n      }\n    },\n    {\n      \"id\": \"vs_abc456\",\n      \"object\": \"vector_store\",\n      \"created_at\": 1699061776,\n      \"name\": \"Support FAQ v2\",\n      \"bytes\": 139920,\n      \"file_counts\": {\n        \"in_progress\": 0,\n        \"completed\": 3,\n        \"failed\": 0,\n        \"cancelled\": 0,\n        \"total\": 3\n      }\n    }\n  ],\n  \"first_id\": \"vs_abc123\",\n  \"last_id\": \"vs_abc456\",\n  \"has_more\": false\n}\n"
        group: vector_stores
        name: List vector stores
        returns: A list of [vector store](/docs/api-reference/vector-stores/object) objects.
    post:
      operationId: createVectorStore
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVectorStoreRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
          description: OK
      summary: Create a vector store.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -d '{\n    \"name\": \"Support FAQ\"\n  }'\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const vectorStore = await openai.vectorStores.create({\n    name: \"Support FAQ\"\n  });\n  console.log(vectorStore);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_store = client.vector_stores.create(\n  name=\"Support FAQ\"\n)\nprint(vector_store)\n"
          response: "{\n  \"id\": \"vs_abc123\",\n  \"object\": \"vector_store\",\n  \"created_at\": 1699061776,\n  \"name\": \"Support FAQ\",\n  \"bytes\": 139920,\n  \"file_counts\": {\n    \"in_progress\": 0,\n    \"completed\": 3,\n    \"failed\": 0,\n    \"cancelled\": 0,\n    \"total\": 3\n  }\n}\n"
        group: vector_stores
        name: Create vector store
        returns: A [vector store](/docs/api-reference/vector-stores/object) object.
  /vector_stores/{vector_store_id}:
    delete:
      operationId: deleteVectorStore
      parameters:
        - description: The ID of the vector store to delete.
          in: path
          name: vector_store_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVectorStoreResponse'
          description: OK
      summary: Delete a vector store.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -X DELETE\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const deletedVectorStore = await openai.vectorStores.del(\n    \"vs_abc123\"\n  );\n  console.log(deletedVectorStore);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ndeleted_vector_store = client.vector_stores.delete(\n  vector_store_id=\"vs_abc123\"\n)\nprint(deleted_vector_store)\n"
          response: "{\n  id: \"vs_abc123\",\n  object: \"vector_store.deleted\",\n  deleted: true\n}\n"
        group: vector_stores
        name: Delete vector store
        returns: Deletion status
    get:
      operationId: getVectorStore
      parameters:
        - description: The ID of the vector store to retrieve.
          in: path
          name: vector_store_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
          description: OK
      summary: Retrieves a vector store.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const vectorStore = await openai.vectorStores.retrieve(\n    \"vs_abc123\"\n  );\n  console.log(vectorStore);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_store = client.vector_stores.retrieve(\n  vector_store_id=\"vs_abc123\"\n)\nprint(vector_store)\n"
          response: "{\n  \"id\": \"vs_abc123\",\n  \"object\": \"vector_store\",\n  \"created_at\": 1699061776\n}\n"
        group: vector_stores
        name: Retrieve vector store
        returns: The [vector store](/docs/api-reference/vector-stores/object) object matching the specified ID.
    post:
      operationId: modifyVectorStore
      parameters:
        - description: The ID of the vector store to modify.
          in: path
          name: vector_store_id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVectorStoreRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreObject'
          description: OK
      summary: Modifies a vector store.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n  -d '{\n    \"name\": \"Support FAQ\"\n  }'\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const vectorStore = await openai.vectorStores.update(\n    \"vs_abc123\",\n    {\n      name: \"Support FAQ\"\n    }\n  );\n  console.log(vectorStore);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_store = client.vector_stores.update(\n  vector_store_id=\"vs_abc123\",\n  name=\"Support FAQ\"\n)\nprint(vector_store)\n"
          response: "{\n  \"id\": \"vs_abc123\",\n  \"object\": \"vector_store\",\n  \"created_at\": 1699061776,\n  \"name\": \"Support FAQ\",\n  \"bytes\": 139920,\n  \"file_counts\": {\n    \"in_progress\": 0,\n    \"completed\": 3,\n    \"failed\": 0,\n    \"cancelled\": 0,\n    \"total\": 3\n  }\n}\n"
        group: vector_stores
        name: Modify vector store
        returns: The modified [vector store](/docs/api-reference/vector-stores/object) object.
  /vector_stores/{vector_store_id}/file_batches:
    post:
      operationId: createVectorStoreFileBatch
      parameters:
        - description: "The ID of the vector store for which to create a File Batch.\n"
          in: path
          name: vector_store_id
          required: true
          schema:
            example: vs_abc123
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVectorStoreFileBatchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatchObject'
          description: OK
      summary: Create a vector store file batch.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123/file_batches \\\n    -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n    -H \"Content-Type: application/json \\\n    -H \"OpenAI-Beta: assistants=v2\" \\\n    -d '{\n      \"file_ids\": [\"file-abc123\", \"file-abc456\"]\n    }'\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const myVectorStoreFileBatch = await openai.vectorStores.fileBatches.create(\n    \"vs_abc123\",\n    {\n      file_ids: [\"file-abc123\", \"file-abc456\"]\n    }\n  );\n  console.log(myVectorStoreFileBatch);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_store_file_batch = client.vector_stores.file_batches.create(\n  vector_store_id=\"vs_abc123\",\n  file_ids=[\"file-abc123\", \"file-abc456\"]\n)\nprint(vector_store_file_batch)\n"
          response: "{\n  \"id\": \"vsfb_abc123\",\n  \"object\": \"vector_store.file_batch\",\n  \"created_at\": 1699061776,\n  \"vector_store_id\": \"vs_abc123\",\n  \"status\": \"in_progress\",\n  \"file_counts\": {\n    \"in_progress\": 1,\n    \"completed\": 1,\n    \"failed\": 0,\n    \"cancelled\": 0,\n    \"total\": 0,\n  }\n}\n"
        group: vector_stores
        name: Create vector store file batch
        returns: A [vector store file batch](/docs/api-reference/vector-stores-file-batches/batch-object) object.
  /vector_stores/{vector_store_id}/file_batches/{batch_id}:
    get:
      operationId: getVectorStoreFileBatch
      parameters:
        - description: The ID of the vector store that the file batch belongs to.
          in: path
          name: vector_store_id
          required: true
          schema:
            example: vs_abc123
            type: string
        - description: The ID of the file batch being retrieved.
          in: path
          name: batch_id
          required: true
          schema:
            example: vsfb_abc123
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatchObject'
          description: OK
      summary: Retrieves a vector store file batch.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123/files_batches/vsfb_abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const vectorStoreFileBatch = await openai.vectorStores.fileBatches.retrieve(\n    \"vs_abc123\",\n    \"vsfb_abc123\"\n  );\n  console.log(vectorStoreFileBatch);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_store_file_batch = client.vector_stores.file_batches.retrieve(\n  vector_store_id=\"vs_abc123\",\n  batch_id=\"vsfb_abc123\"\n)\nprint(vector_store_file_batch)\n"
          response: "{\n  \"id\": \"vsfb_abc123\",\n  \"object\": \"vector_store.file_batch\",\n  \"created_at\": 1699061776,\n  \"vector_store_id\": \"vs_abc123\",\n  \"status\": \"in_progress\",\n  \"file_counts\": {\n    \"in_progress\": 1,\n    \"completed\": 1,\n    \"failed\": 0,\n    \"cancelled\": 0,\n    \"total\": 0,\n  }\n}\n"
        group: vector_stores
        name: Retrieve vector store file batch
        returns: The [vector store file batch](/docs/api-reference/vector-stores-file-batches/batch-object) object.
  /vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel:
    post:
      operationId: cancelVectorStoreFileBatch
      parameters:
        - description: The ID of the vector store that the file batch belongs to.
          in: path
          name: vector_store_id
          required: true
          schema:
            type: string
        - description: The ID of the file batch to cancel.
          in: path
          name: batch_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileBatchObject'
          description: OK
      summary: Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123/files_batches/vsfb_abc123/cancel \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -X POST\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const deletedVectorStoreFileBatch = await openai.vectorStores.fileBatches.cancel(\n    \"vs_abc123\",\n    \"vsfb_abc123\"\n  );\n  console.log(deletedVectorStoreFileBatch);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ndeleted_vector_store_file_batch = client.vector_stores.file_batches.cancel(\n    vector_store_id=\"vs_abc123\",\n    file_batch_id=\"vsfb_abc123\"\n)\nprint(deleted_vector_store_file_batch)\n"
          response: "{\n  \"id\": \"vsfb_abc123\",\n  \"object\": \"vector_store.file_batch\",\n  \"created_at\": 1699061776,\n  \"vector_store_id\": \"vs_abc123\",\n  \"status\": \"in_progress\",\n  \"file_counts\": {\n    \"in_progress\": 12,\n    \"completed\": 3,\n    \"failed\": 0,\n    \"cancelled\": 0,\n    \"total\": 15,\n  }\n}\n"
        group: vector_stores
        name: Cancel vector store file batch
        returns: The modified vector store file batch object.
  /vector_stores/{vector_store_id}/file_batches/{batch_id}/files:
    get:
      operationId: listFilesInVectorStoreBatch
      parameters:
        - description: The ID of the vector store that the files belong to.
          in: path
          name: vector_store_id
          required: true
          schema:
            type: string
        - description: The ID of the file batch that the files belong to.
          in: path
          name: batch_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          in: query
          name: order
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          schema:
            type: string
        - description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          in: query
          name: before
          schema:
            type: string
        - description: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
          in: query
          name: filter
          schema:
            enum:
              - in_progress
              - completed
              - failed
              - cancelled
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVectorStoreFilesResponse'
          description: OK
      summary: Returns a list of vector store files in a batch.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123/files_batches/vsfb_abc123/files \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const vectorStoreFiles = await openai.vectorStores.fileBatches.listFiles(\n    \"vs_abc123\",\n    \"vsfb_abc123\"\n  );\n  console.log(vectorStoreFiles);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_store_files = client.vector_stores.file_batches.list_files(\n  vector_store_id=\"vs_abc123\",\n  batch_id=\"vsfb_abc123\"\n)\nprint(vector_store_files)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"vector_store.file\",\n      \"created_at\": 1699061776,\n      \"vector_store_id\": \"vs_abc123\"\n    },\n    {\n      \"id\": \"file-abc456\",\n      \"object\": \"vector_store.file\",\n      \"created_at\": 1699061776,\n      \"vector_store_id\": \"vs_abc123\"\n    }\n  ],\n  \"first_id\": \"file-abc123\",\n  \"last_id\": \"file-abc456\",\n  \"has_more\": false\n}\n"
        group: vector_stores
        name: List vector store files in a batch
        returns: A list of [vector store file](/docs/api-reference/vector-stores-files/file-object) objects.
  /vector_stores/{vector_store_id}/files:
    get:
      operationId: listVectorStoreFiles
      parameters:
        - description: The ID of the vector store that the files belong to.
          in: path
          name: vector_store_id
          required: true
          schema:
            type: string
        - description: "A limit on the number of objects to be returned. Limit can range between 1 and 100, and the default is 20.\n"
          in: query
          name: limit
          required: false
          schema:
            default: 20
            type: integer
        - description: "Sort order by the `created_at` timestamp of the objects. `asc` for ascending order and `desc` for descending order.\n"
          in: query
          name: order
          schema:
            default: desc
            enum:
              - asc
              - desc
            type: string
        - description: "A cursor for use in pagination. `after` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, ending with obj_foo, your subsequent call can include after=obj_foo in order to fetch the next page of the list.\n"
          in: query
          name: after
          schema:
            type: string
        - description: "A cursor for use in pagination. `before` is an object ID that defines your place in the list. For instance, if you make a list request and receive 100 objects, starting with obj_foo, your subsequent call can include before=obj_foo in order to fetch the previous page of the list.\n"
          in: query
          name: before
          schema:
            type: string
        - description: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.
          in: query
          name: filter
          schema:
            enum:
              - in_progress
              - completed
              - failed
              - cancelled
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListVectorStoreFilesResponse'
          description: OK
      summary: Returns a list of vector store files.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123/files \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const vectorStoreFiles = await openai.vectorStores.files.list(\n    \"vs_abc123\"\n  );\n  console.log(vectorStoreFiles);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_store_files = client.vector_stores.files.list(\n  vector_store_id=\"vs_abc123\"\n)\nprint(vector_store_files)\n"
          response: "{\n  \"object\": \"list\",\n  \"data\": [\n    {\n      \"id\": \"file-abc123\",\n      \"object\": \"vector_store.file\",\n      \"created_at\": 1699061776,\n      \"vector_store_id\": \"vs_abc123\"\n    },\n    {\n      \"id\": \"file-abc456\",\n      \"object\": \"vector_store.file\",\n      \"created_at\": 1699061776,\n      \"vector_store_id\": \"vs_abc123\"\n    }\n  ],\n  \"first_id\": \"file-abc123\",\n  \"last_id\": \"file-abc456\",\n  \"has_more\": false\n}\n"
        group: vector_stores
        name: List vector store files
        returns: A list of [vector store file](/docs/api-reference/vector-stores-files/file-object) objects.
    post:
      operationId: createVectorStoreFile
      parameters:
        - description: "The ID of the vector store for which to create a File.\n"
          in: path
          name: vector_store_id
          required: true
          schema:
            example: vs_abc123
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVectorStoreFileRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileObject'
          description: OK
      summary: Create a vector store file by attaching a [File](/docs/api-reference/files) to a [vector store](/docs/api-reference/vector-stores/object).
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123/files \\\n    -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n    -H \"Content-Type: application/json\" \\\n    -H \"OpenAI-Beta: assistants=v2\" \\\n    -d '{\n      \"file_id\": \"file-abc123\"\n    }'\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const myVectorStoreFile = await openai.vectorStores.files.create(\n    \"vs_abc123\",\n    {\n      file_id: \"file-abc123\"\n    }\n  );\n  console.log(myVectorStoreFile);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_store_file = client.vector_stores.files.create(\n  vector_store_id=\"vs_abc123\",\n  file_id=\"file-abc123\"\n)\nprint(vector_store_file)\n"
          response: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"vector_store.file\",\n  \"created_at\": 1699061776,\n  \"usage_bytes\": 1234,\n  \"vector_store_id\": \"vs_abcd\",\n  \"status\": \"completed\",\n  \"last_error\": null\n}\n"
        group: vector_stores
        name: Create vector store file
        returns: A [vector store file](/docs/api-reference/vector-stores-files/file-object) object.
  /vector_stores/{vector_store_id}/files/{file_id}:
    delete:
      operationId: deleteVectorStoreFile
      parameters:
        - description: The ID of the vector store that the file belongs to.
          in: path
          name: vector_store_id
          required: true
          schema:
            type: string
        - description: The ID of the file to delete.
          in: path
          name: file_id
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteVectorStoreFileResponse'
          description: OK
      summary: Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the [delete file](/docs/api-reference/files/delete) endpoint.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123/files/file-abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\" \\\n  -X DELETE\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const deletedVectorStoreFile = await openai.vectorStores.files.del(\n    \"vs_abc123\",\n    \"file-abc123\"\n  );\n  console.log(deletedVectorStoreFile);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\ndeleted_vector_store_file = client.vector_stores.files.delete(\n    vector_store_id=\"vs_abc123\",\n    file_id=\"file-abc123\"\n)\nprint(deleted_vector_store_file)\n"
          response: "{\n  id: \"file-abc123\",\n  object: \"vector_store.file.deleted\",\n  deleted: true\n}\n"
        group: vector_stores
        name: Delete vector store file
        returns: Deletion status
    get:
      operationId: getVectorStoreFile
      parameters:
        - description: The ID of the vector store that the file belongs to.
          in: path
          name: vector_store_id
          required: true
          schema:
            example: vs_abc123
            type: string
        - description: The ID of the file being retrieved.
          in: path
          name: file_id
          required: true
          schema:
            example: file-abc123
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileObject'
          description: OK
      summary: Retrieves a vector store file.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/vs_abc123/files/file-abc123 \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"OpenAI-Beta: assistants=v2\"\n"
            node.js: "import OpenAI from \"openai\";\nconst openai = new OpenAI();\n\nasync function main() {\n  const vectorStoreFile = await openai.vectorStores.files.retrieve(\n    \"vs_abc123\",\n    \"file-abc123\"\n  );\n  console.log(vectorStoreFile);\n}\n\nmain();\n"
            python: "from openai import OpenAI\nclient = OpenAI()\n\nvector_store_file = client.vector_stores.files.retrieve(\n  vector_store_id=\"vs_abc123\",\n  file_id=\"file-abc123\"\n)\nprint(vector_store_file)\n"
          response: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"vector_store.file\",\n  \"created_at\": 1699061776,\n  \"vector_store_id\": \"vs_abcd\",\n  \"status\": \"completed\",\n  \"last_error\": null\n}\n"
        group: vector_stores
        name: Retrieve vector store file
        returns: The [vector store file](/docs/api-reference/vector-stores-files/file-object) object.
    post:
      operationId: updateVectorStoreFileAttributes
      parameters:
        - description: The ID of the vector store the file belongs to.
          in: path
          name: vector_store_id
          required: true
          schema:
            example: vs_abc123
            type: string
        - description: The ID of the file to update attributes.
          in: path
          name: file_id
          required: true
          schema:
            example: file-abc123
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateVectorStoreFileAttributesRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileObject'
          description: OK
      summary: Update attributes on a vector store file.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl https://api.openai.com/v1/vector_stores/{vector_store_id}/files/{file_id} \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"attributes\": {\"key1\": \"value1\", \"key2\": 2}}'\n"
          response: "{\n  \"id\": \"file-abc123\",\n  \"object\": \"vector_store.file\",\n  \"usage_bytes\": 1234,\n  \"created_at\": 1699061776,\n  \"vector_store_id\": \"vs_abcd\",\n  \"status\": \"completed\",\n  \"last_error\": null,\n  \"chunking_strategy\": {...},\n  \"attributes\": {\"key1\": \"value1\", \"key2\": 2}\n}\n"
        group: vector_stores
        name: Update vector store file attributes
        returns: The updated [vector store file](/docs/api-reference/vector-stores-files/file-object) object.
  /vector_stores/{vector_store_id}/files/{file_id}/content:
    get:
      operationId: retrieveVectorStoreFileContent
      parameters:
        - description: The ID of the vector store.
          in: path
          name: vector_store_id
          required: true
          schema:
            example: vs_abc123
            type: string
        - description: The ID of the file within the vector store.
          in: path
          name: file_id
          required: true
          schema:
            example: file-abc123
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreFileContentResponse'
          description: OK
      summary: Retrieve the parsed contents of a vector store file.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl \\\nhttps://api.openai.com/v1/vector_stores/vs_abc123/files/file-abc123/content \\\n-H \"Authorization: Bearer $OPENAI_API_KEY\"\n"
          response: "{\n  \"file_id\": \"file-abc123\",\n  \"filename\": \"example.txt\",\n  \"attributes\": {\"key\": \"value\"},\n  \"content\": [\n    {\"type\": \"text\", \"text\": \"...\"},\n    ...\n  ]\n}\n"
        group: vector_stores
        name: Retrieve vector store file content
        returns: The parsed contents of the specified vector store file.
  /vector_stores/{vector_store_id}/search:
    post:
      operationId: searchVectorStore
      parameters:
        - description: The ID of the vector store to search.
          in: path
          name: vector_store_id
          required: true
          schema:
            example: vs_abc123
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VectorStoreSearchRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VectorStoreSearchResultsPage'
          description: OK
      summary: Search a vector store for relevant chunks based on a query and file attributes filter.
      tags:
        - Vector stores
      x-oaiMeta:
        examples:
          request:
            curl: "curl -X POST \\\nhttps://api.openai.com/v1/vector_stores/vs_abc123/search \\\n-H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n-H \"Content-Type: application/json\" \\\n-d '{\"query\": \"What is the return policy?\", \"filters\": {...}}'\n"
          response: "{\n  \"object\": \"vector_store.search_results.page\",\n  \"search_query\": \"What is the return policy?\",\n  \"data\": [\n    {\n      \"file_id\": \"file_123\",\n      \"filename\": \"document.pdf\",\n      \"score\": 0.95,\n      \"attributes\": {\n        \"author\": \"John Doe\",\n        \"date\": \"2023-01-01\"\n      },\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Relevant chunk\"\n        }\n      ]\n    },\n    {\n      \"file_id\": \"file_456\",\n      \"filename\": \"notes.txt\",\n      \"score\": 0.89,\n      \"attributes\": {\n        \"author\": \"Jane Smith\",\n        \"date\": \"2023-01-02\"\n      },\n      \"content\": [\n        {\n          \"type\": \"text\",\n          \"text\": \"Sample text content from the vector store.\"\n        }\n      ]\n    }\n  ],\n  \"has_more\": false,\n  \"next_page\": null\n}\n"
        group: vector_stores
        name: Search vector store
        returns: A page of search results from the vector store.
security:
  - ApiKeyAuth: []
servers:
  - url: https://api.openai.com/v1
tags:
  - description: Build Assistants that can call models and use tools.
    name: Assistants
  - description: Turn audio into text or text into audio.
    name: Audio
  - description: Given a list of messages comprising a conversation, the model will return a response.
    name: Chat
  - description: Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.
    name: Completions
  - description: Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.
    name: Embeddings
  - description: Manage fine-tuning jobs to tailor a model to your specific training data.
    name: Fine-tuning
  - description: Create large batches of API requests to run asynchronously.
    name: Batch
  - description: Files are used to upload documents that can be used with features like Assistants and Fine-tuning.
    name: Files
  - description: Use Uploads to upload large files in multiple parts.
    name: Uploads
  - description: Given a prompt and/or an input image, the model will generate a new image.
    name: Images
  - description: List and describe the various models available in the API.
    name: Models
  - description: Given text and/or image inputs, classifies if those inputs are potentially harmful.
    name: Moderations
  - description: List user actions and configuration changes within this organization.
    name: Audit Logs
x-oaiMeta:
  groups:
    - description: "The Chat Completions API endpoint will generate a model response from a \nlist of messages comprising a conversation.\n\nRelated guides:\n- [Quickstart](/docs/quickstart?api-mode=chat)\n- [Text inputs and outputs](/docs/guides/text?api-mode=chat)\n- [Image inputs](/docs/guides/images?api-mode=chat)\n- [Audio inputs and outputs](/docs/guides/audio?api-mode=chat)\n- [Structured Outputs](/docs/guides/structured-outputs?api-mode=chat)\n- [Function calling](/docs/guides/function-calling?api-mode=chat)\n- [Conversation state](/docs/guides/conversation-state?api-mode=chat)\n\n**Starting a new project?** We recommend trying [Responses](/docs/api-reference/responses) \nto take advantage of the latest OpenAI platform features. Compare\n[Chat Completions with Responses](/docs/guides/responses-vs-chat-completions?api-mode=responses).\n"
      id: chat
      navigationGroup: chat
      sections:
        - key: createChatCompletion
          path: create
          type: endpoint
        - key: getChatCompletion
          path: get
          type: endpoint
        - key: getChatCompletionMessages
          path: getMessages
          type: endpoint
        - key: listChatCompletions
          path: list
          type: endpoint
        - key: updateChatCompletion
          path: update
          type: endpoint
        - key: deleteChatCompletion
          path: delete
          type: endpoint
        - key: CreateChatCompletionResponse
          path: object
          type: object
        - key: ChatCompletionList
          path: list-object
          type: object
        - key: ChatCompletionMessageList
          path: message-list
          type: object
      title: Chat Completions
    - description: "Stream Chat Completions in real time. Receive chunks of completions\nreturned from the model using server-sent events. \n[Learn more](/docs/guides/streaming-responses?api-mode=chat).\n"
      id: chat-streaming
      navigationGroup: chat
      sections:
        - key: CreateChatCompletionStreamResponse
          path: streaming
          type: object
      title: Streaming
    - description: "Learn how to turn audio into text or text into audio.\n\nRelated guide: [Speech to text](/docs/guides/speech-to-text)\n"
      id: audio
      navigationGroup: endpoints
      sections:
        - key: createSpeech
          path: createSpeech
          type: endpoint
        - key: createTranscription
          path: createTranscription
          type: endpoint
        - key: createTranslation
          path: createTranslation
          type: endpoint
        - key: CreateTranscriptionResponseJson
          path: json-object
          type: object
        - key: CreateTranscriptionResponseVerboseJson
          path: verbose-json-object
          type: object
      title: Audio
    - description: "Get a vector representation of a given input that can be easily consumed by machine learning models and algorithms.\nRelated guide: [Embeddings](/docs/guides/embeddings)\n"
      id: embeddings
      navigationGroup: endpoints
      sections:
        - key: createEmbedding
          path: create
          type: endpoint
        - key: Embedding
          path: object
          type: object
      title: Embeddings
    - description: "Manage fine-tuning jobs to tailor a model to your specific training data.\nRelated guide: [Fine-tune models](/docs/guides/fine-tuning)\n"
      id: fine-tuning
      navigationGroup: endpoints
      sections:
        - key: createFineTuningJob
          path: create
          type: endpoint
        - key: listPaginatedFineTuningJobs
          path: list
          type: endpoint
        - key: listFineTuningEvents
          path: list-events
          type: endpoint
        - key: listFineTuningJobCheckpoints
          path: list-checkpoints
          type: endpoint
        - key: retrieveFineTuningJob
          path: retrieve
          type: endpoint
        - key: cancelFineTuningJob
          path: cancel
          type: endpoint
        - key: FineTuneChatRequestInput
          path: chat-input
          type: object
        - key: FineTunePreferenceRequestInput
          path: preference-input
          type: object
        - key: FineTuneCompletionRequestInput
          path: completions-input
          type: object
        - key: FineTuningJob
          path: object
          type: object
        - key: FineTuningJobEvent
          path: event-object
          type: object
        - key: FineTuningJobCheckpoint
          path: checkpoint-object
          type: object
      title: Fine-tuning
    - description: "Create large batches of API requests for asynchronous processing. The Batch API returns completions within 24 hours for a 50% discount.\nRelated guide: [Batch](/docs/guides/batch)\n"
      id: batch
      navigationGroup: endpoints
      sections:
        - key: createBatch
          path: create
          type: endpoint
        - key: retrieveBatch
          path: retrieve
          type: endpoint
        - key: cancelBatch
          path: cancel
          type: endpoint
        - key: listBatches
          path: list
          type: endpoint
        - key: Batch
          path: object
          type: object
        - key: BatchRequestInput
          path: request-input
          type: object
        - key: BatchRequestOutput
          path: request-output
          type: object
      title: Batch
    - description: "Files are used to upload documents that can be used with features like [Assistants](/docs/api-reference/assistants), [Fine-tuning](/docs/api-reference/fine-tuning), and [Batch API](/docs/guides/batch).\n"
      id: files
      navigationGroup: endpoints
      sections:
        - key: createFile
          path: create
          type: endpoint
        - key: listFiles
          path: list
          type: endpoint
        - key: retrieveFile
          path: retrieve
          type: endpoint
        - key: deleteFile
          path: delete
          type: endpoint
        - key: downloadFile
          path: retrieve-contents
          type: endpoint
        - key: OpenAIFile
          path: object
          type: object
      title: Files
    - description: "Allows you to upload large files in multiple parts.\n"
      id: uploads
      navigationGroup: endpoints
      sections:
        - key: createUpload
          path: create
          type: endpoint
        - key: addUploadPart
          path: add-part
          type: endpoint
        - key: completeUpload
          path: complete
          type: endpoint
        - key: cancelUpload
          path: cancel
          type: endpoint
        - key: Upload
          path: object
          type: object
        - key: UploadPart
          path: part-object
          type: object
      title: Uploads
    - description: "Given a prompt and/or an input image, the model will generate a new image.\nRelated guide: [Image generation](/docs/guides/images)\n"
      id: images
      navigationGroup: endpoints
      sections:
        - key: createImage
          path: create
          type: endpoint
        - key: createImageEdit
          path: createEdit
          type: endpoint
        - key: createImageVariation
          path: createVariation
          type: endpoint
        - key: Image
          path: object
          type: object
      title: Images
    - description: "List and describe the various models available in the API. You can refer to the [Models](/docs/models) documentation to understand what models are available and the differences between them.\n"
      id: models
      navigationGroup: endpoints
      sections:
        - key: listModels
          path: list
          type: endpoint
        - key: retrieveModel
          path: retrieve
          type: endpoint
        - key: deleteModel
          path: delete
          type: endpoint
        - key: Model
          path: object
          type: object
      title: Models
    - description: "Given text and/or image inputs, classifies if those inputs are potentially harmful across several categories.\nRelated guide: [Moderations](/docs/guides/moderation)\n"
      id: moderations
      navigationGroup: endpoints
      sections:
        - key: createModeration
          path: create
          type: endpoint
        - key: CreateModerationResponse
          path: object
          type: object
      title: Moderations
    - description: "OpenAI's most advanced interface for generating model responses. Supports\ntext and image inputs, and text outputs. Create stateful interactions\nwith the model, using the output of previous responses as input. Extend\nthe model's capabilities with built-in tools for file search, web search,\ncomputer use, and more. Allow the model access to external systems and data \nusing function calling.\n\nRelated guides:\n- [Quickstart](/docs/quickstart?api-mode=responses)\n- [Text inputs and outputs](/docs/guides/text?api-mode=responses)\n- [Image inputs](/docs/guides/images?api-mode=responses)\n- [Structured Outputs](/docs/guides/structured-outputs?api-mode=responses)\n- [Function calling](/docs/guides/function-calling?api-mode=responses)\n- [Conversation state](/docs/guides/conversation-state?api-mode=responses)\n- [Extend the models with tools](/docs/guides/tools?api-mode=responses)\n"
      id: responses
      navigationGroup: responses
      sections:
        - key: createResponse
          path: create
          type: endpoint
        - key: getResponse
          path: get
          type: endpoint
        - key: deleteResponse
          path: delete
          type: endpoint
        - key: listInputItems
          path: input-items
          type: endpoint
        - key: Response
          path: object
          type: object
        - key: ResponseItemList
          path: list
          type: object
      title: Responses
    - description: "When you [create a Response](/docs/api-reference/responses/create) with\n`stream` set to `true`, the server will emit server-sent events to the\nclient as the Response is generated. This section contains the events that\nare emitted by the server.\n\n[Learn more about streaming responses](/docs/guides/streaming-responses?api-mode=responses).\n"
      id: responses-streaming
      navigationGroup: responses
      sections:
        - key: ResponseCreatedEvent
          path: <auto>
          type: object
        - key: ResponseInProgressEvent
          path: <auto>
          type: object
        - key: ResponseCompletedEvent
          path: <auto>
          type: object
        - key: ResponseFailedEvent
          path: <auto>
          type: object
        - key: ResponseIncompleteEvent
          path: <auto>
          type: object
        - key: ResponseOutputItemAddedEvent
          path: <auto>
          type: object
        - key: ResponseOutputItemDoneEvent
          path: <auto>
          type: object
        - key: ResponseContentPartAddedEvent
          path: <auto>
          type: object
        - key: ResponseContentPartDoneEvent
          path: <auto>
          type: object
        - key: ResponseTextDeltaEvent
          path: <auto>
          type: object
        - key: ResponseTextAnnotationDeltaEvent
          path: <auto>
          type: object
        - key: ResponseTextDoneEvent
          path: <auto>
          type: object
        - key: ResponseRefusalDeltaEvent
          path: <auto>
          type: object
        - key: ResponseRefusalDoneEvent
          path: <auto>
          type: object
        - key: ResponseFunctionCallArgumentsDeltaEvent
          path: <auto>
          type: object
        - key: ResponseFunctionCallArgumentsDoneEvent
          path: <auto>
          type: object
        - key: ResponseFileSearchCallInProgressEvent
          path: <auto>
          type: object
        - key: ResponseFileSearchCallSearchingEvent
          path: <auto>
          type: object
        - key: ResponseFileSearchCallCompletedEvent
          path: <auto>
          type: object
        - key: ResponseWebSearchCallInProgressEvent
          path: <auto>
          type: object
        - key: ResponseWebSearchCallSearchingEvent
          path: <auto>
          type: object
        - key: ResponseWebSearchCallCompletedEvent
          path: <auto>
          type: object
        - key: ResponseErrorEvent
          path: <auto>
          type: object
      title: Streaming
    - beta: true
      description: "Communicate with a GPT-4o class model in real time using WebRTC or \nWebSockets. Supports text and audio inputs and ouputs, along with audio\ntranscriptions.\n[Learn more about the Realtime API](/docs/guides/realtime).\n"
      id: realtime
      navigationGroup: realtime
      title: Realtime
    - description: "REST API endpoint to generate ephemeral session tokens for use in client-side\napplications.\n"
      id: realtime-sessions
      navigationGroup: realtime
      sections:
        - key: create-realtime-session
          path: create
          type: endpoint
        - key: RealtimeSessionCreateResponse
          path: session_object
          type: object
      title: Session tokens
    - description: "These are events that the OpenAI Realtime WebSocket server will accept from the client.\n"
      id: realtime-client-events
      navigationGroup: realtime
      sections:
        - key: RealtimeClientEventSessionUpdate
          path: <auto>
          type: object
        - key: RealtimeClientEventInputAudioBufferAppend
          path: <auto>
          type: object
        - key: RealtimeClientEventInputAudioBufferCommit
          path: <auto>
          type: object
        - key: RealtimeClientEventInputAudioBufferClear
          path: <auto>
          type: object
        - key: RealtimeClientEventConversationItemCreate
          path: <auto>
          type: object
        - key: RealtimeClientEventConversationItemTruncate
          path: <auto>
          type: object
        - key: RealtimeClientEventConversationItemDelete
          path: <auto>
          type: object
        - key: RealtimeClientEventResponseCreate
          path: <auto>
          type: object
        - key: RealtimeClientEventResponseCancel
          path: <auto>
          type: object
      title: Client events
    - description: "These are events emitted from the OpenAI Realtime WebSocket server to the client.\n"
      id: realtime-server-events
      navigationGroup: realtime
      sections:
        - key: RealtimeServerEventError
          path: <auto>
          type: object
        - key: RealtimeServerEventSessionCreated
          path: <auto>
          type: object
        - key: RealtimeServerEventSessionUpdated
          path: <auto>
          type: object
        - key: RealtimeServerEventConversationCreated
          path: <auto>
          type: object
        - key: RealtimeServerEventConversationItemCreated
          path: <auto>
          type: object
        - key: RealtimeServerEventConversationItemInputAudioTranscriptionCompleted
          path: <auto>
          type: object
        - key: RealtimeServerEventConversationItemInputAudioTranscriptionFailed
          path: <auto>
          type: object
        - key: RealtimeServerEventConversationItemTruncated
          path: <auto>
          type: object
        - key: RealtimeServerEventConversationItemDeleted
          path: <auto>
          type: object
        - key: RealtimeServerEventInputAudioBufferCommitted
          path: <auto>
          type: object
        - key: RealtimeServerEventInputAudioBufferCleared
          path: <auto>
          type: object
        - key: RealtimeServerEventInputAudioBufferSpeechStarted
          path: <auto>
          type: object
        - key: RealtimeServerEventInputAudioBufferSpeechStopped
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseCreated
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseDone
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseOutputItemAdded
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseOutputItemDone
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseContentPartAdded
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseContentPartDone
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseTextDelta
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseTextDone
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseAudioTranscriptDelta
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseAudioTranscriptDone
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseAudioDelta
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseAudioDone
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseFunctionCallArgumentsDelta
          path: <auto>
          type: object
        - key: RealtimeServerEventResponseFunctionCallArgumentsDone
          path: <auto>
          type: object
        - key: RealtimeServerEventRateLimitsUpdated
          path: <auto>
          type: object
      title: Server events
    - description: "Vector stores power semantic search for the Retrieval API and the `file_search` tool in the Responses and Assistants APIs.\n\nRelated guide: [File Search](/docs/assistants/tools/file-search)\n"
      id: vector-stores
      navigationGroup: vector_stores
      sections:
        - key: createVectorStore
          path: create
          type: endpoint
        - key: listVectorStores
          path: list
          type: endpoint
        - key: getVectorStore
          path: retrieve
          type: endpoint
        - key: modifyVectorStore
          path: modify
          type: endpoint
        - key: deleteVectorStore
          path: delete
          type: endpoint
        - key: searchVectorStore
          path: search
          type: endpoint
        - key: VectorStoreObject
          path: object
          type: object
      title: Vector stores
    - description: "Vector store files represent files inside a vector store.\n\nRelated guide: [File Search](/docs/assistants/tools/file-search)\n"
      id: vector-stores-files
      navigationGroup: vector_stores
      sections:
        - key: createVectorStoreFile
          path: createFile
          type: endpoint
        - key: listVectorStoreFiles
          path: listFiles
          type: endpoint
        - key: getVectorStoreFile
          path: getFile
          type: endpoint
        - key: retrieveVectorStoreFileContent
          path: getContent
          type: endpoint
        - key: updateVectorStoreFileAttributes
          path: updateAttributes
          type: endpoint
        - key: deleteVectorStoreFile
          path: deleteFile
          type: endpoint
        - key: VectorStoreFileObject
          path: file-object
          type: object
      title: Vector store files
    - description: "Vector store file batches represent operations to add multiple files to a vector store.\nRelated guide: [File Search](/docs/assistants/tools/file-search)\n"
      id: vector-stores-file-batches
      navigationGroup: vector_stores
      sections:
        - key: createVectorStoreFileBatch
          path: createBatch
          type: endpoint
        - key: getVectorStoreFileBatch
          path: getBatch
          type: endpoint
        - key: cancelVectorStoreFileBatch
          path: cancelBatch
          type: endpoint
        - key: listFilesInVectorStoreBatch
          path: listBatchFiles
          type: endpoint
        - key: VectorStoreFileBatchObject
          path: batch-object
          type: object
      title: Vector store file batches
    - description: "Programmatically manage your organization.\nThe Audit Logs endpoint provides a log of all actions taken in the organization for security and monitoring purposes.\nTo access these endpoints please generate an Admin API Key through the [API Platform Organization overview](/organization/admin-keys). Admin API keys cannot be used for non-administration endpoints.\nFor best practices on setting up your organization, please refer to this [guide](/docs/guides/production-best-practices#setting-up-your-organization)\n"
      id: administration
      navigationGroup: administration
      title: Administration
    - description: "The **Usage API** provides detailed insights into your activity across the OpenAI API. It also includes a separate [Costs endpoint](/docs/api-reference/usage/costs), which offers visibility into your spend, breaking down consumption by invoice line items and project IDs.\nWhile the Usage API delivers granular usage data, it may not always reconcile perfectly with the Costs due to minor differences in how usage and spend are recorded. For financial purposes, we recommend using the [Costs endpoint](/docs/api-reference/usage/costs) or the [Costs tab](/settings/organization/usage) in the Usage Dashboard, which will reconcile back to your billing invoice.\n"
      id: admin-api-keys
      navigationGroup: administration
      sections:
        - key: admin-api-keys-list
          path: list
          type: endpoint
        - key: admin-api-keys-create
          path: create
          type: endpoint
        - key: admin-api-keys-get
          path: listget
          type: endpoint
        - key: admin-api-keys-delete
          path: delete
          type: endpoint
      title: Admin API Keys
    - description: Invite and manage invitations for an organization.
      id: invite
      navigationGroup: administration
      sections:
        - key: list-invites
          path: list
          type: endpoint
        - key: inviteUser
          path: create
          type: endpoint
        - key: retrieve-invite
          path: retrieve
          type: endpoint
        - key: delete-invite
          path: delete
          type: endpoint
        - key: Invite
          path: object
          type: object
      title: Invites
    - description: "Manage users and their role in an organization.\n"
      id: users
      navigationGroup: administration
      sections:
        - key: list-users
          path: list
          type: endpoint
        - key: modify-user
          path: modify
          type: endpoint
        - key: retrieve-user
          path: retrieve
          type: endpoint
        - key: delete-user
          path: delete
          type: endpoint
        - key: User
          path: object
          type: object
      title: Users
    - description: "Manage the projects within an orgnanization includes creation, updating, and archiving or projects.\nThe Default project cannot be archived.\n"
      id: projects
      navigationGroup: administration
      sections:
        - key: list-projects
          path: list
          type: endpoint
        - key: create-project
          path: create
          type: endpoint
        - key: retrieve-project
          path: retrieve
          type: endpoint
        - key: modify-project
          path: modify
          type: endpoint
        - key: archive-project
          path: archive
          type: endpoint
        - key: Project
          path: object
          type: object
      title: Projects
    - description: "Manage users within a project, including adding, updating roles, and removing users.\n"
      id: project-users
      navigationGroup: administration
      sections:
        - key: list-project-users
          path: list
          type: endpoint
        - key: create-project-user
          path: creeate
          type: endpoint
        - key: retrieve-project-user
          path: retrieve
          type: endpoint
        - key: modify-project-user
          path: modify
          type: endpoint
        - key: delete-project-user
          path: delete
          type: endpoint
        - key: ProjectUser
          path: object
          type: object
      title: Project users
    - description: "Manage service accounts within a project. A service account is a bot user that is not associated with a user.\nIf a user leaves an organization, their keys and membership in projects will no longer work. Service accounts\ndo not have this limitation. However, service accounts can also be deleted from a project.\n"
      id: project-service-accounts
      navigationGroup: administration
      sections:
        - key: list-project-service-accounts
          path: list
          type: endpoint
        - key: create-project-service-account
          path: create
          type: endpoint
        - key: retrieve-project-service-account
          path: retrieve
          type: endpoint
        - key: delete-project-service-account
          path: delete
          type: endpoint
        - key: ProjectServiceAccount
          path: object
          type: object
      title: Project service accounts
    - description: "Manage API keys for a given project. Supports listing and deleting keys for users.\nThis API does not allow issuing keys for users, as users need to authorize themselves to generate keys.\n"
      id: project-api-keys
      navigationGroup: administration
      sections:
        - key: list-project-api-keys
          path: list
          type: endpoint
        - key: retrieve-project-api-key
          path: retrieve
          type: endpoint
        - key: delete-project-api-key
          path: delete
          type: endpoint
        - key: ProjectApiKey
          path: object
          type: object
      title: Project API keys
    - description: "Manage rate limits per model for projects. Rate limits may be configured to be equal to or lower than the organization's rate limits.\n"
      id: project-rate-limits
      navigationGroup: administration
      sections:
        - key: list-project-rate-limits
          path: list
          type: endpoint
        - key: update-project-rate-limits
          path: update
          type: endpoint
        - key: ProjectRateLimit
          path: object
          type: object
      title: Project rate limits
    - description: "Logs of user actions and configuration changes within this organization.\nTo log events, you must activate logging in the [Organization Settings](/settings/organization/general).\nOnce activated, for security reasons, logging cannot be deactivated.\n"
      id: audit-logs
      navigationGroup: administration
      sections:
        - key: list-audit-logs
          path: list
          type: endpoint
        - key: AuditLog
          path: object
          type: object
      title: Audit logs
    - description: "The **Usage API** provides detailed insights into your activity across the OpenAI API. It also includes a separate [Costs endpoint](/docs/api-reference/usage/costs), which offers visibility into your spend, breaking down consumption by invoice line items and project IDs.\n\nWhile the Usage API delivers granular usage data, it may not always reconcile perfectly with the Costs due to minor differences in how usage and spend are recorded. For financial purposes, we recommend using the [Costs endpoint](/docs/api-reference/usage/costs) or the [Costs tab](/settings/organization/usage) in the Usage Dashboard, which will reconcile back to your billing invoice.\n"
      id: usage
      navigationGroup: administration
      sections:
        - key: usage-completions
          path: completions
          type: endpoint
        - key: UsageCompletionsResult
          path: completions_object
          type: object
        - key: usage-embeddings
          path: embeddings
          type: endpoint
        - key: UsageEmbeddingsResult
          path: embeddings_object
          type: object
        - key: usage-moderations
          path: moderations
          type: endpoint
        - key: UsageModerationsResult
          path: moderations_object
          type: object
        - key: usage-images
          path: images
          type: endpoint
        - key: UsageImagesResult
          path: images_object
          type: object
        - key: usage-audio-speeches
          path: audio_speeches
          type: endpoint
        - key: UsageAudioSpeechesResult
          path: audio_speeches_object
          type: object
        - key: usage-audio-transcriptions
          path: audio_transcriptions
          type: endpoint
        - key: UsageAudioTranscriptionsResult
          path: audio_transcriptions_object
          type: object
        - key: usage-vector-stores
          path: vector_stores
          type: endpoint
        - key: UsageVectorStoresResult
          path: vector_stores_object
          type: object
        - key: usage-code-interpreter-sessions
          path: code_interpreter_sessions
          type: endpoint
        - key: UsageCodeInterpreterSessionsResult
          path: code_interpreter_sessions_object
          type: object
        - key: usage-costs
          path: costs
          type: endpoint
        - key: CostsResult
          path: costs_object
          type: object
      title: Usage
    - beta: true
      description: "Build assistants that can call models and use tools to perform tasks.\n\n[Get started with the Assistants API](/docs/assistants)\n"
      id: assistants
      navigationGroup: assistants
      sections:
        - key: createAssistant
          path: createAssistant
          type: endpoint
        - key: listAssistants
          path: listAssistants
          type: endpoint
        - key: getAssistant
          path: getAssistant
          type: endpoint
        - key: modifyAssistant
          path: modifyAssistant
          type: endpoint
        - key: deleteAssistant
          path: deleteAssistant
          type: endpoint
        - key: AssistantObject
          path: object
          type: object
      title: Assistants
    - beta: true
      description: "Create threads that assistants can interact with.\n\nRelated guide: [Assistants](/docs/assistants/overview)\n"
      id: threads
      navigationGroup: assistants
      sections:
        - key: createThread
          path: createThread
          type: endpoint
        - key: getThread
          path: getThread
          type: endpoint
        - key: modifyThread
          path: modifyThread
          type: endpoint
        - key: deleteThread
          path: deleteThread
          type: endpoint
        - key: ThreadObject
          path: object
          type: object
      title: Threads
    - beta: true
      description: "Create messages within threads\n\nRelated guide: [Assistants](/docs/assistants/overview)\n"
      id: messages
      navigationGroup: assistants
      sections:
        - key: createMessage
          path: createMessage
          type: endpoint
        - key: listMessages
          path: listMessages
          type: endpoint
        - key: getMessage
          path: getMessage
          type: endpoint
        - key: modifyMessage
          path: modifyMessage
          type: endpoint
        - key: deleteMessage
          path: deleteMessage
          type: endpoint
        - key: MessageObject
          path: object
          type: object
      title: Messages
    - beta: true
      description: "Represents an execution run on a thread.\n\nRelated guide: [Assistants](/docs/assistants/overview)\n"
      id: runs
      navigationGroup: assistants
      sections:
        - key: createRun
          path: createRun
          type: endpoint
        - key: createThreadAndRun
          path: createThreadAndRun
          type: endpoint
        - key: listRuns
          path: listRuns
          type: endpoint
        - key: getRun
          path: getRun
          type: endpoint
        - key: modifyRun
          path: modifyRun
          type: endpoint
        - key: submitToolOuputsToRun
          path: submitToolOutputs
          type: endpoint
        - key: cancelRun
          path: cancelRun
          type: endpoint
        - key: RunObject
          path: object
          type: object
      title: Runs
    - beta: true
      description: "Represents the steps (model and tool calls) taken during the run.\n\nRelated guide: [Assistants](/docs/assistants/overview)\n"
      id: run-steps
      navigationGroup: assistants
      sections:
        - key: listRunSteps
          path: listRunSteps
          type: endpoint
        - key: getRunStep
          path: getRunStep
          type: endpoint
        - key: RunStepObject
          path: step-object
          type: object
      title: Run steps
    - beta: true
      description: "Stream the result of executing a Run or resuming a Run after submitting tool outputs.\nYou can stream events from the [Create Thread and Run](/docs/api-reference/runs/createThreadAndRun),\n[Create Run](/docs/api-reference/runs/createRun), and [Submit Tool Outputs](/docs/api-reference/runs/submitToolOutputs)\nendpoints by passing `\"stream\": true`. The response will be a [Server-Sent events](https://html.spec.whatwg.org/multipage/server-sent-events.html#server-sent-events) stream.\nOur Node and Python SDKs provide helpful utilities to make streaming easy. Reference the\n[Assistants API quickstart](/docs/assistants/overview) to learn more.\n"
      id: assistants-streaming
      navigationGroup: assistants
      sections:
        - key: MessageDeltaObject
          path: message-delta-object
          type: object
        - key: RunStepDeltaObject
          path: run-step-delta-object
          type: object
        - key: AssistantStreamEvent
          path: events
          type: object
      title: Streaming
    - description: "Given a prompt, the model will return one or more predicted completions along with the probabilities of alternative tokens at each position. Most developer should use our [Chat Completions API](/docs/guides/text-generation#text-generation-models) to leverage our best and newest models.\n"
      id: completions
      legacy: true
      navigationGroup: legacy
      sections:
        - key: createCompletion
          path: create
          type: endpoint
        - key: CreateCompletionResponse
          path: object
          type: object
      title: Completions
  navigationGroups:
    - id: chat
      title: Chat Completions
    - id: endpoints
      title: Platform APIs
    - id: responses
      title: Responses
    - id: vector_stores
      title: Vector stores
    - beta: true
      id: realtime
      title: Realtime
    - id: administration
      title: Administration
    - beta: true
      id: assistants
      title: Assistants
    - id: legacy
      title: Legacy
