{
  "openapi": "3.1.0",
  "info": { "title": "Anthropic API", "version": "44" },
  "paths": {
    "/v1/messages": {
      "post": {
        "tags": ["Messages"],
        "summary": "Create a Message",
        "description": "Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.\n\nThe Messages API can be used for either single queries or stateless multi-turn conversations.\n\nLearn more about the Messages API in our [user guide](/en/docs/initial-setup)",
        "operationId": "messages_post",
        "parameters": [
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          }
        ],
        "responses": {
          "200": {
            "description": "Message object.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/Message" } } }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        },
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateMessageParams" } }
          },
          "required": true
        }
      }
    },
    "/v1/complete": {
      "post": {
        "tags": ["Text Completions"],
        "summary": "Create a Text Completion",
        "description": "[Legacy] Create a Text Completion.\n\nThe Text Completions API is a legacy API. We recommend using the [Messages API](https://docs.anthropic.com/en/api/messages) going forward.\n\nFuture models and features will not be compatible with Text Completions. See our [migration guide](https://docs.anthropic.com/en/api/migrating-from-text-completions-to-messages) for guidance in migrating from Text Completions to Messages.",
        "operationId": "complete_post",
        "parameters": [
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          }
        ],
        "responses": {
          "200": {
            "description": "Text Completion object.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CompletionResponse" } }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        },
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CompletionRequest" } }
          },
          "required": true
        }
      }
    },
    "/v1/models": {
      "get": {
        "summary": "List Models",
        "description": "List available models.\n\nThe Models API response can be used to determine which models are available for use in the API. More recently released models are listed first.",
        "operationId": "models_list",
        "parameters": [
          {
            "name": "before_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id"
            },
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object."
          },
          {
            "name": "after_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id"
            },
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "default": 20,
              "title": "Limit"
            },
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListResponse_ModelInfo_" } }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        }
      }
    },
    "/v1/models/{model_id}": {
      "get": {
        "summary": "Get a Model",
        "description": "Get a specific model.\n\nThe Models API response can be used to determine information about a specific model or resolve a model alias to a model ID.",
        "operationId": "models_get",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "description": "Model identifier or alias.", "title": "Model Id" },
            "description": "Model identifier or alias."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ModelInfo" } } }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        }
      }
    },
    "/v1/messages/batches": {
      "post": {
        "tags": ["Message Batches"],
        "summary": "Create a Message Batch",
        "description": "Send a batch of Message creation requests.\n\nThe Message Batches API can be used to process multiple Messages API requests at once. Once a Message Batch is created, it begins processing immediately. Batches can take up to 24 hours to complete.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_post",
        "parameters": [
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageBatch" } } }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        },
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CreateMessageBatchParams" } }
          },
          "required": true
        }
      },
      "get": {
        "tags": ["Message Batches"],
        "summary": "List Message Batches",
        "description": "List all Message Batches within a Workspace. Most recently created batches are returned first.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_list",
        "parameters": [
          {
            "name": "before_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id"
            },
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object."
          },
          {
            "name": "after_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id"
            },
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "default": 20,
              "title": "Limit"
            },
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/ListResponse_MessageBatch_" } }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        }
      }
    },
    "/v1/messages/batches/{message_batch_id}": {
      "get": {
        "tags": ["Message Batches"],
        "summary": "Retrieve a Message Batch",
        "description": "This endpoint is idempotent and can be used to poll for Message Batch completion. To access the results of a Message Batch, make a request to the `results_url` field in the response.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_retrieve",
        "parameters": [
          {
            "name": "message_batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id"
            },
            "description": "ID of the Message Batch."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageBatch" } } }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        }
      },
      "delete": {
        "tags": ["Message Batches"],
        "summary": "Delete a Message Batch",
        "description": "Delete a Message Batch.\n\nMessage Batches can only be deleted once they've finished processing. If you'd like to delete an in-progress batch, you must first cancel it.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_delete",
        "parameters": [
          {
            "name": "message_batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id"
            },
            "description": "ID of the Message Batch."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/DeleteMessageBatchResponse" } }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        }
      }
    },
    "/v1/messages/batches/{message_batch_id}/cancel": {
      "post": {
        "tags": ["Message Batches"],
        "summary": "Cancel a Message Batch",
        "description": "Batches may be canceled any time before processing ends. Once cancellation is initiated, the batch enters a `canceling` state, at which time the system may complete any in-progress, non-interruptible requests before finalizing cancellation.\n\nThe number of canceled requests is specified in `request_counts`. To determine which requests were canceled, check the individual results within the batch. Note that cancellation may not result in any canceled requests if they were non-interruptible.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_cancel",
        "parameters": [
          {
            "name": "message_batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id"
            },
            "description": "ID of the Message Batch."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/MessageBatch" } } }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        }
      }
    },
    "/v1/messages/batches/{message_batch_id}/results": {
      "get": {
        "tags": ["Message Batches"],
        "summary": "Retrieve Message Batch results",
        "description": "Streams the results of a Message Batch as a `.jsonl` file.\n\nEach line in the file is a JSON object containing the result of a single request in the Message Batch. Results are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "message_batches_results",
        "parameters": [
          {
            "name": "message_batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id"
            },
            "description": "ID of the Message Batch."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/x-jsonl": {
                "schema": { "$ref": "#/components/schemas/MessageBatchIndividualResponse" }
              }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        }
      }
    },
    "/v1/messages/count_tokens": {
      "post": {
        "tags": ["Messages"],
        "summary": "Count tokens in a Message",
        "description": "Count the number of tokens in a Message.\n\nThe Token Count API can be used to count the number of tokens in a Message, including tools, images, and documents, without creating it.\n\nLearn more about token counting in our [user guide](/en/docs/build-with-claude/token-counting)",
        "operationId": "messages_count_tokens_post",
        "parameters": [
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/CountMessageTokensResponse" } }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/ErrorResponse" } } }
          }
        },
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/CountMessageTokensParams" } }
          },
          "required": true
        }
      }
    },
    "/v1/messages?beta=true": {
      "post": {
        "tags": ["Messages"],
        "summary": "Create a Message",
        "description": "Send a structured list of input messages with text and/or image content, and the model will generate the next message in the conversation.\n\nThe Messages API can be used for either single queries or stateless multi-turn conversations.\n\nLearn more about the Messages API in our [user guide](/en/docs/initial-setup)",
        "operationId": "beta_messages_post",
        "parameters": [
          {
            "name": "anthropic-beta",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "items": { "type": "string" },
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "title": "Anthropic-Beta",
              "x-stainless-override-schema": {
                "x-stainless-param": "betas",
                "x-stainless-extend-default": true,
                "type": "array",
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": { "$ref": "#/components/schemas/AnthropicBeta" }
              }
            },
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          }
        ],
        "responses": {
          "200": {
            "description": "Message object.",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BetaMessage" } } }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BetaCreateMessageParams" } }
          },
          "required": true
        }
      }
    },
    "/v1/models?beta=true": {
      "get": {
        "summary": "List Models",
        "description": "List available models.\n\nThe Models API response can be used to determine which models are available for use in the API. More recently released models are listed first.",
        "operationId": "beta_models_list",
        "parameters": [
          {
            "name": "before_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id"
            },
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object."
          },
          {
            "name": "after_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id"
            },
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "default": 20,
              "title": "Limit"
            },
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaListResponse_ModelInfo_" } }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        }
      }
    },
    "/v1/models/{model_id}?beta=true": {
      "get": {
        "summary": "Get a Model",
        "description": "Get a specific model.\n\nThe Models API response can be used to determine information about a specific model or resolve a model alias to a model ID.",
        "operationId": "beta_models_get",
        "parameters": [
          {
            "name": "model_id",
            "in": "path",
            "required": true,
            "schema": { "type": "string", "description": "Model identifier or alias.", "title": "Model Id" },
            "description": "Model identifier or alias."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": { "application/json": { "schema": { "$ref": "#/components/schemas/BetaModelInfo" } } }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        }
      }
    },
    "/v1/messages/batches?beta=true": {
      "post": {
        "tags": ["Message Batches"],
        "summary": "Create a Message Batch",
        "description": "Send a batch of Message creation requests.\n\nThe Message Batches API can be used to process multiple Messages API requests at once. Once a Message Batch is created, it begins processing immediately. Batches can take up to 24 hours to complete.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_post",
        "parameters": [
          {
            "name": "anthropic-beta",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "items": { "type": "string" },
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "title": "Anthropic-Beta",
              "x-stainless-override-schema": {
                "x-stainless-param": "betas",
                "x-stainless-extend-default": true,
                "type": "array",
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": { "$ref": "#/components/schemas/AnthropicBeta" }
              }
            },
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaMessageBatch" } }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BetaCreateMessageBatchParams" } }
          },
          "required": true
        }
      },
      "get": {
        "tags": ["Message Batches"],
        "summary": "List Message Batches",
        "description": "List all Message Batches within a Workspace. Most recently created batches are returned first.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_list",
        "parameters": [
          {
            "name": "before_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object.",
              "title": "Before Id"
            },
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately before this object."
          },
          {
            "name": "after_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object.",
              "title": "After Id"
            },
            "description": "ID of the object to use as a cursor for pagination. When provided, returns the page of results immediately after this object."
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 1000,
              "minimum": 1,
              "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`.",
              "default": 20,
              "title": "Limit"
            },
            "description": "Number of items to return per page.\n\nDefaults to `20`. Ranges from `1` to `1000`."
          },
          {
            "name": "anthropic-beta",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "items": { "type": "string" },
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "title": "Anthropic-Beta",
              "x-stainless-override-schema": {
                "x-stainless-param": "betas",
                "x-stainless-extend-default": true,
                "type": "array",
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": { "$ref": "#/components/schemas/AnthropicBeta" }
              }
            },
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BetaListResponse_MessageBatch_" }
              }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        }
      }
    },
    "/v1/messages/batches/{message_batch_id}?beta=true": {
      "get": {
        "tags": ["Message Batches"],
        "summary": "Retrieve a Message Batch",
        "description": "This endpoint is idempotent and can be used to poll for Message Batch completion. To access the results of a Message Batch, make a request to the `results_url` field in the response.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_retrieve",
        "parameters": [
          {
            "name": "message_batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id"
            },
            "description": "ID of the Message Batch."
          },
          {
            "name": "anthropic-beta",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "items": { "type": "string" },
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "title": "Anthropic-Beta",
              "x-stainless-override-schema": {
                "x-stainless-param": "betas",
                "x-stainless-extend-default": true,
                "type": "array",
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": { "$ref": "#/components/schemas/AnthropicBeta" }
              }
            },
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaMessageBatch" } }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        }
      },
      "delete": {
        "tags": ["Message Batches"],
        "summary": "Delete a Message Batch",
        "description": "Delete a Message Batch.\n\nMessage Batches can only be deleted once they've finished processing. If you'd like to delete an in-progress batch, you must first cancel it.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_delete",
        "parameters": [
          {
            "name": "message_batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id"
            },
            "description": "ID of the Message Batch."
          },
          {
            "name": "anthropic-beta",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "items": { "type": "string" },
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "title": "Anthropic-Beta",
              "x-stainless-override-schema": {
                "x-stainless-param": "betas",
                "x-stainless-extend-default": true,
                "type": "array",
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": { "$ref": "#/components/schemas/AnthropicBeta" }
              }
            },
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BetaDeleteMessageBatchResponse" }
              }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        }
      }
    },
    "/v1/messages/batches/{message_batch_id}/cancel?beta=true": {
      "post": {
        "tags": ["Message Batches"],
        "summary": "Cancel a Message Batch",
        "description": "Batches may be canceled any time before processing ends. Once cancellation is initiated, the batch enters a `canceling` state, at which time the system may complete any in-progress, non-interruptible requests before finalizing cancellation.\n\nThe number of canceled requests is specified in `request_counts`. To determine which requests were canceled, check the individual results within the batch. Note that cancellation may not result in any canceled requests if they were non-interruptible.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_cancel",
        "parameters": [
          {
            "name": "message_batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id"
            },
            "description": "ID of the Message Batch."
          },
          {
            "name": "anthropic-beta",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "items": { "type": "string" },
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "title": "Anthropic-Beta",
              "x-stainless-override-schema": {
                "x-stainless-param": "betas",
                "x-stainless-extend-default": true,
                "type": "array",
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": { "$ref": "#/components/schemas/AnthropicBeta" }
              }
            },
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaMessageBatch" } }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        }
      }
    },
    "/v1/messages/batches/{message_batch_id}/results?beta=true": {
      "get": {
        "tags": ["Message Batches"],
        "summary": "Retrieve Message Batch results",
        "description": "Streams the results of a Message Batch as a `.jsonl` file.\n\nEach line in the file is a JSON object containing the result of a single request in the Message Batch. Results are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.\n\nLearn more about the Message Batches API in our [user guide](/en/docs/build-with-claude/batch-processing)",
        "operationId": "beta_message_batches_results",
        "parameters": [
          {
            "name": "message_batch_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "description": "ID of the Message Batch.",
              "title": "Message Batch Id"
            },
            "description": "ID of the Message Batch."
          },
          {
            "name": "anthropic-beta",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "items": { "type": "string" },
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "title": "Anthropic-Beta",
              "x-stainless-override-schema": {
                "x-stainless-param": "betas",
                "x-stainless-extend-default": true,
                "type": "array",
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": { "$ref": "#/components/schemas/AnthropicBeta" }
              }
            },
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          },
          {
            "name": "x-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace.",
              "title": "X-Api-Key"
            },
            "description": "Your unique API key for authentication.\n\nThis key is required in the header of all API requests, to authenticate your account and access Anthropic's services. Get your API key through the [Console](https://console.anthropic.com/settings/keys). Each key is scoped to a Workspace."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/x-jsonl": {
                "schema": { "$ref": "#/components/schemas/BetaMessageBatchIndividualResponse" }
              }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        }
      }
    },
    "/v1/messages/count_tokens?beta=true": {
      "post": {
        "tags": ["Messages"],
        "summary": "Count tokens in a Message",
        "description": "Count the number of tokens in a Message.\n\nThe Token Count API can be used to count the number of tokens in a Message, including tools, images, and documents, without creating it.\n\nLearn more about token counting in our [user guide](/en/docs/build-with-claude/token-counting)",
        "operationId": "beta_messages_count_tokens_post",
        "parameters": [
          {
            "name": "anthropic-beta",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "items": { "type": "string" },
              "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta.",
              "title": "Anthropic-Beta",
              "x-stainless-override-schema": {
                "x-stainless-param": "betas",
                "x-stainless-extend-default": true,
                "type": "array",
                "description": "Optional header to specify the beta version(s) you want to use.",
                "items": { "$ref": "#/components/schemas/AnthropicBeta" }
              }
            },
            "description": "Optional header to specify the beta version(s) you want to use.\n\nTo use multiple betas, use a comma separated list like `beta1,beta2` or specify the header multiple times for each beta."
          },
          {
            "name": "anthropic-version",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning).",
              "title": "Anthropic-Version"
            },
            "description": "The version of the Anthropic API you want to use.\n\nRead more about versioning and our version history [here](https://docs.anthropic.com/en/api/versioning)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/BetaCountMessageTokensResponse" }
              }
            }
          },
          "4XX": {
            "description": "Error response.\n\nSee our [errors documentation](https://docs.anthropic.com/en/api/errors) for more details.",
            "content": {
              "application/json": { "schema": { "$ref": "#/components/schemas/BetaErrorResponse" } }
            }
          }
        },
        "requestBody": {
          "content": {
            "application/json": { "schema": { "$ref": "#/components/schemas/BetaCountMessageTokensParams" } }
          },
          "required": true
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIError": {
        "properties": {
          "type": {
            "const": "api_error",
            "default": "api_error",
            "enum": ["api_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Internal server error", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "APIError",
        "type": "object"
      },
      "AuthenticationError": {
        "properties": {
          "type": {
            "const": "authentication_error",
            "default": "authentication_error",
            "enum": ["authentication_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Authentication error", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "AuthenticationError",
        "type": "object"
      },
      "Base64ImageSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "base64", "enum": ["base64"], "title": "Type", "type": "string" },
          "media_type": {
            "enum": ["image/jpeg", "image/png", "image/gif", "image/webp"],
            "title": "Media Type",
            "type": "string"
          },
          "data": { "format": "byte", "title": "Data", "type": "string" }
        },
        "required": ["type", "media_type", "data"],
        "title": "Base64ImageSource",
        "type": "object"
      },
      "Base64PDFSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "base64", "enum": ["base64"], "title": "Type", "type": "string" },
          "media_type": {
            "const": "application/pdf",
            "enum": ["application/pdf"],
            "title": "Media Type",
            "type": "string"
          },
          "data": { "format": "byte", "title": "Data", "type": "string" }
        },
        "required": ["type", "media_type", "data"],
        "title": "Base64PDFSource",
        "type": "object"
      },
      "BashTool_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/CacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/CacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "bash_20250124", "enum": ["bash_20250124"], "title": "Type", "type": "string" },
          "name": {
            "const": "bash",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "enum": ["bash"],
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["type", "name"],
        "title": "BashTool_20250124",
        "type": "object"
      },
      "BetaAPIError": {
        "properties": {
          "type": {
            "const": "api_error",
            "default": "api_error",
            "enum": ["api_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Internal server error", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "APIError",
        "type": "object"
      },
      "BetaAuthenticationError": {
        "properties": {
          "type": {
            "const": "authentication_error",
            "default": "authentication_error",
            "enum": ["authentication_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Authentication error", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "AuthenticationError",
        "type": "object"
      },
      "BetaBase64ImageSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "base64", "enum": ["base64"], "title": "Type", "type": "string" },
          "media_type": {
            "enum": ["image/jpeg", "image/png", "image/gif", "image/webp"],
            "title": "Media Type",
            "type": "string"
          },
          "data": { "format": "byte", "title": "Data", "type": "string" }
        },
        "required": ["type", "media_type", "data"],
        "title": "Base64ImageSource",
        "type": "object"
      },
      "BetaBase64PDFSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "base64", "enum": ["base64"], "title": "Type", "type": "string" },
          "media_type": {
            "const": "application/pdf",
            "enum": ["application/pdf"],
            "title": "Media Type",
            "type": "string"
          },
          "data": { "format": "byte", "title": "Data", "type": "string" }
        },
        "required": ["type", "media_type", "data"],
        "title": "Base64PDFSource",
        "type": "object"
      },
      "BetaBashTool_20241022": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "bash_20241022", "enum": ["bash_20241022"], "title": "Type", "type": "string" },
          "name": {
            "const": "bash",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "enum": ["bash"],
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["type", "name"],
        "title": "BashTool_20241022",
        "type": "object"
      },
      "BetaBashTool_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "bash_20250124", "enum": ["bash_20250124"], "title": "Type", "type": "string" },
          "name": {
            "const": "bash",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "enum": ["bash"],
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["type", "name"],
        "title": "BashTool_20250124",
        "type": "object"
      },
      "BetaBillingError": {
        "properties": {
          "type": {
            "const": "billing_error",
            "default": "billing_error",
            "enum": ["billing_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Billing error", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "BillingError",
        "type": "object"
      },
      "BetaCacheControlEphemeral": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "ephemeral", "enum": ["ephemeral"], "title": "Type", "type": "string" }
        },
        "required": ["type"],
        "title": "CacheControlEphemeral",
        "type": "object"
      },
      "BetaCanceledResult": {
        "properties": {
          "type": {
            "const": "canceled",
            "default": "canceled",
            "enum": ["canceled"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "CanceledResult",
        "type": "object"
      },
      "BetaCitationsDelta": {
        "properties": {
          "type": {
            "const": "citations_delta",
            "default": "citations_delta",
            "enum": ["citations_delta"],
            "title": "Type",
            "type": "string"
          },
          "citation": {
            "discriminator": {
              "mapping": {
                "char_location": "#/components/schemas/BetaResponseCharLocationCitation",
                "content_block_location": "#/components/schemas/BetaResponseContentBlockLocationCitation",
                "page_location": "#/components/schemas/BetaResponsePageLocationCitation"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/BetaResponseCharLocationCitation" },
              { "$ref": "#/components/schemas/BetaResponsePageLocationCitation" },
              { "$ref": "#/components/schemas/BetaResponseContentBlockLocationCitation" }
            ],
            "title": "Citation"
          }
        },
        "required": ["type", "citation"],
        "title": "CitationsDelta",
        "type": "object"
      },
      "BetaComputerUseTool_20241022": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": {
            "const": "computer_20241022",
            "enum": ["computer_20241022"],
            "title": "Type",
            "type": "string"
          },
          "name": {
            "const": "computer",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "enum": ["computer"],
            "title": "Name",
            "type": "string"
          },
          "display_height_px": {
            "description": "The height of the display in pixels.",
            "minimum": 1,
            "title": "Display Height Px",
            "type": "integer"
          },
          "display_width_px": {
            "description": "The width of the display in pixels.",
            "minimum": 1,
            "title": "Display Width Px",
            "type": "integer"
          },
          "display_number": {
            "anyOf": [{ "minimum": 0, "type": "integer" }, { "type": "null" }],
            "description": "The X11 display number (e.g. 0, 1) for the display.",
            "title": "Display Number"
          }
        },
        "required": ["type", "name", "display_height_px", "display_width_px"],
        "title": "ComputerUseTool_20241022",
        "type": "object"
      },
      "BetaComputerUseTool_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": {
            "const": "computer_20250124",
            "enum": ["computer_20250124"],
            "title": "Type",
            "type": "string"
          },
          "name": {
            "const": "computer",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "enum": ["computer"],
            "title": "Name",
            "type": "string"
          },
          "display_height_px": {
            "description": "The height of the display in pixels.",
            "minimum": 1,
            "title": "Display Height Px",
            "type": "integer"
          },
          "display_width_px": {
            "description": "The width of the display in pixels.",
            "minimum": 1,
            "title": "Display Width Px",
            "type": "integer"
          },
          "display_number": {
            "anyOf": [{ "minimum": 0, "type": "integer" }, { "type": "null" }],
            "description": "The X11 display number (e.g. 0, 1) for the display.",
            "title": "Display Number"
          }
        },
        "required": ["type", "name", "display_height_px", "display_width_px"],
        "title": "ComputerUseTool_20250124",
        "type": "object"
      },
      "BetaContentBlockDeltaEvent": {
        "properties": {
          "type": {
            "const": "content_block_delta",
            "default": "content_block_delta",
            "enum": ["content_block_delta"],
            "title": "Type",
            "type": "string"
          },
          "index": { "title": "Index", "type": "integer" },
          "delta": {
            "discriminator": {
              "mapping": {
                "citations_delta": "#/components/schemas/BetaCitationsDelta",
                "input_json_delta": "#/components/schemas/BetaInputJsonContentBlockDelta",
                "signature_delta": "#/components/schemas/BetaSignatureContentBlockDelta",
                "text_delta": "#/components/schemas/BetaTextContentBlockDelta",
                "thinking_delta": "#/components/schemas/BetaThinkingContentBlockDelta"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/BetaTextContentBlockDelta" },
              { "$ref": "#/components/schemas/BetaInputJsonContentBlockDelta" },
              { "$ref": "#/components/schemas/BetaCitationsDelta" },
              { "$ref": "#/components/schemas/BetaThinkingContentBlockDelta" },
              { "$ref": "#/components/schemas/BetaSignatureContentBlockDelta" }
            ],
            "title": "Delta"
          }
        },
        "required": ["type", "index", "delta"],
        "title": "ContentBlockDeltaEvent",
        "type": "object"
      },
      "BetaContentBlockSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "content", "enum": ["content"], "title": "Type", "type": "string" },
          "content": {
            "anyOf": [
              { "type": "string" },
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "image": "#/components/schemas/BetaRequestImageBlock",
                      "text": "#/components/schemas/BetaRequestTextBlock"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    { "$ref": "#/components/schemas/BetaRequestTextBlock" },
                    { "$ref": "#/components/schemas/BetaRequestImageBlock" }
                  ],
                  "title": "beta_content_block_source_content_item"
                },
                "type": "array",
                "title": "beta_content_block_source_content"
              }
            ],
            "title": "Content"
          }
        },
        "required": ["type", "content"],
        "title": "ContentBlockSource",
        "type": "object"
      },
      "BetaContentBlockStartEvent": {
        "properties": {
          "type": {
            "const": "content_block_start",
            "default": "content_block_start",
            "enum": ["content_block_start"],
            "title": "Type",
            "type": "string"
          },
          "index": { "title": "Index", "type": "integer" },
          "content_block": {
            "discriminator": {
              "mapping": {
                "redacted_thinking": "#/components/schemas/BetaResponseRedactedThinkingBlock",
                "text": "#/components/schemas/BetaResponseTextBlock",
                "thinking": "#/components/schemas/BetaResponseThinkingBlock",
                "tool_use": "#/components/schemas/BetaResponseToolUseBlock"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/BetaResponseTextBlock" },
              { "$ref": "#/components/schemas/BetaResponseToolUseBlock" },
              { "$ref": "#/components/schemas/BetaResponseThinkingBlock" },
              { "$ref": "#/components/schemas/BetaResponseRedactedThinkingBlock" }
            ],
            "title": "Content Block"
          }
        },
        "required": ["type", "index", "content_block"],
        "title": "ContentBlockStartEvent",
        "type": "object"
      },
      "BetaContentBlockStopEvent": {
        "properties": {
          "type": {
            "const": "content_block_stop",
            "default": "content_block_stop",
            "enum": ["content_block_stop"],
            "title": "Type",
            "type": "string"
          },
          "index": { "title": "Index", "type": "integer" }
        },
        "required": ["type", "index"],
        "title": "ContentBlockStopEvent",
        "type": "object"
      },
      "BetaCountMessageTokensParams": {
        "additionalProperties": false,
        "examples": [
          {
            "messages": [{ "content": "Hello, world", "role": "user" }],
            "model": "claude-3-7-sonnet-20250219"
          }
        ],
        "properties": {
          "tool_choice": { "$ref": "#/components/schemas/BetaToolChoice" },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/BetaTool" },
                { "$ref": "#/components/schemas/BetaComputerUseTool_20241022" },
                { "$ref": "#/components/schemas/BetaBashTool_20241022" },
                { "$ref": "#/components/schemas/BetaTextEditor_20241022" },
                { "$ref": "#/components/schemas/BetaComputerUseTool_20250124" },
                { "$ref": "#/components/schemas/BetaBashTool_20250124" },
                { "$ref": "#/components/schemas/BetaTextEditor_20250124" }
              ]
            },
            "title": "Tools",
            "type": "array"
          },
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.",
            "items": { "$ref": "#/components/schemas/BetaInputMessage" },
            "title": "Messages",
            "type": "array"
          },
          "system": {
            "anyOf": [
              { "type": "string" },
              { "items": { "$ref": "#/components/schemas/BetaRequestTextBlock" }, "type": "array" }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [{ "text": "Today's date is 2024-06-01.", "type": "text" }],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "thinking": { "$ref": "#/components/schemas/BetaThinkingConfigParam" },
          "model": { "$ref": "#/components/schemas/Model" }
        },
        "required": ["messages", "model"],
        "title": "CountMessageTokensParams",
        "type": "object"
      },
      "BetaCountMessageTokensResponse": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "title": "Input Tokens",
            "description": "The total number of tokens across the provided list of messages, system prompt, and tools.",
            "examples": [2095]
          }
        },
        "type": "object",
        "required": ["input_tokens"],
        "title": "CountMessageTokensResponse",
        "examples": [{ "input_tokens": 2095 }]
      },
      "BetaCreateMessageBatchParams": {
        "additionalProperties": false,
        "properties": {
          "requests": {
            "description": "List of requests for prompt completion. Each is an individual request to create a Message.",
            "items": { "$ref": "#/components/schemas/BetaMessageBatchIndividualRequestParams" },
            "maxItems": 10000,
            "minItems": 1,
            "title": "Requests",
            "type": "array"
          }
        },
        "required": ["requests"],
        "title": "CreateMessageBatchParams",
        "type": "object"
      },
      "BetaCreateMessageParams": {
        "additionalProperties": false,
        "example": {
          "max_tokens": 1024,
          "messages": [{ "content": "Hello, world", "role": "user" }],
          "model": "claude-3-7-sonnet-20250219"
        },
        "properties": {
          "model": { "$ref": "#/components/schemas/Model" },
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.",
            "items": { "$ref": "#/components/schemas/BetaInputMessage" },
            "title": "Messages",
            "type": "array"
          },
          "max_tokens": {
            "description": "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter.  See [models](https://docs.anthropic.com/en/docs/models-overview) for details.",
            "examples": [1024],
            "minimum": 1,
            "title": "Max Tokens",
            "type": "integer"
          },
          "metadata": {
            "allOf": [{ "$ref": "#/components/schemas/BetaMetadata" }],
            "description": "An object describing metadata about the request."
          },
          "stop_sequences": {
            "description": "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn, which will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of text, you can use the `stop_sequences` parameter. If the model encounters one of the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"` and the response `stop_sequence` value will contain the matched stop sequence.",
            "items": { "type": "string" },
            "title": "Stop Sequences",
            "type": "array"
          },
          "stream": {
            "description": "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/messages-streaming) for details.",
            "title": "Stream",
            "type": "boolean"
          },
          "system": {
            "anyOf": [
              { "type": "string", "x-stainless-skip": ["go", "cli"] },
              { "items": { "$ref": "#/components/schemas/BetaRequestTextBlock" }, "type": "array" }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [{ "text": "Today's date is 2024-06-01.", "type": "text" }],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "temperature": {
            "description": "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.",
            "examples": [1],
            "maximum": 1,
            "minimum": 0,
            "title": "Temperature",
            "type": "number"
          },
          "thinking": { "$ref": "#/components/schemas/BetaThinkingConfigParam" },
          "tool_choice": { "$ref": "#/components/schemas/BetaToolChoice" },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/BetaTool" },
                { "$ref": "#/components/schemas/BetaComputerUseTool_20241022" },
                { "$ref": "#/components/schemas/BetaBashTool_20241022" },
                { "$ref": "#/components/schemas/BetaTextEditor_20241022" },
                { "$ref": "#/components/schemas/BetaComputerUseTool_20250124" },
                { "$ref": "#/components/schemas/BetaBashTool_20250124" },
                { "$ref": "#/components/schemas/BetaTextEditor_20250124" }
              ]
            },
            "title": "Tools",
            "type": "array"
          },
          "top_k": {
            "description": "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [5],
            "minimum": 0,
            "title": "Top K",
            "type": "integer"
          },
          "top_p": {
            "description": "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [0.7],
            "maximum": 1,
            "minimum": 0,
            "title": "Top P",
            "type": "number"
          }
        },
        "required": ["model", "messages", "max_tokens"],
        "title": "CreateMessageParams",
        "type": "object"
      },
      "BetaDeleteMessageBatchResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "ID of the Message Batch.",
            "examples": ["msgbatch_013Zva2CMHLNnXjNJJKqJ2EF"]
          },
          "type": {
            "type": "string",
            "enum": ["message_batch_deleted"],
            "const": "message_batch_deleted",
            "title": "Type",
            "description": "Deleted object type.\n\nFor Message Batches, this is always `\"message_batch_deleted\"`.",
            "default": "message_batch_deleted"
          }
        },
        "type": "object",
        "required": ["id", "type"],
        "title": "DeleteMessageBatchResponse"
      },
      "BetaErrorResponse": {
        "properties": {
          "type": {
            "const": "error",
            "default": "error",
            "enum": ["error"],
            "title": "Type",
            "type": "string"
          },
          "error": {
            "discriminator": {
              "mapping": {
                "api_error": "#/components/schemas/BetaAPIError",
                "authentication_error": "#/components/schemas/BetaAuthenticationError",
                "billing_error": "#/components/schemas/BetaBillingError",
                "invalid_request_error": "#/components/schemas/BetaInvalidRequestError",
                "not_found_error": "#/components/schemas/BetaNotFoundError",
                "overloaded_error": "#/components/schemas/BetaOverloadedError",
                "permission_error": "#/components/schemas/BetaPermissionError",
                "rate_limit_error": "#/components/schemas/BetaRateLimitError",
                "timeout_error": "#/components/schemas/BetaGatewayTimeoutError"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/BetaInvalidRequestError" },
              { "$ref": "#/components/schemas/BetaAuthenticationError" },
              { "$ref": "#/components/schemas/BetaBillingError" },
              { "$ref": "#/components/schemas/BetaPermissionError" },
              { "$ref": "#/components/schemas/BetaNotFoundError" },
              { "$ref": "#/components/schemas/BetaRateLimitError" },
              { "$ref": "#/components/schemas/BetaGatewayTimeoutError" },
              { "$ref": "#/components/schemas/BetaAPIError" },
              { "$ref": "#/components/schemas/BetaOverloadedError" }
            ],
            "title": "Error"
          }
        },
        "required": ["type", "error"],
        "title": "ErrorResponse",
        "type": "object"
      },
      "BetaErroredResult": {
        "properties": {
          "type": {
            "const": "errored",
            "default": "errored",
            "enum": ["errored"],
            "title": "Type",
            "type": "string"
          },
          "error": { "$ref": "#/components/schemas/BetaErrorResponse" }
        },
        "required": ["type", "error"],
        "title": "ErroredResult",
        "type": "object"
      },
      "BetaExpiredResult": {
        "properties": {
          "type": {
            "const": "expired",
            "default": "expired",
            "enum": ["expired"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ExpiredResult",
        "type": "object"
      },
      "BetaGatewayTimeoutError": {
        "properties": {
          "type": {
            "const": "timeout_error",
            "default": "timeout_error",
            "enum": ["timeout_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Request timeout", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "GatewayTimeoutError",
        "type": "object"
      },
      "BetaInputJsonContentBlockDelta": {
        "properties": {
          "type": {
            "const": "input_json_delta",
            "default": "input_json_delta",
            "enum": ["input_json_delta"],
            "title": "Type",
            "type": "string"
          },
          "partial_json": { "title": "Partial Json", "type": "string" }
        },
        "required": ["type", "partial_json"],
        "title": "InputJsonContentBlockDelta",
        "type": "object"
      },
      "BetaInputMessage": {
        "additionalProperties": false,
        "properties": {
          "role": { "enum": ["user", "assistant"], "title": "Role", "type": "string" },
          "content": {
            "anyOf": [
              { "type": "string", "x-stainless-skip": ["go", "cli"] },
              {
                "items": { "$ref": "#/components/schemas/BetaInputContentBlock" },
                "type": "array",
                "example": [{ "type": "text", "text": "What is a quaternion?" }]
              }
            ],
            "title": "Content"
          }
        },
        "required": ["role", "content"],
        "title": "InputMessage",
        "type": "object",
        "discriminator": { "propertyName": "role" }
      },
      "BetaInputSchema": {
        "additionalProperties": true,
        "properties": {
          "type": { "const": "object", "enum": ["object"], "title": "Type", "type": "string" },
          "properties": { "anyOf": [{ "type": "object" }, { "type": "null" }], "title": "Properties" }
        },
        "required": ["type"],
        "title": "InputSchema",
        "type": "object"
      },
      "BetaInvalidRequestError": {
        "properties": {
          "type": {
            "const": "invalid_request_error",
            "default": "invalid_request_error",
            "enum": ["invalid_request_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Invalid request", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "InvalidRequestError",
        "type": "object"
      },
      "BetaListResponse_MessageBatch_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/BetaMessageBatch" },
            "type": "array",
            "title": "Data"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Indicates if there are more results in the requested page direction."
          },
          "first_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Id",
            "description": "First ID in the `data` list. Can be used as the `before_id` for the previous page."
          },
          "last_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Id",
            "description": "Last ID in the `data` list. Can be used as the `after_id` for the next page."
          }
        },
        "type": "object",
        "required": ["data", "has_more", "first_id", "last_id"],
        "title": "ListResponse[MessageBatch]"
      },
      "BetaListResponse_ModelInfo_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/BetaModelInfo" },
            "type": "array",
            "title": "Data"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Indicates if there are more results in the requested page direction."
          },
          "first_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Id",
            "description": "First ID in the `data` list. Can be used as the `before_id` for the previous page."
          },
          "last_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Id",
            "description": "Last ID in the `data` list. Can be used as the `after_id` for the next page."
          }
        },
        "type": "object",
        "required": ["data", "has_more", "first_id", "last_id"],
        "title": "ListResponse[ModelInfo]"
      },
      "BetaMessage": {
        "examples": [
          {
            "content": [{ "text": "Hi! My name is Claude.", "type": "text" }],
            "id": "msg_013Zva2CMHLNnXjNJJKqJ2EF",
            "model": "claude-3-7-sonnet-20250219",
            "role": "assistant",
            "stop_reason": "end_turn",
            "stop_sequence": null,
            "type": "message",
            "usage": { "input_tokens": 2095, "output_tokens": 503 }
          }
        ],
        "properties": {
          "id": {
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "examples": ["msg_013Zva2CMHLNnXjNJJKqJ2EF"],
            "title": "Id",
            "type": "string"
          },
          "type": {
            "const": "message",
            "default": "message",
            "description": "Object type.\n\nFor Messages, this is always `\"message\"`.",
            "enum": ["message"],
            "title": "Type",
            "type": "string"
          },
          "role": {
            "const": "assistant",
            "default": "assistant",
            "description": "Conversational role of the generated message.\n\nThis will always be `\"assistant\"`.",
            "enum": ["assistant"],
            "title": "Role",
            "type": "string"
          },
          "content": {
            "description": "Content generated by the model.\n\nThis is an array of content blocks, each of which has a `type` that determines its shape.\n\nExample:\n\n```json\n[{\"type\": \"text\", \"text\": \"Hi, I'm Claude.\"}]\n```\n\nIf the request input `messages` ended with an `assistant` turn, then the response `content` will continue directly from that last turn. You can use this to constrain the model's output.\n\nFor example, if the input `messages` were:\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"}\n]\n```\n\nThen the response `content` might be:\n\n```json\n[{\"type\": \"text\", \"text\": \"B)\"}]\n```",
            "examples": [[{ "text": "Hi! My name is Claude.", "type": "text" }]],
            "items": { "$ref": "#/components/schemas/BetaContentBlock" },
            "title": "Content",
            "type": "array"
          },
          "model": { "$ref": "#/components/schemas/Model" },
          "stop_reason": {
            "anyOf": [
              { "enum": ["end_turn", "max_tokens", "stop_sequence", "tool_use"], "type": "string" },
              { "type": "null" }
            ],
            "description": "The reason that we stopped.\n\nThis may be one the following values:\n* `\"end_turn\"`: the model reached a natural stopping point\n* `\"max_tokens\"`: we exceeded the requested `max_tokens` or the model's maximum\n* `\"stop_sequence\"`: one of your provided custom `stop_sequences` was generated\n* `\"tool_use\"`: the model invoked one or more tools\n\nIn non-streaming mode this value is always non-null. In streaming mode, it is null in the `message_start` event and non-null otherwise.",
            "title": "Stop Reason"
          },
          "stop_sequence": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "default": null,
            "description": "Which custom stop sequence was generated, if any.\n\nThis value will be a non-null string if one of your custom stop sequences was generated.",
            "title": "Stop Sequence"
          },
          "usage": {
            "allOf": [{ "$ref": "#/components/schemas/BetaUsage" }],
            "description": "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`.",
            "examples": [{ "input_tokens": 2095, "output_tokens": 503 }]
          }
        },
        "required": ["id", "type", "role", "content", "model", "stop_reason", "stop_sequence", "usage"],
        "title": "Message",
        "type": "object",
        "x-stainless-python-custom-imports": [
          "from .beta_content_block import BetaContentBlock as BetaContentBlock"
        ]
      },
      "BetaMessageBatch": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "examples": ["msgbatch_013Zva2CMHLNnXjNJJKqJ2EF"]
          },
          "type": {
            "type": "string",
            "enum": ["message_batch"],
            "const": "message_batch",
            "title": "Type",
            "description": "Object type.\n\nFor Message Batches, this is always `\"message_batch\"`.",
            "default": "message_batch"
          },
          "processing_status": {
            "type": "string",
            "enum": ["in_progress", "canceling", "ended"],
            "title": "Processing Status",
            "description": "Processing status of the Message Batch."
          },
          "request_counts": {
            "allOf": [{ "$ref": "#/components/schemas/BetaRequestCounts" }],
            "description": "Tallies requests within the Message Batch, categorized by their status.\n\nRequests start as `processing` and move to one of the other statuses only once processing of the entire batch ends. The sum of all values always matches the total number of requests in the batch."
          },
          "ended_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Ended At",
            "description": "RFC 3339 datetime string representing the time at which processing for the Message Batch ended. Specified only once processing ends.\n\nProcessing ends when every request in a Message Batch has either succeeded, errored, canceled, or expired.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "RFC 3339 datetime string representing the time at which the Message Batch was created.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "RFC 3339 datetime string representing the time at which the Message Batch will expire and end processing, which is 24 hours after creation.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "archived_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Archived At",
            "description": "RFC 3339 datetime string representing the time at which the Message Batch was archived and its results became unavailable.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "cancel_initiated_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Cancel Initiated At",
            "description": "RFC 3339 datetime string representing the time at which cancellation was initiated for the Message Batch. Specified only if cancellation was initiated.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "results_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Results Url",
            "description": "URL to a `.jsonl` file containing the results of the Message Batch requests. Specified only once processing ends.\n\nResults in the file are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.",
            "examples": [
              "https://api.anthropic.com/v1/messages/batches/msgbatch_013Zva2CMHLNnXjNJJKqJ2EF/results"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "processing_status",
          "request_counts",
          "ended_at",
          "created_at",
          "expires_at",
          "archived_at",
          "cancel_initiated_at",
          "results_url"
        ],
        "title": "MessageBatch"
      },
      "BetaMessageBatchIndividualRequestParams": {
        "additionalProperties": false,
        "properties": {
          "custom_id": {
            "description": "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch.",
            "examples": ["my-custom-id-1"],
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,64}$",
            "title": "Custom Id",
            "type": "string"
          },
          "params": {
            "allOf": [{ "$ref": "#/components/schemas/BetaCreateMessageParams" }],
            "description": "Messages API creation parameters for the individual request. \n\nSee the [Messages API reference](/en/api/messages) for full documentation on available parameters."
          }
        },
        "required": ["custom_id", "params"],
        "title": "MessageBatchIndividualRequestParams",
        "type": "object"
      },
      "BetaMessageBatchIndividualResponse": {
        "description": "This is a single line in the response `.jsonl` file and does not represent the response as a whole.",
        "properties": {
          "custom_id": {
            "description": "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch.",
            "examples": ["my-custom-id-1"],
            "title": "Custom Id",
            "type": "string"
          },
          "result": {
            "description": "Processing result for this request.\n\nContains a Message output if processing was successful, an error response if processing failed, or the reason why processing was not attempted, such as cancellation or expiration.",
            "discriminator": {
              "mapping": {
                "canceled": "#/components/schemas/BetaCanceledResult",
                "errored": "#/components/schemas/BetaErroredResult",
                "expired": "#/components/schemas/BetaExpiredResult",
                "succeeded": "#/components/schemas/BetaSucceededResult"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/BetaSucceededResult" },
              { "$ref": "#/components/schemas/BetaErroredResult" },
              { "$ref": "#/components/schemas/BetaCanceledResult" },
              { "$ref": "#/components/schemas/BetaExpiredResult" }
            ],
            "title": "Result"
          }
        },
        "required": ["custom_id", "result"],
        "title": "MessageBatchIndividualResponse",
        "type": "object"
      },
      "BetaMessageDelta": {
        "properties": {
          "stop_reason": {
            "anyOf": [
              { "enum": ["end_turn", "max_tokens", "stop_sequence", "tool_use"], "type": "string" },
              { "type": "null" }
            ],
            "default": null,
            "title": "Stop Reason"
          },
          "stop_sequence": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "default": null,
            "title": "Stop Sequence"
          }
        },
        "required": ["stop_reason", "stop_sequence"],
        "title": "MessageDelta",
        "type": "object"
      },
      "BetaMessageDeltaEvent": {
        "properties": {
          "type": {
            "const": "message_delta",
            "default": "message_delta",
            "enum": ["message_delta"],
            "title": "Type",
            "type": "string"
          },
          "delta": { "$ref": "#/components/schemas/BetaMessageDelta" },
          "usage": {
            "allOf": [{ "$ref": "#/components/schemas/BetaMessageDeltaUsage" }],
            "description": "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`.",
            "examples": [{ "output_tokens": 503 }]
          }
        },
        "required": ["type", "delta", "usage"],
        "title": "MessageDeltaEvent",
        "type": "object"
      },
      "BetaMessageDeltaUsage": {
        "properties": {
          "output_tokens": {
            "description": "The cumulative number of output tokens which were used.",
            "examples": [503],
            "title": "Output Tokens",
            "type": "integer"
          }
        },
        "required": ["output_tokens"],
        "title": "MessageDeltaUsage",
        "type": "object"
      },
      "BetaMessageStartEvent": {
        "properties": {
          "type": {
            "const": "message_start",
            "default": "message_start",
            "enum": ["message_start"],
            "title": "Type",
            "type": "string"
          },
          "message": { "$ref": "#/components/schemas/BetaMessage" }
        },
        "required": ["type", "message"],
        "title": "MessageStartEvent",
        "type": "object"
      },
      "BetaMessageStopEvent": {
        "properties": {
          "type": {
            "const": "message_stop",
            "default": "message_stop",
            "enum": ["message_stop"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "MessageStopEvent",
        "type": "object"
      },
      "BetaMessageStreamEvent": {
        "discriminator": {
          "mapping": {
            "content_block_delta": "#/components/schemas/BetaContentBlockDeltaEvent",
            "content_block_start": "#/components/schemas/BetaContentBlockStartEvent",
            "content_block_stop": "#/components/schemas/BetaContentBlockStopEvent",
            "message_delta": "#/components/schemas/BetaMessageDeltaEvent",
            "message_start": "#/components/schemas/BetaMessageStartEvent",
            "message_stop": "#/components/schemas/BetaMessageStopEvent"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/BetaMessageStartEvent" },
          { "$ref": "#/components/schemas/BetaMessageDeltaEvent" },
          { "$ref": "#/components/schemas/BetaMessageStopEvent" },
          { "$ref": "#/components/schemas/BetaContentBlockStartEvent" },
          { "$ref": "#/components/schemas/BetaContentBlockDeltaEvent" },
          { "$ref": "#/components/schemas/BetaContentBlockStopEvent" }
        ],
        "title": "MessageStreamEvent"
      },
      "BetaMetadata": {
        "additionalProperties": false,
        "properties": {
          "user_id": {
            "anyOf": [{ "maxLength": 256, "type": "string" }, { "type": "null" }],
            "description": "An external identifier for the user who is associated with the request.\n\nThis should be a uuid, hash value, or other opaque identifier. Anthropic may use this id to help detect abuse. Do not include any identifying information such as name, email address, or phone number.",
            "examples": ["13803d75-b4b5-4c3e-b2a2-6f21399b021b"],
            "title": "User Id"
          }
        },
        "title": "Metadata",
        "type": "object"
      },
      "BetaModelInfo": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["model"],
            "const": "model",
            "title": "Type",
            "description": "Object type.\n\nFor Models, this is always `\"model\"`.",
            "default": "model"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique model identifier.",
            "examples": ["claude-3-7-sonnet-20250219"]
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "A human-readable name for the model.",
            "examples": ["Claude 3.7 Sonnet"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "RFC 3339 datetime string representing the time at which the model was released. May be set to an epoch value if the release date is unknown.",
            "examples": ["2025-02-19T00:00:00Z"]
          }
        },
        "type": "object",
        "required": ["type", "id", "display_name", "created_at"],
        "title": "ModelInfo"
      },
      "BetaNotFoundError": {
        "properties": {
          "type": {
            "const": "not_found_error",
            "default": "not_found_error",
            "enum": ["not_found_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Not found", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "NotFoundError",
        "type": "object"
      },
      "BetaOverloadedError": {
        "properties": {
          "type": {
            "const": "overloaded_error",
            "default": "overloaded_error",
            "enum": ["overloaded_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Overloaded", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "OverloadedError",
        "type": "object"
      },
      "BetaPermissionError": {
        "properties": {
          "type": {
            "const": "permission_error",
            "default": "permission_error",
            "enum": ["permission_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Permission denied", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "PermissionError",
        "type": "object"
      },
      "BetaPlainTextSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "text", "enum": ["text"], "title": "Type", "type": "string" },
          "media_type": {
            "const": "text/plain",
            "enum": ["text/plain"],
            "title": "Media Type",
            "type": "string"
          },
          "data": { "title": "Data", "type": "string" }
        },
        "required": ["type", "media_type", "data"],
        "title": "PlainTextSource",
        "type": "object"
      },
      "BetaRateLimitError": {
        "properties": {
          "type": {
            "const": "rate_limit_error",
            "default": "rate_limit_error",
            "enum": ["rate_limit_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Rate limited", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "RateLimitError",
        "type": "object"
      },
      "BetaRequestCharLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "char_location", "enum": ["char_location"], "title": "Type", "type": "string" },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "maxLength": 255, "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_char_index": { "minimum": 0, "title": "Start Char Index", "type": "integer" },
          "end_char_index": { "title": "End Char Index", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_char_index",
          "end_char_index"
        ],
        "title": "RequestCharLocationCitation",
        "type": "object"
      },
      "BetaRequestCitationsConfig": {
        "additionalProperties": false,
        "properties": { "enabled": { "title": "Enabled", "type": "boolean" } },
        "title": "RequestCitationsConfig",
        "type": "object"
      },
      "BetaRequestContentBlockLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "content_block_location",
            "enum": ["content_block_location"],
            "title": "Type",
            "type": "string"
          },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "maxLength": 255, "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_block_index": { "minimum": 0, "title": "Start Block Index", "type": "integer" },
          "end_block_index": { "title": "End Block Index", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_block_index",
          "end_block_index"
        ],
        "title": "RequestContentBlockLocationCitation",
        "type": "object"
      },
      "BetaRequestCounts": {
        "properties": {
          "processing": {
            "type": "integer",
            "title": "Processing",
            "description": "Number of requests in the Message Batch that are processing.",
            "default": 0,
            "examples": [100]
          },
          "succeeded": {
            "type": "integer",
            "title": "Succeeded",
            "description": "Number of requests in the Message Batch that have completed successfully.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "default": 0,
            "examples": [50]
          },
          "errored": {
            "type": "integer",
            "title": "Errored",
            "description": "Number of requests in the Message Batch that encountered an error.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "default": 0,
            "examples": [30]
          },
          "canceled": {
            "type": "integer",
            "title": "Canceled",
            "description": "Number of requests in the Message Batch that have been canceled.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "default": 0,
            "examples": [10]
          },
          "expired": {
            "type": "integer",
            "title": "Expired",
            "description": "Number of requests in the Message Batch that have expired.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "default": 0,
            "examples": [10]
          }
        },
        "type": "object",
        "required": ["processing", "succeeded", "errored", "canceled", "expired"],
        "title": "RequestCounts"
      },
      "BetaRequestDocumentBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "document", "enum": ["document"], "title": "Type", "type": "string" },
          "source": {
            "discriminator": {
              "mapping": {
                "base64": "#/components/schemas/BetaBase64PDFSource",
                "content": "#/components/schemas/BetaContentBlockSource",
                "text": "#/components/schemas/BetaPlainTextSource",
                "url": "#/components/schemas/BetaURLPDFSource"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/BetaBase64PDFSource" },
              { "$ref": "#/components/schemas/BetaPlainTextSource" },
              { "$ref": "#/components/schemas/BetaContentBlockSource" },
              { "$ref": "#/components/schemas/BetaURLPDFSource" }
            ],
            "title": "Source"
          },
          "title": {
            "anyOf": [{ "maxLength": 500, "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "context": {
            "anyOf": [{ "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Context"
          },
          "citations": { "$ref": "#/components/schemas/BetaRequestCitationsConfig" }
        },
        "required": ["type", "source"],
        "title": "RequestDocumentBlock",
        "type": "object"
      },
      "BetaRequestImageBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "image", "enum": ["image"], "title": "Type", "type": "string" },
          "source": {
            "discriminator": {
              "mapping": {
                "base64": "#/components/schemas/BetaBase64ImageSource",
                "url": "#/components/schemas/BetaURLImageSource"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/BetaBase64ImageSource" },
              { "$ref": "#/components/schemas/BetaURLImageSource" }
            ],
            "title": "Source"
          }
        },
        "required": ["type", "source"],
        "title": "RequestImageBlock",
        "type": "object"
      },
      "BetaRequestPageLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "page_location", "enum": ["page_location"], "title": "Type", "type": "string" },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "maxLength": 255, "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_page_number": { "minimum": 1, "title": "Start Page Number", "type": "integer" },
          "end_page_number": { "title": "End Page Number", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_page_number",
          "end_page_number"
        ],
        "title": "RequestPageLocationCitation",
        "type": "object"
      },
      "BetaRequestRedactedThinkingBlock": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "redacted_thinking",
            "enum": ["redacted_thinking"],
            "title": "Type",
            "type": "string"
          },
          "data": { "title": "Data", "type": "string" }
        },
        "required": ["type", "data"],
        "title": "RequestRedactedThinkingBlock",
        "type": "object"
      },
      "BetaRequestTextBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "citations": {
            "anyOf": [
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "char_location": "#/components/schemas/BetaRequestCharLocationCitation",
                      "content_block_location": "#/components/schemas/BetaRequestContentBlockLocationCitation",
                      "page_location": "#/components/schemas/BetaRequestPageLocationCitation"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    { "$ref": "#/components/schemas/BetaRequestCharLocationCitation" },
                    { "$ref": "#/components/schemas/BetaRequestPageLocationCitation" },
                    { "$ref": "#/components/schemas/BetaRequestContentBlockLocationCitation" }
                  ]
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Citations"
          },
          "text": { "minLength": 1, "title": "Text", "type": "string" },
          "type": { "const": "text", "enum": ["text"], "title": "Type", "type": "string" }
        },
        "required": ["text", "type"],
        "title": "RequestTextBlock",
        "type": "object"
      },
      "BetaRequestThinkingBlock": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "thinking", "enum": ["thinking"], "title": "Type", "type": "string" },
          "thinking": { "title": "Thinking", "type": "string" },
          "signature": { "title": "Signature", "type": "string" }
        },
        "required": ["type", "thinking", "signature"],
        "title": "RequestThinkingBlock",
        "type": "object"
      },
      "BetaRequestToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "tool_result", "enum": ["tool_result"], "title": "Type", "type": "string" },
          "tool_use_id": { "pattern": "^[a-zA-Z0-9_-]+$", "title": "Tool Use Id", "type": "string" },
          "is_error": { "title": "Is Error", "type": "boolean" },
          "content": {
            "anyOf": [
              { "type": "string", "x-stainless-skip": ["go", "cli"] },
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "image": "#/components/schemas/BetaRequestImageBlock",
                      "text": "#/components/schemas/BetaRequestTextBlock"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    { "$ref": "#/components/schemas/BetaRequestTextBlock" },
                    { "$ref": "#/components/schemas/BetaRequestImageBlock" }
                  ],
                  "title": "Block"
                },
                "type": "array",
                "x-stainless-naming": {
                  "python": { "type_name": "Content" },
                  "ruby": { "type_name": "Content" }
                }
              }
            ],
            "title": "Content"
          }
        },
        "required": ["type", "tool_use_id"],
        "title": "RequestToolResultBlock",
        "type": "object"
      },
      "BetaRequestToolUseBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "tool_use", "enum": ["tool_use"], "title": "Type", "type": "string" },
          "id": { "pattern": "^[a-zA-Z0-9_-]+$", "title": "Id", "type": "string" },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,64}$",
            "title": "Name",
            "type": "string"
          },
          "input": { "title": "Input", "type": "object" }
        },
        "required": ["type", "id", "name", "input"],
        "title": "RequestToolUseBlock",
        "type": "object"
      },
      "BetaResponseCharLocationCitation": {
        "properties": {
          "type": {
            "const": "char_location",
            "default": "char_location",
            "enum": ["char_location"],
            "title": "Type",
            "type": "string"
          },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_char_index": { "minimum": 0, "title": "Start Char Index", "type": "integer" },
          "end_char_index": { "title": "End Char Index", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_char_index",
          "end_char_index"
        ],
        "title": "ResponseCharLocationCitation",
        "type": "object"
      },
      "BetaResponseContentBlockLocationCitation": {
        "properties": {
          "type": {
            "const": "content_block_location",
            "default": "content_block_location",
            "enum": ["content_block_location"],
            "title": "Type",
            "type": "string"
          },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_block_index": { "minimum": 0, "title": "Start Block Index", "type": "integer" },
          "end_block_index": { "title": "End Block Index", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_block_index",
          "end_block_index"
        ],
        "title": "ResponseContentBlockLocationCitation",
        "type": "object"
      },
      "BetaResponsePageLocationCitation": {
        "properties": {
          "type": {
            "const": "page_location",
            "default": "page_location",
            "enum": ["page_location"],
            "title": "Type",
            "type": "string"
          },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_page_number": { "minimum": 1, "title": "Start Page Number", "type": "integer" },
          "end_page_number": { "title": "End Page Number", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_page_number",
          "end_page_number"
        ],
        "title": "ResponsePageLocationCitation",
        "type": "object"
      },
      "BetaResponseRedactedThinkingBlock": {
        "properties": {
          "type": {
            "const": "redacted_thinking",
            "default": "redacted_thinking",
            "enum": ["redacted_thinking"],
            "title": "Type",
            "type": "string"
          },
          "data": { "title": "Data", "type": "string" }
        },
        "required": ["type", "data"],
        "title": "ResponseRedactedThinkingBlock",
        "type": "object"
      },
      "BetaResponseTextBlock": {
        "properties": {
          "type": { "const": "text", "default": "text", "enum": ["text"], "title": "Type", "type": "string" },
          "text": { "maxLength": 5000000, "minLength": 0, "title": "Text", "type": "string" },
          "citations": {
            "anyOf": [
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "char_location": "#/components/schemas/BetaResponseCharLocationCitation",
                      "content_block_location": "#/components/schemas/BetaResponseContentBlockLocationCitation",
                      "page_location": "#/components/schemas/BetaResponsePageLocationCitation"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    { "$ref": "#/components/schemas/BetaResponseCharLocationCitation" },
                    { "$ref": "#/components/schemas/BetaResponsePageLocationCitation" },
                    { "$ref": "#/components/schemas/BetaResponseContentBlockLocationCitation" }
                  ]
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "default": null,
            "description": "Citations supporting the text block.\n\nThe type of citation returned will depend on the type of document being cited. Citing a PDF results in `page_location`, plain text results in `char_location`, and content document results in `content_block_location`.",
            "title": "Citations"
          }
        },
        "required": ["type", "text", "citations"],
        "title": "ResponseTextBlock",
        "type": "object"
      },
      "BetaResponseThinkingBlock": {
        "properties": {
          "type": {
            "const": "thinking",
            "default": "thinking",
            "enum": ["thinking"],
            "title": "Type",
            "type": "string"
          },
          "thinking": { "title": "Thinking", "type": "string" },
          "signature": { "title": "Signature", "type": "string" }
        },
        "required": ["type", "thinking", "signature"],
        "title": "ResponseThinkingBlock",
        "type": "object"
      },
      "BetaResponseToolUseBlock": {
        "properties": {
          "type": {
            "const": "tool_use",
            "default": "tool_use",
            "enum": ["tool_use"],
            "title": "Type",
            "type": "string"
          },
          "id": { "pattern": "^[a-zA-Z0-9_-]+$", "title": "Id", "type": "string" },
          "name": { "minLength": 1, "title": "Name", "type": "string" },
          "input": { "title": "Input", "type": "object" }
        },
        "required": ["type", "id", "name", "input"],
        "title": "ResponseToolUseBlock",
        "type": "object"
      },
      "BetaSignatureContentBlockDelta": {
        "properties": {
          "type": {
            "const": "signature_delta",
            "default": "signature_delta",
            "enum": ["signature_delta"],
            "title": "Type",
            "type": "string"
          },
          "signature": { "title": "Signature", "type": "string" }
        },
        "required": ["type", "signature"],
        "title": "SignatureContentBlockDelta",
        "type": "object"
      },
      "BetaSucceededResult": {
        "properties": {
          "type": {
            "const": "succeeded",
            "default": "succeeded",
            "enum": ["succeeded"],
            "title": "Type",
            "type": "string"
          },
          "message": { "$ref": "#/components/schemas/BetaMessage" }
        },
        "required": ["type", "message"],
        "title": "SucceededResult",
        "type": "object"
      },
      "BetaTextContentBlockDelta": {
        "properties": {
          "type": {
            "const": "text_delta",
            "default": "text_delta",
            "enum": ["text_delta"],
            "title": "Type",
            "type": "string"
          },
          "text": { "title": "Text", "type": "string" }
        },
        "required": ["type", "text"],
        "title": "TextContentBlockDelta",
        "type": "object"
      },
      "BetaTextEditor_20241022": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": {
            "const": "text_editor_20241022",
            "enum": ["text_editor_20241022"],
            "title": "Type",
            "type": "string"
          },
          "name": {
            "const": "str_replace_editor",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "enum": ["str_replace_editor"],
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["type", "name"],
        "title": "TextEditor_20241022",
        "type": "object"
      },
      "BetaTextEditor_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": {
            "const": "text_editor_20250124",
            "enum": ["text_editor_20250124"],
            "title": "Type",
            "type": "string"
          },
          "name": {
            "const": "str_replace_editor",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "enum": ["str_replace_editor"],
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["type", "name"],
        "title": "TextEditor_20250124",
        "type": "object"
      },
      "BetaThinkingConfigDisabled": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "disabled", "enum": ["disabled"], "title": "Type", "type": "string" }
        },
        "required": ["type"],
        "title": "ThinkingConfigDisabled",
        "type": "object"
      },
      "BetaThinkingConfigEnabled": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "enabled", "enum": ["enabled"], "title": "Type", "type": "string" },
          "budget_tokens": {
            "description": "Determines how many tokens Claude can use for its internal reasoning process. Larger budgets can enable more thorough analysis for complex problems, improving response quality. \n\nMust be ≥1024 and less than `max_tokens`.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details.",
            "minimum": 1024,
            "title": "Budget Tokens",
            "type": "integer"
          }
        },
        "required": ["type", "budget_tokens"],
        "title": "ThinkingConfigEnabled",
        "type": "object"
      },
      "BetaThinkingContentBlockDelta": {
        "properties": {
          "type": {
            "const": "thinking_delta",
            "default": "thinking_delta",
            "enum": ["thinking_delta"],
            "title": "Type",
            "type": "string"
          },
          "thinking": { "title": "Thinking", "type": "string" }
        },
        "required": ["type", "thinking"],
        "title": "ThinkingContentBlockDelta",
        "type": "object"
      },
      "BetaTool": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "anyOf": [{ "type": "null" }, { "const": "custom", "enum": ["custom"], "type": "string" }],
            "title": "Type"
          },
          "description": {
            "description": "Description of what this tool does.\n\nTool descriptions should be as detailed as possible. The more information that the model has about what the tool is and how to use it, the better it will perform. You can use natural language descriptions to reinforce important aspects of the tool input JSON schema.",
            "examples": ["Get the current weather in a given location"],
            "title": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,64}$",
            "title": "Name",
            "type": "string"
          },
          "input_schema": {
            "allOf": [{ "$ref": "#/components/schemas/BetaInputSchema" }],
            "description": "[JSON schema](https://json-schema.org/draft/2020-12) for this tool's input.\n\nThis defines the shape of the `input` that your tool accepts and that the model will produce.",
            "examples": [
              {
                "properties": {
                  "location": {
                    "description": "The city and state, e.g. San Francisco, CA",
                    "type": "string"
                  },
                  "unit": {
                    "description": "Unit for the output - one of (celsius, fahrenheit)",
                    "type": "string"
                  }
                },
                "required": ["location"],
                "type": "object"
              }
            ]
          },
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/BetaCacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/BetaCacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          }
        },
        "required": ["name", "input_schema"],
        "title": "Tool",
        "type": "object"
      },
      "BetaToolChoiceAny": {
        "additionalProperties": false,
        "description": "The model will use any available tools.",
        "properties": {
          "type": { "const": "any", "enum": ["any"], "title": "Type", "type": "string" },
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceAny",
        "type": "object"
      },
      "BetaToolChoiceAuto": {
        "additionalProperties": false,
        "description": "The model will automatically decide whether to use tools.",
        "properties": {
          "type": { "const": "auto", "enum": ["auto"], "title": "Type", "type": "string" },
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output at most one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceAuto",
        "type": "object"
      },
      "BetaToolChoiceTool": {
        "additionalProperties": false,
        "description": "The model will use the specified tool with `tool_choice.name`.",
        "properties": {
          "type": { "const": "tool", "enum": ["tool"], "title": "Type", "type": "string" },
          "name": { "description": "The name of the tool to use.", "title": "Name", "type": "string" },
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          }
        },
        "required": ["type", "name"],
        "title": "ToolChoiceTool",
        "type": "object"
      },
      "BetaURLImageSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "url", "enum": ["url"], "title": "Type", "type": "string" },
          "url": { "title": "Url", "type": "string" }
        },
        "required": ["type", "url"],
        "title": "URLImageSource",
        "type": "object"
      },
      "BetaURLPDFSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "url", "enum": ["url"], "title": "Type", "type": "string" },
          "url": { "title": "Url", "type": "string" }
        },
        "required": ["type", "url"],
        "title": "URLPDFSource",
        "type": "object"
      },
      "BetaUsage": {
        "properties": {
          "input_tokens": {
            "description": "The number of input tokens which were used.",
            "examples": [2095],
            "minimum": 0,
            "title": "Input Tokens",
            "type": "integer"
          },
          "cache_creation_input_tokens": {
            "anyOf": [{ "minimum": 0, "type": "integer" }, { "type": "null" }],
            "default": null,
            "description": "The number of input tokens used to create the cache entry.",
            "examples": [2051],
            "title": "Cache Creation Input Tokens"
          },
          "cache_read_input_tokens": {
            "anyOf": [{ "minimum": 0, "type": "integer" }, { "type": "null" }],
            "default": null,
            "description": "The number of input tokens read from the cache.",
            "examples": [2051],
            "title": "Cache Read Input Tokens"
          },
          "output_tokens": {
            "description": "The number of output tokens which were used.",
            "examples": [503],
            "minimum": 0,
            "title": "Output Tokens",
            "type": "integer"
          }
        },
        "required": [
          "input_tokens",
          "cache_creation_input_tokens",
          "cache_read_input_tokens",
          "output_tokens"
        ],
        "title": "Usage",
        "type": "object"
      },
      "BillingError": {
        "properties": {
          "type": {
            "const": "billing_error",
            "default": "billing_error",
            "enum": ["billing_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Billing error", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "BillingError",
        "type": "object"
      },
      "CacheControlEphemeral": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "ephemeral", "enum": ["ephemeral"], "title": "Type", "type": "string" }
        },
        "required": ["type"],
        "title": "CacheControlEphemeral",
        "type": "object"
      },
      "CanceledResult": {
        "properties": {
          "type": {
            "const": "canceled",
            "default": "canceled",
            "enum": ["canceled"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "CanceledResult",
        "type": "object"
      },
      "CitationsDelta": {
        "properties": {
          "type": {
            "const": "citations_delta",
            "default": "citations_delta",
            "enum": ["citations_delta"],
            "title": "Type",
            "type": "string"
          },
          "citation": {
            "discriminator": {
              "mapping": {
                "char_location": "#/components/schemas/ResponseCharLocationCitation",
                "content_block_location": "#/components/schemas/ResponseContentBlockLocationCitation",
                "page_location": "#/components/schemas/ResponsePageLocationCitation"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/ResponseCharLocationCitation" },
              { "$ref": "#/components/schemas/ResponsePageLocationCitation" },
              { "$ref": "#/components/schemas/ResponseContentBlockLocationCitation" }
            ],
            "title": "Citation"
          }
        },
        "required": ["type", "citation"],
        "title": "CitationsDelta",
        "type": "object"
      },
      "CompletionRequest": {
        "additionalProperties": false,
        "examples": [
          {
            "model": "claude-2.1",
            "prompt": "\n\nHuman: Hello, world!\n\nAssistant:",
            "max_tokens_to_sample": 256
          }
        ],
        "properties": {
          "model": { "$ref": "#/components/schemas/Model" },
          "prompt": {
            "description": "The prompt that you want Claude to complete.\n\nFor proper response generation you will need to format your prompt using alternating `\\n\\nHuman:` and `\\n\\nAssistant:` conversational turns. For example:\n\n```\n\"\\n\\nHuman: {userQuestion}\\n\\nAssistant:\"\n```\n\nSee [prompt validation](https://docs.anthropic.com/en/api/prompt-validation) and our guide to [prompt design](https://docs.anthropic.com/en/docs/intro-to-prompting) for more details.",
            "examples": ["\n\nHuman: Hello, world!\n\nAssistant:"],
            "minLength": 1,
            "title": "Prompt",
            "type": "string"
          },
          "max_tokens_to_sample": {
            "description": "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.",
            "examples": [256],
            "minimum": 1,
            "title": "Max Tokens To Sample",
            "type": "integer"
          },
          "stop_sequences": {
            "description": "Sequences that will cause the model to stop generating.\n\nOur models stop on `\"\\n\\nHuman:\"`, and may include additional built-in stop sequences in the future. By providing the stop_sequences parameter, you may include additional strings that will cause the model to stop generating.",
            "items": { "type": "string" },
            "title": "Stop Sequences",
            "type": "array"
          },
          "temperature": {
            "description": "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.",
            "examples": [1],
            "maximum": 1,
            "minimum": 0,
            "title": "Temperature",
            "type": "number"
          },
          "top_p": {
            "description": "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [0.7],
            "maximum": 1,
            "minimum": 0,
            "title": "Top P",
            "type": "number"
          },
          "top_k": {
            "description": "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [5],
            "minimum": 0,
            "title": "Top K",
            "type": "integer"
          },
          "metadata": {
            "allOf": [{ "$ref": "#/components/schemas/Metadata" }],
            "description": "An object describing metadata about the request."
          },
          "stream": {
            "description": "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/streaming) for details.",
            "title": "Stream",
            "type": "boolean"
          }
        },
        "required": ["prompt", "max_tokens_to_sample", "model"],
        "title": "CompletionRequest",
        "type": "object"
      },
      "CompletionResponse": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["completion"],
            "const": "completion",
            "title": "Type",
            "description": "Object type.\n\nFor Text Completions, this is always `\"completion\"`.",
            "default": "completion"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time."
          },
          "completion": {
            "type": "string",
            "title": "Completion",
            "description": "The resulting completion up to and excluding the stop sequences.",
            "examples": [" Hello! My name is Claude."]
          },
          "stop_reason": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Stop Reason",
            "description": "The reason that we stopped.\n\nThis may be one the following values:\n* `\"stop_sequence\"`: we reached a stop sequence — either provided by you via the `stop_sequences` parameter, or a stop sequence built into the model\n* `\"max_tokens\"`: we exceeded `max_tokens_to_sample` or the model's maximum",
            "examples": ["stop_sequence"]
          },
          "model": { "$ref": "#/components/schemas/Model" }
        },
        "type": "object",
        "required": ["type", "id", "completion", "stop_reason", "model"],
        "title": "CompletionResponse",
        "example": {
          "completion": " Hello! My name is Claude.",
          "id": "compl_018CKm6gsux7P8yMcwZbeCPw",
          "model": "claude-2.1",
          "stop_reason": "stop_sequence",
          "type": "completion"
        }
      },
      "ContentBlockDeltaEvent": {
        "properties": {
          "type": {
            "const": "content_block_delta",
            "default": "content_block_delta",
            "enum": ["content_block_delta"],
            "title": "Type",
            "type": "string"
          },
          "index": { "title": "Index", "type": "integer" },
          "delta": {
            "discriminator": {
              "mapping": {
                "citations_delta": "#/components/schemas/CitationsDelta",
                "input_json_delta": "#/components/schemas/InputJsonContentBlockDelta",
                "signature_delta": "#/components/schemas/SignatureContentBlockDelta",
                "text_delta": "#/components/schemas/TextContentBlockDelta",
                "thinking_delta": "#/components/schemas/ThinkingContentBlockDelta"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/TextContentBlockDelta" },
              { "$ref": "#/components/schemas/InputJsonContentBlockDelta" },
              { "$ref": "#/components/schemas/CitationsDelta" },
              { "$ref": "#/components/schemas/ThinkingContentBlockDelta" },
              { "$ref": "#/components/schemas/SignatureContentBlockDelta" }
            ],
            "title": "Delta"
          }
        },
        "required": ["type", "index", "delta"],
        "title": "ContentBlockDeltaEvent",
        "type": "object",
        "x-stainless-naming": { "go": { "model_name": "ContentBlockDeltaEvent" } }
      },
      "ContentBlockSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "content", "enum": ["content"], "title": "Type", "type": "string" },
          "content": {
            "anyOf": [
              { "type": "string" },
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "image": "#/components/schemas/RequestImageBlock",
                      "text": "#/components/schemas/RequestTextBlock"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    { "$ref": "#/components/schemas/RequestTextBlock" },
                    { "$ref": "#/components/schemas/RequestImageBlock" }
                  ],
                  "title": "content_block_source_content_item"
                },
                "type": "array",
                "title": "content_block_source_content"
              }
            ],
            "title": "Content"
          }
        },
        "required": ["type", "content"],
        "title": "ContentBlockSource",
        "type": "object"
      },
      "ContentBlockStartEvent": {
        "properties": {
          "type": {
            "const": "content_block_start",
            "default": "content_block_start",
            "enum": ["content_block_start"],
            "title": "Type",
            "type": "string"
          },
          "index": { "title": "Index", "type": "integer" },
          "content_block": {
            "discriminator": {
              "mapping": {
                "redacted_thinking": "#/components/schemas/ResponseRedactedThinkingBlock",
                "text": "#/components/schemas/ResponseTextBlock",
                "thinking": "#/components/schemas/ResponseThinkingBlock",
                "tool_use": "#/components/schemas/ResponseToolUseBlock"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/ResponseTextBlock" },
              { "$ref": "#/components/schemas/ResponseToolUseBlock" },
              { "$ref": "#/components/schemas/ResponseThinkingBlock" },
              { "$ref": "#/components/schemas/ResponseRedactedThinkingBlock" }
            ],
            "title": "Content Block"
          }
        },
        "required": ["type", "index", "content_block"],
        "title": "ContentBlockStartEvent",
        "type": "object",
        "x-stainless-naming": { "go": { "model_name": "ContentBlockStartEvent" } }
      },
      "ContentBlockStopEvent": {
        "properties": {
          "type": {
            "const": "content_block_stop",
            "default": "content_block_stop",
            "enum": ["content_block_stop"],
            "title": "Type",
            "type": "string"
          },
          "index": { "title": "Index", "type": "integer" }
        },
        "required": ["type", "index"],
        "title": "ContentBlockStopEvent",
        "type": "object",
        "x-stainless-naming": { "go": { "model_name": "ContentBlockStopEvent" } }
      },
      "CountMessageTokensParams": {
        "additionalProperties": false,
        "examples": [
          {
            "messages": [{ "content": "Hello, world", "role": "user" }],
            "model": "claude-3-7-sonnet-20250219"
          }
        ],
        "properties": {
          "tool_choice": { "$ref": "#/components/schemas/ToolChoice" },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/Tool" },
                { "$ref": "#/components/schemas/BashTool_20250124" },
                { "$ref": "#/components/schemas/TextEditor_20250124" }
              ]
            },
            "title": "Tools",
            "type": "array"
          },
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.",
            "items": { "$ref": "#/components/schemas/InputMessage" },
            "title": "Messages",
            "type": "array"
          },
          "system": {
            "anyOf": [
              { "type": "string" },
              { "items": { "$ref": "#/components/schemas/RequestTextBlock" }, "type": "array" }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [{ "text": "Today's date is 2024-06-01.", "type": "text" }],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "thinking": { "$ref": "#/components/schemas/ThinkingConfigParam" },
          "model": { "$ref": "#/components/schemas/Model" }
        },
        "required": ["messages", "model"],
        "title": "CountMessageTokensParams",
        "type": "object"
      },
      "CountMessageTokensResponse": {
        "properties": {
          "input_tokens": {
            "type": "integer",
            "title": "Input Tokens",
            "description": "The total number of tokens across the provided list of messages, system prompt, and tools.",
            "examples": [2095]
          }
        },
        "type": "object",
        "required": ["input_tokens"],
        "title": "CountMessageTokensResponse",
        "examples": [{ "input_tokens": 2095 }]
      },
      "CreateMessageBatchParams": {
        "additionalProperties": false,
        "properties": {
          "requests": {
            "description": "List of requests for prompt completion. Each is an individual request to create a Message.",
            "items": { "$ref": "#/components/schemas/MessageBatchIndividualRequestParams" },
            "maxItems": 10000,
            "minItems": 1,
            "title": "Requests",
            "type": "array"
          }
        },
        "required": ["requests"],
        "title": "CreateMessageBatchParams",
        "type": "object"
      },
      "CreateMessageParams": {
        "additionalProperties": false,
        "example": {
          "max_tokens": 1024,
          "messages": [{ "content": "Hello, world", "role": "user" }],
          "model": "claude-3-7-sonnet-20250219"
        },
        "properties": {
          "model": { "$ref": "#/components/schemas/Model" },
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.",
            "items": { "$ref": "#/components/schemas/InputMessage" },
            "title": "Messages",
            "type": "array"
          },
          "max_tokens": {
            "description": "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter.  See [models](https://docs.anthropic.com/en/docs/models-overview) for details.",
            "examples": [1024],
            "minimum": 1,
            "title": "Max Tokens",
            "type": "integer"
          },
          "metadata": {
            "allOf": [{ "$ref": "#/components/schemas/Metadata" }],
            "description": "An object describing metadata about the request."
          },
          "stop_sequences": {
            "description": "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn, which will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of text, you can use the `stop_sequences` parameter. If the model encounters one of the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"` and the response `stop_sequence` value will contain the matched stop sequence.",
            "items": { "type": "string" },
            "title": "Stop Sequences",
            "type": "array"
          },
          "stream": {
            "description": "Whether to incrementally stream the response using server-sent events.\n\nSee [streaming](https://docs.anthropic.com/en/api/messages-streaming) for details.",
            "title": "Stream",
            "type": "boolean"
          },
          "system": {
            "anyOf": [
              { "type": "string", "x-stainless-skip": ["go", "cli"] },
              { "items": { "$ref": "#/components/schemas/RequestTextBlock" }, "type": "array" }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [{ "text": "Today's date is 2024-06-01.", "type": "text" }],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "temperature": {
            "description": "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.",
            "examples": [1],
            "maximum": 1,
            "minimum": 0,
            "title": "Temperature",
            "type": "number"
          },
          "thinking": { "$ref": "#/components/schemas/ThinkingConfigParam" },
          "tool_choice": { "$ref": "#/components/schemas/ToolChoice" },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/Tool" },
                { "$ref": "#/components/schemas/BashTool_20250124" },
                { "$ref": "#/components/schemas/TextEditor_20250124" }
              ]
            },
            "title": "Tools",
            "type": "array"
          },
          "top_k": {
            "description": "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [5],
            "minimum": 0,
            "title": "Top K",
            "type": "integer"
          },
          "top_p": {
            "description": "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [0.7],
            "maximum": 1,
            "minimum": 0,
            "title": "Top P",
            "type": "number"
          }
        },
        "required": ["model", "messages", "max_tokens"],
        "title": "CreateMessageParams",
        "type": "object"
      },
      "DeleteMessageBatchResponse": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "ID of the Message Batch.",
            "examples": ["msgbatch_013Zva2CMHLNnXjNJJKqJ2EF"]
          },
          "type": {
            "type": "string",
            "enum": ["message_batch_deleted"],
            "const": "message_batch_deleted",
            "title": "Type",
            "description": "Deleted object type.\n\nFor Message Batches, this is always `\"message_batch_deleted\"`.",
            "default": "message_batch_deleted"
          }
        },
        "type": "object",
        "required": ["id", "type"],
        "title": "DeleteMessageBatchResponse"
      },
      "ErrorResponse": {
        "properties": {
          "type": {
            "const": "error",
            "default": "error",
            "enum": ["error"],
            "title": "Type",
            "type": "string"
          },
          "error": {
            "discriminator": {
              "mapping": {
                "api_error": "#/components/schemas/APIError",
                "authentication_error": "#/components/schemas/AuthenticationError",
                "billing_error": "#/components/schemas/BillingError",
                "invalid_request_error": "#/components/schemas/InvalidRequestError",
                "not_found_error": "#/components/schemas/NotFoundError",
                "overloaded_error": "#/components/schemas/OverloadedError",
                "permission_error": "#/components/schemas/PermissionError",
                "rate_limit_error": "#/components/schemas/RateLimitError",
                "timeout_error": "#/components/schemas/GatewayTimeoutError"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/InvalidRequestError" },
              { "$ref": "#/components/schemas/AuthenticationError" },
              { "$ref": "#/components/schemas/BillingError" },
              { "$ref": "#/components/schemas/PermissionError" },
              { "$ref": "#/components/schemas/NotFoundError" },
              { "$ref": "#/components/schemas/RateLimitError" },
              { "$ref": "#/components/schemas/GatewayTimeoutError" },
              { "$ref": "#/components/schemas/APIError" },
              { "$ref": "#/components/schemas/OverloadedError" }
            ],
            "title": "Error"
          }
        },
        "required": ["type", "error"],
        "title": "ErrorResponse",
        "type": "object"
      },
      "ErroredResult": {
        "properties": {
          "type": {
            "const": "errored",
            "default": "errored",
            "enum": ["errored"],
            "title": "Type",
            "type": "string"
          },
          "error": { "$ref": "#/components/schemas/ErrorResponse" }
        },
        "required": ["type", "error"],
        "title": "ErroredResult",
        "type": "object"
      },
      "ExpiredResult": {
        "properties": {
          "type": {
            "const": "expired",
            "default": "expired",
            "enum": ["expired"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "ExpiredResult",
        "type": "object"
      },
      "GatewayTimeoutError": {
        "properties": {
          "type": {
            "const": "timeout_error",
            "default": "timeout_error",
            "enum": ["timeout_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Request timeout", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "GatewayTimeoutError",
        "type": "object"
      },
      "InputJsonContentBlockDelta": {
        "properties": {
          "type": {
            "const": "input_json_delta",
            "default": "input_json_delta",
            "enum": ["input_json_delta"],
            "title": "Type",
            "type": "string"
          },
          "partial_json": { "title": "Partial Json", "type": "string" }
        },
        "required": ["type", "partial_json"],
        "title": "InputJsonContentBlockDelta",
        "type": "object"
      },
      "InputMessage": {
        "additionalProperties": false,
        "properties": {
          "role": { "enum": ["user", "assistant"], "title": "Role", "type": "string" },
          "content": {
            "anyOf": [
              { "type": "string", "x-stainless-skip": ["go", "cli"] },
              {
                "items": { "$ref": "#/components/schemas/InputContentBlock" },
                "type": "array",
                "example": [{ "type": "text", "text": "What is a quaternion?" }]
              }
            ],
            "title": "Content"
          }
        },
        "required": ["role", "content"],
        "title": "InputMessage",
        "type": "object",
        "discriminator": { "propertyName": "role" }
      },
      "InputSchema": {
        "additionalProperties": true,
        "properties": {
          "type": { "const": "object", "enum": ["object"], "title": "Type", "type": "string" },
          "properties": { "anyOf": [{ "type": "object" }, { "type": "null" }], "title": "Properties" }
        },
        "required": ["type"],
        "title": "InputSchema",
        "type": "object"
      },
      "InvalidRequestError": {
        "properties": {
          "type": {
            "const": "invalid_request_error",
            "default": "invalid_request_error",
            "enum": ["invalid_request_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Invalid request", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "InvalidRequestError",
        "type": "object"
      },
      "ListResponse_MessageBatch_": {
        "properties": {
          "data": {
            "items": { "$ref": "#/components/schemas/MessageBatch" },
            "type": "array",
            "title": "Data"
          },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Indicates if there are more results in the requested page direction."
          },
          "first_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Id",
            "description": "First ID in the `data` list. Can be used as the `before_id` for the previous page."
          },
          "last_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Id",
            "description": "Last ID in the `data` list. Can be used as the `after_id` for the next page."
          }
        },
        "type": "object",
        "required": ["data", "has_more", "first_id", "last_id"],
        "title": "ListResponse[MessageBatch]"
      },
      "ListResponse_ModelInfo_": {
        "properties": {
          "data": { "items": { "$ref": "#/components/schemas/ModelInfo" }, "type": "array", "title": "Data" },
          "has_more": {
            "type": "boolean",
            "title": "Has More",
            "description": "Indicates if there are more results in the requested page direction."
          },
          "first_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "First Id",
            "description": "First ID in the `data` list. Can be used as the `before_id` for the previous page."
          },
          "last_id": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Last Id",
            "description": "Last ID in the `data` list. Can be used as the `after_id` for the next page."
          }
        },
        "type": "object",
        "required": ["data", "has_more", "first_id", "last_id"],
        "title": "ListResponse[ModelInfo]"
      },
      "Message": {
        "examples": [
          {
            "content": [{ "text": "Hi! My name is Claude.", "type": "text" }],
            "id": "msg_013Zva2CMHLNnXjNJJKqJ2EF",
            "model": "claude-3-7-sonnet-20250219",
            "role": "assistant",
            "stop_reason": "end_turn",
            "stop_sequence": null,
            "type": "message",
            "usage": { "input_tokens": 2095, "output_tokens": 503 }
          }
        ],
        "properties": {
          "id": {
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "examples": ["msg_013Zva2CMHLNnXjNJJKqJ2EF"],
            "title": "Id",
            "type": "string"
          },
          "type": {
            "const": "message",
            "default": "message",
            "description": "Object type.\n\nFor Messages, this is always `\"message\"`.",
            "enum": ["message"],
            "title": "Type",
            "type": "string"
          },
          "role": {
            "const": "assistant",
            "default": "assistant",
            "description": "Conversational role of the generated message.\n\nThis will always be `\"assistant\"`.",
            "enum": ["assistant"],
            "title": "Role",
            "type": "string"
          },
          "content": {
            "description": "Content generated by the model.\n\nThis is an array of content blocks, each of which has a `type` that determines its shape.\n\nExample:\n\n```json\n[{\"type\": \"text\", \"text\": \"Hi, I'm Claude.\"}]\n```\n\nIf the request input `messages` ended with an `assistant` turn, then the response `content` will continue directly from that last turn. You can use this to constrain the model's output.\n\nFor example, if the input `messages` were:\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"}\n]\n```\n\nThen the response `content` might be:\n\n```json\n[{\"type\": \"text\", \"text\": \"B)\"}]\n```",
            "examples": [[{ "text": "Hi! My name is Claude.", "type": "text" }]],
            "items": { "$ref": "#/components/schemas/ContentBlock" },
            "title": "Content",
            "type": "array"
          },
          "model": { "$ref": "#/components/schemas/Model" },
          "stop_reason": {
            "anyOf": [
              { "enum": ["end_turn", "max_tokens", "stop_sequence", "tool_use"], "type": "string" },
              { "type": "null" }
            ],
            "description": "The reason that we stopped.\n\nThis may be one the following values:\n* `\"end_turn\"`: the model reached a natural stopping point\n* `\"max_tokens\"`: we exceeded the requested `max_tokens` or the model's maximum\n* `\"stop_sequence\"`: one of your provided custom `stop_sequences` was generated\n* `\"tool_use\"`: the model invoked one or more tools\n\nIn non-streaming mode this value is always non-null. In streaming mode, it is null in the `message_start` event and non-null otherwise.",
            "title": "Stop Reason"
          },
          "stop_sequence": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "default": null,
            "description": "Which custom stop sequence was generated, if any.\n\nThis value will be a non-null string if one of your custom stop sequences was generated.",
            "title": "Stop Sequence"
          },
          "usage": {
            "allOf": [{ "$ref": "#/components/schemas/Usage" }],
            "description": "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`.",
            "examples": [{ "input_tokens": 2095, "output_tokens": 503 }]
          }
        },
        "required": ["id", "type", "role", "content", "model", "stop_reason", "stop_sequence", "usage"],
        "title": "Message",
        "type": "object",
        "x-stainless-python-custom-imports": ["from .content_block import ContentBlock as ContentBlock"]
      },
      "MessageBatch": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique object identifier.\n\nThe format and length of IDs may change over time.",
            "examples": ["msgbatch_013Zva2CMHLNnXjNJJKqJ2EF"]
          },
          "type": {
            "type": "string",
            "enum": ["message_batch"],
            "const": "message_batch",
            "title": "Type",
            "description": "Object type.\n\nFor Message Batches, this is always `\"message_batch\"`.",
            "default": "message_batch"
          },
          "processing_status": {
            "type": "string",
            "enum": ["in_progress", "canceling", "ended"],
            "title": "Processing Status",
            "description": "Processing status of the Message Batch."
          },
          "request_counts": {
            "allOf": [{ "$ref": "#/components/schemas/RequestCounts" }],
            "description": "Tallies requests within the Message Batch, categorized by their status.\n\nRequests start as `processing` and move to one of the other statuses only once processing of the entire batch ends. The sum of all values always matches the total number of requests in the batch."
          },
          "ended_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Ended At",
            "description": "RFC 3339 datetime string representing the time at which processing for the Message Batch ended. Specified only once processing ends.\n\nProcessing ends when every request in a Message Batch has either succeeded, errored, canceled, or expired.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "RFC 3339 datetime string representing the time at which the Message Batch was created.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "expires_at": {
            "type": "string",
            "format": "date-time",
            "title": "Expires At",
            "description": "RFC 3339 datetime string representing the time at which the Message Batch will expire and end processing, which is 24 hours after creation.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "archived_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Archived At",
            "description": "RFC 3339 datetime string representing the time at which the Message Batch was archived and its results became unavailable.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "cancel_initiated_at": {
            "anyOf": [{ "type": "string", "format": "date-time" }, { "type": "null" }],
            "title": "Cancel Initiated At",
            "description": "RFC 3339 datetime string representing the time at which cancellation was initiated for the Message Batch. Specified only if cancellation was initiated.",
            "examples": ["2024-08-20T18:37:24.100435Z"]
          },
          "results_url": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Results Url",
            "description": "URL to a `.jsonl` file containing the results of the Message Batch requests. Specified only once processing ends.\n\nResults in the file are not guaranteed to be in the same order as requests. Use the `custom_id` field to match results to requests.",
            "examples": [
              "https://api.anthropic.com/v1/messages/batches/msgbatch_013Zva2CMHLNnXjNJJKqJ2EF/results"
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "type",
          "processing_status",
          "request_counts",
          "ended_at",
          "created_at",
          "expires_at",
          "archived_at",
          "cancel_initiated_at",
          "results_url"
        ],
        "title": "MessageBatch"
      },
      "MessageBatchIndividualRequestParams": {
        "additionalProperties": false,
        "properties": {
          "custom_id": {
            "description": "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch.",
            "examples": ["my-custom-id-1"],
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,64}$",
            "title": "Custom Id",
            "type": "string"
          },
          "params": {
            "allOf": [{ "$ref": "#/components/schemas/CreateMessageParams" }],
            "description": "Messages API creation parameters for the individual request. \n\nSee the [Messages API reference](/en/api/messages) for full documentation on available parameters."
          }
        },
        "required": ["custom_id", "params"],
        "title": "MessageBatchIndividualRequestParams",
        "type": "object"
      },
      "MessageBatchIndividualResponse": {
        "description": "This is a single line in the response `.jsonl` file and does not represent the response as a whole.",
        "properties": {
          "custom_id": {
            "description": "Developer-provided ID created for each request in a Message Batch. Useful for matching results to requests, as results may be given out of request order.\n\nMust be unique for each request within the Message Batch.",
            "examples": ["my-custom-id-1"],
            "title": "Custom Id",
            "type": "string"
          },
          "result": {
            "description": "Processing result for this request.\n\nContains a Message output if processing was successful, an error response if processing failed, or the reason why processing was not attempted, such as cancellation or expiration.",
            "discriminator": {
              "mapping": {
                "canceled": "#/components/schemas/CanceledResult",
                "errored": "#/components/schemas/ErroredResult",
                "expired": "#/components/schemas/ExpiredResult",
                "succeeded": "#/components/schemas/SucceededResult"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/SucceededResult" },
              { "$ref": "#/components/schemas/ErroredResult" },
              { "$ref": "#/components/schemas/CanceledResult" },
              { "$ref": "#/components/schemas/ExpiredResult" }
            ],
            "title": "Result"
          }
        },
        "required": ["custom_id", "result"],
        "title": "MessageBatchIndividualResponse",
        "type": "object"
      },
      "MessageDelta": {
        "properties": {
          "stop_reason": {
            "anyOf": [
              { "enum": ["end_turn", "max_tokens", "stop_sequence", "tool_use"], "type": "string" },
              { "type": "null" }
            ],
            "default": null,
            "title": "Stop Reason"
          },
          "stop_sequence": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "default": null,
            "title": "Stop Sequence"
          }
        },
        "required": ["stop_reason", "stop_sequence"],
        "title": "MessageDelta",
        "type": "object"
      },
      "MessageDeltaEvent": {
        "properties": {
          "type": {
            "const": "message_delta",
            "default": "message_delta",
            "enum": ["message_delta"],
            "title": "Type",
            "type": "string"
          },
          "delta": { "$ref": "#/components/schemas/MessageDelta" },
          "usage": {
            "allOf": [{ "$ref": "#/components/schemas/MessageDeltaUsage" }],
            "description": "Billing and rate-limit usage.\n\nAnthropic's API bills and rate-limits by token counts, as tokens represent the underlying cost to our systems.\n\nUnder the hood, the API transforms requests into a format suitable for the model. The model's output then goes through a parsing stage before becoming an API response. As a result, the token counts in `usage` will not match one-to-one with the exact visible content of an API request or response.\n\nFor example, `output_tokens` will be non-zero, even for an empty string response from Claude.\n\nTotal input tokens in a request is the summation of `input_tokens`, `cache_creation_input_tokens`, and `cache_read_input_tokens`.",
            "examples": [{ "output_tokens": 503 }]
          }
        },
        "required": ["type", "delta", "usage"],
        "title": "MessageDeltaEvent",
        "type": "object",
        "x-stainless-naming": { "go": { "model_name": "MessageDeltaEvent" } }
      },
      "MessageDeltaUsage": {
        "properties": {
          "output_tokens": {
            "description": "The cumulative number of output tokens which were used.",
            "examples": [503],
            "title": "Output Tokens",
            "type": "integer"
          }
        },
        "required": ["output_tokens"],
        "title": "MessageDeltaUsage",
        "type": "object"
      },
      "MessageStartEvent": {
        "properties": {
          "type": {
            "const": "message_start",
            "default": "message_start",
            "enum": ["message_start"],
            "title": "Type",
            "type": "string"
          },
          "message": { "$ref": "#/components/schemas/Message" }
        },
        "required": ["type", "message"],
        "title": "MessageStartEvent",
        "type": "object",
        "x-stainless-naming": { "go": { "model_name": "MessageStartEvent" } }
      },
      "MessageStopEvent": {
        "properties": {
          "type": {
            "const": "message_stop",
            "default": "message_stop",
            "enum": ["message_stop"],
            "title": "Type",
            "type": "string"
          }
        },
        "required": ["type"],
        "title": "MessageStopEvent",
        "type": "object",
        "x-stainless-naming": { "go": { "model_name": "MessageStopEvent" } }
      },
      "MessageStreamEvent": {
        "discriminator": {
          "mapping": {
            "content_block_delta": "#/components/schemas/ContentBlockDeltaEvent",
            "content_block_start": "#/components/schemas/ContentBlockStartEvent",
            "content_block_stop": "#/components/schemas/ContentBlockStopEvent",
            "message_delta": "#/components/schemas/MessageDeltaEvent",
            "message_start": "#/components/schemas/MessageStartEvent",
            "message_stop": "#/components/schemas/MessageStopEvent"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/MessageStartEvent" },
          { "$ref": "#/components/schemas/MessageDeltaEvent" },
          { "$ref": "#/components/schemas/MessageStopEvent" },
          { "$ref": "#/components/schemas/ContentBlockStartEvent" },
          { "$ref": "#/components/schemas/ContentBlockDeltaEvent" },
          { "$ref": "#/components/schemas/ContentBlockStopEvent" }
        ],
        "title": "MessageStreamEvent",
        "x-stainless-naming": { "go": { "model_name": "MessageStreamEvent" } }
      },
      "Metadata": {
        "additionalProperties": false,
        "properties": {
          "user_id": {
            "anyOf": [{ "maxLength": 256, "type": "string" }, { "type": "null" }],
            "description": "An external identifier for the user who is associated with the request.\n\nThis should be a uuid, hash value, or other opaque identifier. Anthropic may use this id to help detect abuse. Do not include any identifying information such as name, email address, or phone number.",
            "examples": ["13803d75-b4b5-4c3e-b2a2-6f21399b021b"],
            "title": "User Id"
          }
        },
        "title": "Metadata",
        "type": "object"
      },
      "ModelInfo": {
        "properties": {
          "type": {
            "type": "string",
            "enum": ["model"],
            "const": "model",
            "title": "Type",
            "description": "Object type.\n\nFor Models, this is always `\"model\"`.",
            "default": "model"
          },
          "id": {
            "type": "string",
            "title": "Id",
            "description": "Unique model identifier.",
            "examples": ["claude-3-7-sonnet-20250219"]
          },
          "display_name": {
            "type": "string",
            "title": "Display Name",
            "description": "A human-readable name for the model.",
            "examples": ["Claude 3.7 Sonnet"]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At",
            "description": "RFC 3339 datetime string representing the time at which the model was released. May be set to an epoch value if the release date is unknown.",
            "examples": ["2025-02-19T00:00:00Z"]
          }
        },
        "type": "object",
        "required": ["type", "id", "display_name", "created_at"],
        "title": "ModelInfo"
      },
      "NotFoundError": {
        "properties": {
          "type": {
            "const": "not_found_error",
            "default": "not_found_error",
            "enum": ["not_found_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Not found", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "NotFoundError",
        "type": "object"
      },
      "OverloadedError": {
        "properties": {
          "type": {
            "const": "overloaded_error",
            "default": "overloaded_error",
            "enum": ["overloaded_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Overloaded", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "OverloadedError",
        "type": "object"
      },
      "PermissionError": {
        "properties": {
          "type": {
            "const": "permission_error",
            "default": "permission_error",
            "enum": ["permission_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Permission denied", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "PermissionError",
        "type": "object"
      },
      "PlainTextSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "text", "enum": ["text"], "title": "Type", "type": "string" },
          "media_type": {
            "const": "text/plain",
            "enum": ["text/plain"],
            "title": "Media Type",
            "type": "string"
          },
          "data": { "title": "Data", "type": "string" }
        },
        "required": ["type", "media_type", "data"],
        "title": "PlainTextSource",
        "type": "object"
      },
      "RateLimitError": {
        "properties": {
          "type": {
            "const": "rate_limit_error",
            "default": "rate_limit_error",
            "enum": ["rate_limit_error"],
            "title": "Type",
            "type": "string"
          },
          "message": { "default": "Rate limited", "title": "Message", "type": "string" }
        },
        "required": ["type", "message"],
        "title": "RateLimitError",
        "type": "object"
      },
      "RequestCharLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "char_location", "enum": ["char_location"], "title": "Type", "type": "string" },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "maxLength": 255, "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_char_index": { "minimum": 0, "title": "Start Char Index", "type": "integer" },
          "end_char_index": { "title": "End Char Index", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_char_index",
          "end_char_index"
        ],
        "title": "RequestCharLocationCitation",
        "type": "object"
      },
      "RequestCitationsConfig": {
        "additionalProperties": false,
        "properties": { "enabled": { "title": "Enabled", "type": "boolean" } },
        "title": "RequestCitationsConfig",
        "type": "object"
      },
      "RequestContentBlockLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "content_block_location",
            "enum": ["content_block_location"],
            "title": "Type",
            "type": "string"
          },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "maxLength": 255, "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_block_index": { "minimum": 0, "title": "Start Block Index", "type": "integer" },
          "end_block_index": { "title": "End Block Index", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_block_index",
          "end_block_index"
        ],
        "title": "RequestContentBlockLocationCitation",
        "type": "object"
      },
      "RequestCounts": {
        "properties": {
          "processing": {
            "type": "integer",
            "title": "Processing",
            "description": "Number of requests in the Message Batch that are processing.",
            "default": 0,
            "examples": [100]
          },
          "succeeded": {
            "type": "integer",
            "title": "Succeeded",
            "description": "Number of requests in the Message Batch that have completed successfully.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "default": 0,
            "examples": [50]
          },
          "errored": {
            "type": "integer",
            "title": "Errored",
            "description": "Number of requests in the Message Batch that encountered an error.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "default": 0,
            "examples": [30]
          },
          "canceled": {
            "type": "integer",
            "title": "Canceled",
            "description": "Number of requests in the Message Batch that have been canceled.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "default": 0,
            "examples": [10]
          },
          "expired": {
            "type": "integer",
            "title": "Expired",
            "description": "Number of requests in the Message Batch that have expired.\n\nThis is zero until processing of the entire Message Batch has ended.",
            "default": 0,
            "examples": [10]
          }
        },
        "type": "object",
        "required": ["processing", "succeeded", "errored", "canceled", "expired"],
        "title": "RequestCounts"
      },
      "RequestDocumentBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/CacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/CacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "document", "enum": ["document"], "title": "Type", "type": "string" },
          "source": {
            "discriminator": {
              "mapping": {
                "base64": "#/components/schemas/Base64PDFSource",
                "content": "#/components/schemas/ContentBlockSource",
                "text": "#/components/schemas/PlainTextSource",
                "url": "#/components/schemas/URLPDFSource"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/Base64PDFSource" },
              { "$ref": "#/components/schemas/PlainTextSource" },
              { "$ref": "#/components/schemas/ContentBlockSource" },
              { "$ref": "#/components/schemas/URLPDFSource" }
            ],
            "title": "Source"
          },
          "title": {
            "anyOf": [{ "maxLength": 500, "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Title"
          },
          "context": {
            "anyOf": [{ "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Context"
          },
          "citations": { "$ref": "#/components/schemas/RequestCitationsConfig" }
        },
        "required": ["type", "source"],
        "title": "RequestDocumentBlock",
        "type": "object"
      },
      "RequestImageBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/CacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/CacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "image", "enum": ["image"], "title": "Type", "type": "string" },
          "source": {
            "discriminator": {
              "mapping": {
                "base64": "#/components/schemas/Base64ImageSource",
                "url": "#/components/schemas/URLImageSource"
              },
              "propertyName": "type"
            },
            "oneOf": [
              { "$ref": "#/components/schemas/Base64ImageSource" },
              { "$ref": "#/components/schemas/URLImageSource" }
            ],
            "title": "Source"
          }
        },
        "required": ["type", "source"],
        "title": "RequestImageBlock",
        "type": "object"
      },
      "RequestPageLocationCitation": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "page_location", "enum": ["page_location"], "title": "Type", "type": "string" },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "maxLength": 255, "minLength": 1, "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_page_number": { "minimum": 1, "title": "Start Page Number", "type": "integer" },
          "end_page_number": { "title": "End Page Number", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_page_number",
          "end_page_number"
        ],
        "title": "RequestPageLocationCitation",
        "type": "object"
      },
      "RequestRedactedThinkingBlock": {
        "additionalProperties": false,
        "properties": {
          "type": {
            "const": "redacted_thinking",
            "enum": ["redacted_thinking"],
            "title": "Type",
            "type": "string"
          },
          "data": { "title": "Data", "type": "string" }
        },
        "required": ["type", "data"],
        "title": "RequestRedactedThinkingBlock",
        "type": "object"
      },
      "RequestTextBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/CacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/CacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "citations": {
            "anyOf": [
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "char_location": "#/components/schemas/RequestCharLocationCitation",
                      "content_block_location": "#/components/schemas/RequestContentBlockLocationCitation",
                      "page_location": "#/components/schemas/RequestPageLocationCitation"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    { "$ref": "#/components/schemas/RequestCharLocationCitation" },
                    { "$ref": "#/components/schemas/RequestPageLocationCitation" },
                    { "$ref": "#/components/schemas/RequestContentBlockLocationCitation" }
                  ]
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "title": "Citations"
          },
          "text": { "minLength": 1, "title": "Text", "type": "string" },
          "type": { "const": "text", "enum": ["text"], "title": "Type", "type": "string" }
        },
        "required": ["text", "type"],
        "title": "RequestTextBlock",
        "type": "object"
      },
      "RequestThinkingBlock": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "thinking", "enum": ["thinking"], "title": "Type", "type": "string" },
          "thinking": { "title": "Thinking", "type": "string" },
          "signature": { "title": "Signature", "type": "string" }
        },
        "required": ["type", "thinking", "signature"],
        "title": "RequestThinkingBlock",
        "type": "object"
      },
      "RequestToolResultBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/CacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/CacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "tool_result", "enum": ["tool_result"], "title": "Type", "type": "string" },
          "tool_use_id": { "pattern": "^[a-zA-Z0-9_-]+$", "title": "Tool Use Id", "type": "string" },
          "is_error": { "title": "Is Error", "type": "boolean" },
          "content": {
            "anyOf": [
              { "type": "string", "x-stainless-skip": ["go", "cli"] },
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "image": "#/components/schemas/RequestImageBlock",
                      "text": "#/components/schemas/RequestTextBlock"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    { "$ref": "#/components/schemas/RequestTextBlock" },
                    { "$ref": "#/components/schemas/RequestImageBlock" }
                  ],
                  "title": "Block"
                },
                "type": "array",
                "x-stainless-naming": {
                  "python": { "type_name": "Content" },
                  "ruby": { "type_name": "Content" }
                }
              }
            ],
            "title": "Content"
          }
        },
        "required": ["type", "tool_use_id"],
        "title": "RequestToolResultBlock",
        "type": "object"
      },
      "RequestToolUseBlock": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/CacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/CacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": { "const": "tool_use", "enum": ["tool_use"], "title": "Type", "type": "string" },
          "id": { "pattern": "^[a-zA-Z0-9_-]+$", "title": "Id", "type": "string" },
          "name": {
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,64}$",
            "title": "Name",
            "type": "string"
          },
          "input": { "title": "Input", "type": "object" }
        },
        "required": ["type", "id", "name", "input"],
        "title": "RequestToolUseBlock",
        "type": "object"
      },
      "ResponseCharLocationCitation": {
        "properties": {
          "type": {
            "const": "char_location",
            "default": "char_location",
            "enum": ["char_location"],
            "title": "Type",
            "type": "string"
          },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_char_index": { "minimum": 0, "title": "Start Char Index", "type": "integer" },
          "end_char_index": { "title": "End Char Index", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_char_index",
          "end_char_index"
        ],
        "title": "ResponseCharLocationCitation",
        "type": "object"
      },
      "ResponseContentBlockLocationCitation": {
        "properties": {
          "type": {
            "const": "content_block_location",
            "default": "content_block_location",
            "enum": ["content_block_location"],
            "title": "Type",
            "type": "string"
          },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_block_index": { "minimum": 0, "title": "Start Block Index", "type": "integer" },
          "end_block_index": { "title": "End Block Index", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_block_index",
          "end_block_index"
        ],
        "title": "ResponseContentBlockLocationCitation",
        "type": "object"
      },
      "ResponsePageLocationCitation": {
        "properties": {
          "type": {
            "const": "page_location",
            "default": "page_location",
            "enum": ["page_location"],
            "title": "Type",
            "type": "string"
          },
          "cited_text": { "title": "Cited Text", "type": "string" },
          "document_index": { "minimum": 0, "title": "Document Index", "type": "integer" },
          "document_title": {
            "anyOf": [{ "type": "string" }, { "type": "null" }],
            "title": "Document Title"
          },
          "start_page_number": { "minimum": 1, "title": "Start Page Number", "type": "integer" },
          "end_page_number": { "title": "End Page Number", "type": "integer" }
        },
        "required": [
          "type",
          "cited_text",
          "document_index",
          "document_title",
          "start_page_number",
          "end_page_number"
        ],
        "title": "ResponsePageLocationCitation",
        "type": "object"
      },
      "ResponseRedactedThinkingBlock": {
        "properties": {
          "type": {
            "const": "redacted_thinking",
            "default": "redacted_thinking",
            "enum": ["redacted_thinking"],
            "title": "Type",
            "type": "string"
          },
          "data": { "title": "Data", "type": "string" }
        },
        "required": ["type", "data"],
        "title": "ResponseRedactedThinkingBlock",
        "type": "object"
      },
      "ResponseTextBlock": {
        "properties": {
          "type": { "const": "text", "default": "text", "enum": ["text"], "title": "Type", "type": "string" },
          "text": { "maxLength": 5000000, "minLength": 0, "title": "Text", "type": "string" },
          "citations": {
            "anyOf": [
              {
                "items": {
                  "discriminator": {
                    "mapping": {
                      "char_location": "#/components/schemas/ResponseCharLocationCitation",
                      "content_block_location": "#/components/schemas/ResponseContentBlockLocationCitation",
                      "page_location": "#/components/schemas/ResponsePageLocationCitation"
                    },
                    "propertyName": "type"
                  },
                  "oneOf": [
                    { "$ref": "#/components/schemas/ResponseCharLocationCitation" },
                    { "$ref": "#/components/schemas/ResponsePageLocationCitation" },
                    { "$ref": "#/components/schemas/ResponseContentBlockLocationCitation" }
                  ]
                },
                "type": "array"
              },
              { "type": "null" }
            ],
            "default": null,
            "description": "Citations supporting the text block.\n\nThe type of citation returned will depend on the type of document being cited. Citing a PDF results in `page_location`, plain text results in `char_location`, and content document results in `content_block_location`.",
            "title": "Citations"
          }
        },
        "required": ["type", "text", "citations"],
        "title": "ResponseTextBlock",
        "type": "object"
      },
      "ResponseThinkingBlock": {
        "properties": {
          "type": {
            "const": "thinking",
            "default": "thinking",
            "enum": ["thinking"],
            "title": "Type",
            "type": "string"
          },
          "thinking": { "title": "Thinking", "type": "string" },
          "signature": { "title": "Signature", "type": "string" }
        },
        "required": ["type", "thinking", "signature"],
        "title": "ResponseThinkingBlock",
        "type": "object"
      },
      "ResponseToolUseBlock": {
        "properties": {
          "type": {
            "const": "tool_use",
            "default": "tool_use",
            "enum": ["tool_use"],
            "title": "Type",
            "type": "string"
          },
          "id": { "pattern": "^[a-zA-Z0-9_-]+$", "title": "Id", "type": "string" },
          "name": { "minLength": 1, "title": "Name", "type": "string" },
          "input": { "title": "Input", "type": "object" }
        },
        "required": ["type", "id", "name", "input"],
        "title": "ResponseToolUseBlock",
        "type": "object"
      },
      "SignatureContentBlockDelta": {
        "properties": {
          "type": {
            "const": "signature_delta",
            "default": "signature_delta",
            "enum": ["signature_delta"],
            "title": "Type",
            "type": "string"
          },
          "signature": { "title": "Signature", "type": "string" }
        },
        "required": ["type", "signature"],
        "title": "SignatureContentBlockDelta",
        "type": "object"
      },
      "SucceededResult": {
        "properties": {
          "type": {
            "const": "succeeded",
            "default": "succeeded",
            "enum": ["succeeded"],
            "title": "Type",
            "type": "string"
          },
          "message": { "$ref": "#/components/schemas/Message" }
        },
        "required": ["type", "message"],
        "title": "SucceededResult",
        "type": "object"
      },
      "TextContentBlockDelta": {
        "properties": {
          "type": {
            "const": "text_delta",
            "default": "text_delta",
            "enum": ["text_delta"],
            "title": "Type",
            "type": "string"
          },
          "text": { "title": "Text", "type": "string" }
        },
        "required": ["type", "text"],
        "title": "TextContentBlockDelta",
        "type": "object"
      },
      "TextEditor_20250124": {
        "additionalProperties": false,
        "properties": {
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/CacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/CacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          },
          "type": {
            "const": "text_editor_20250124",
            "enum": ["text_editor_20250124"],
            "title": "Type",
            "type": "string"
          },
          "name": {
            "const": "str_replace_editor",
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "enum": ["str_replace_editor"],
            "title": "Name",
            "type": "string"
          }
        },
        "required": ["type", "name"],
        "title": "TextEditor_20250124",
        "type": "object"
      },
      "ThinkingConfigDisabled": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "disabled", "enum": ["disabled"], "title": "Type", "type": "string" }
        },
        "required": ["type"],
        "title": "ThinkingConfigDisabled",
        "type": "object"
      },
      "ThinkingConfigEnabled": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "enabled", "enum": ["enabled"], "title": "Type", "type": "string" },
          "budget_tokens": {
            "description": "Determines how many tokens Claude can use for its internal reasoning process. Larger budgets can enable more thorough analysis for complex problems, improving response quality. \n\nMust be ≥1024 and less than `max_tokens`.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details.",
            "minimum": 1024,
            "title": "Budget Tokens",
            "type": "integer"
          }
        },
        "required": ["type", "budget_tokens"],
        "title": "ThinkingConfigEnabled",
        "type": "object"
      },
      "ThinkingContentBlockDelta": {
        "properties": {
          "type": {
            "const": "thinking_delta",
            "default": "thinking_delta",
            "enum": ["thinking_delta"],
            "title": "Type",
            "type": "string"
          },
          "thinking": { "title": "Thinking", "type": "string" }
        },
        "required": ["type", "thinking"],
        "title": "ThinkingContentBlockDelta",
        "type": "object"
      },
      "Tool": {
        "additionalProperties": false,
        "properties": {
          "description": {
            "description": "Description of what this tool does.\n\nTool descriptions should be as detailed as possible. The more information that the model has about what the tool is and how to use it, the better it will perform. You can use natural language descriptions to reinforce important aspects of the tool input JSON schema.",
            "examples": ["Get the current weather in a given location"],
            "title": "Description",
            "type": "string"
          },
          "name": {
            "description": "Name of the tool.\n\nThis is how the tool will be called by the model and in tool_use blocks.",
            "maxLength": 64,
            "minLength": 1,
            "pattern": "^[a-zA-Z0-9_-]{1,64}$",
            "title": "Name",
            "type": "string"
          },
          "input_schema": {
            "allOf": [{ "$ref": "#/components/schemas/InputSchema" }],
            "description": "[JSON schema](https://json-schema.org/draft/2020-12) for this tool's input.\n\nThis defines the shape of the `input` that your tool accepts and that the model will produce.",
            "examples": [
              {
                "properties": {
                  "location": {
                    "description": "The city and state, e.g. San Francisco, CA",
                    "type": "string"
                  },
                  "unit": {
                    "description": "Unit for the output - one of (celsius, fahrenheit)",
                    "type": "string"
                  }
                },
                "required": ["location"],
                "type": "object"
              }
            ],
            "x-stainless-skip": ["cli"]
          },
          "cache_control": {
            "anyOf": [
              {
                "discriminator": {
                  "mapping": { "ephemeral": "#/components/schemas/CacheControlEphemeral" },
                  "propertyName": "type"
                },
                "oneOf": [{ "$ref": "#/components/schemas/CacheControlEphemeral" }]
              },
              { "type": "null" }
            ],
            "title": "Cache Control"
          }
        },
        "required": ["name", "input_schema"],
        "title": "Tool",
        "type": "object"
      },
      "ToolChoiceAny": {
        "additionalProperties": false,
        "description": "The model will use any available tools.",
        "properties": {
          "type": { "const": "any", "enum": ["any"], "title": "Type", "type": "string" },
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceAny",
        "type": "object"
      },
      "ToolChoiceAuto": {
        "additionalProperties": false,
        "description": "The model will automatically decide whether to use tools.",
        "properties": {
          "type": { "const": "auto", "enum": ["auto"], "title": "Type", "type": "string" },
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output at most one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          }
        },
        "required": ["type"],
        "title": "ToolChoiceAuto",
        "type": "object"
      },
      "ToolChoiceTool": {
        "additionalProperties": false,
        "description": "The model will use the specified tool with `tool_choice.name`.",
        "properties": {
          "type": { "const": "tool", "enum": ["tool"], "title": "Type", "type": "string" },
          "name": { "description": "The name of the tool to use.", "title": "Name", "type": "string" },
          "disable_parallel_tool_use": {
            "description": "Whether to disable parallel tool use.\n\nDefaults to `false`. If set to `true`, the model will output exactly one tool use.",
            "title": "Disable Parallel Tool Use",
            "type": "boolean"
          }
        },
        "required": ["type", "name"],
        "title": "ToolChoiceTool",
        "type": "object"
      },
      "URLImageSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "url", "enum": ["url"], "title": "Type", "type": "string" },
          "url": { "title": "Url", "type": "string" }
        },
        "required": ["type", "url"],
        "title": "URLImageSource",
        "type": "object"
      },
      "URLPDFSource": {
        "additionalProperties": false,
        "properties": {
          "type": { "const": "url", "enum": ["url"], "title": "Type", "type": "string" },
          "url": { "title": "Url", "type": "string" }
        },
        "required": ["type", "url"],
        "title": "URLPDFSource",
        "type": "object"
      },
      "Usage": {
        "properties": {
          "input_tokens": {
            "description": "The number of input tokens which were used.",
            "examples": [2095],
            "minimum": 0,
            "title": "Input Tokens",
            "type": "integer"
          },
          "cache_creation_input_tokens": {
            "anyOf": [{ "minimum": 0, "type": "integer" }, { "type": "null" }],
            "default": null,
            "description": "The number of input tokens used to create the cache entry.",
            "examples": [2051],
            "title": "Cache Creation Input Tokens"
          },
          "cache_read_input_tokens": {
            "anyOf": [{ "minimum": 0, "type": "integer" }, { "type": "null" }],
            "default": null,
            "description": "The number of input tokens read from the cache.",
            "examples": [2051],
            "title": "Cache Read Input Tokens"
          },
          "output_tokens": {
            "description": "The number of output tokens which were used.",
            "examples": [503],
            "minimum": 0,
            "title": "Output Tokens",
            "type": "integer"
          }
        },
        "required": [
          "input_tokens",
          "cache_creation_input_tokens",
          "cache_read_input_tokens",
          "output_tokens"
        ],
        "title": "Usage",
        "type": "object"
      },
      "CreateMessageParamsWithoutStream": {
        "additionalProperties": false,
        "example": {
          "max_tokens": 1024,
          "messages": [{ "content": "Hello, world", "role": "user" }],
          "model": "claude-3-7-sonnet-20250219"
        },
        "properties": {
          "model": { "$ref": "#/components/schemas/Model" },
          "messages": {
            "description": "Input messages.\n\nOur models are trained to operate on alternating `user` and `assistant` conversational turns. When creating a new `Message`, you specify the prior conversational turns with the `messages` parameter, and the model then generates the next `Message` in the conversation. Consecutive `user` or `assistant` turns in your request will be combined into a single turn.\n\nEach input message must be an object with a `role` and `content`. You can specify a single `user`-role message, or you can include multiple `user` and `assistant` messages.\n\nIf the final message uses the `assistant` role, the response content will continue immediately from the content in that message. This can be used to constrain part of the model's response.\n\nExample with a single `user` message:\n\n```json\n[{\"role\": \"user\", \"content\": \"Hello, Claude\"}]\n```\n\nExample with multiple conversational turns:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"Hello there.\"},\n  {\"role\": \"assistant\", \"content\": \"Hi, I'm Claude. How can I help you?\"},\n  {\"role\": \"user\", \"content\": \"Can you explain LLMs in plain English?\"},\n]\n```\n\nExample with a partially-filled response from Claude:\n\n```json\n[\n  {\"role\": \"user\", \"content\": \"What's the Greek name for Sun? (A) Sol (B) Helios (C) Sun\"},\n  {\"role\": \"assistant\", \"content\": \"The best answer is (\"},\n]\n```\n\nEach input message `content` may be either a single `string` or an array of content blocks, where each block has a specific `type`. Using a `string` for `content` is shorthand for an array of one content block of type `\"text\"`. The following input messages are equivalent:\n\n```json\n{\"role\": \"user\", \"content\": \"Hello, Claude\"}\n```\n\n```json\n{\"role\": \"user\", \"content\": [{\"type\": \"text\", \"text\": \"Hello, Claude\"}]}\n```\n\nStarting with Claude 3 models, you can also send image content blocks:\n\n```json\n{\"role\": \"user\", \"content\": [\n  {\n    \"type\": \"image\",\n    \"source\": {\n      \"type\": \"base64\",\n      \"media_type\": \"image/jpeg\",\n      \"data\": \"/9j/4AAQSkZJRg...\",\n    }\n  },\n  {\"type\": \"text\", \"text\": \"What is in this image?\"}\n]}\n```\n\nWe currently support the `base64` source type for images, and the `image/jpeg`, `image/png`, `image/gif`, and `image/webp` media types.\n\nSee [examples](https://docs.anthropic.com/en/api/messages-examples#vision) for more input examples.\n\nNote that if you want to include a [system prompt](https://docs.anthropic.com/en/docs/system-prompts), you can use the top-level `system` parameter — there is no `\"system\"` role for input messages in the Messages API.",
            "items": { "$ref": "#/components/schemas/InputMessage" },
            "title": "Messages",
            "type": "array"
          },
          "max_tokens": {
            "description": "The maximum number of tokens to generate before stopping.\n\nNote that our models may stop _before_ reaching this maximum. This parameter only specifies the absolute maximum number of tokens to generate.\n\nDifferent models have different maximum values for this parameter.  See [models](https://docs.anthropic.com/en/docs/models-overview) for details.",
            "examples": [1024],
            "minimum": 1,
            "title": "Max Tokens",
            "type": "integer"
          },
          "metadata": {
            "allOf": [{ "$ref": "#/components/schemas/Metadata" }],
            "description": "An object describing metadata about the request."
          },
          "stop_sequences": {
            "description": "Custom text sequences that will cause the model to stop generating.\n\nOur models will normally stop when they have naturally completed their turn, which will result in a response `stop_reason` of `\"end_turn\"`.\n\nIf you want the model to stop generating when it encounters custom strings of text, you can use the `stop_sequences` parameter. If the model encounters one of the custom sequences, the response `stop_reason` value will be `\"stop_sequence\"` and the response `stop_sequence` value will contain the matched stop sequence.",
            "items": { "type": "string" },
            "title": "Stop Sequences",
            "type": "array"
          },
          "system": {
            "anyOf": [
              { "type": "string" },
              { "items": { "$ref": "#/components/schemas/RequestTextBlock" }, "type": "array" }
            ],
            "description": "System prompt.\n\nA system prompt is a way of providing context and instructions to Claude, such as specifying a particular goal or role. See our [guide to system prompts](https://docs.anthropic.com/en/docs/system-prompts).",
            "examples": [
              [{ "text": "Today's date is 2024-06-01.", "type": "text" }],
              "Today's date is 2023-01-01."
            ],
            "title": "System"
          },
          "temperature": {
            "description": "Amount of randomness injected into the response.\n\nDefaults to `1.0`. Ranges from `0.0` to `1.0`. Use `temperature` closer to `0.0` for analytical / multiple choice, and closer to `1.0` for creative and generative tasks.\n\nNote that even with `temperature` of `0.0`, the results will not be fully deterministic.",
            "examples": [1],
            "maximum": 1,
            "minimum": 0,
            "title": "Temperature",
            "type": "number"
          },
          "thinking": { "$ref": "#/components/schemas/ThinkingConfigParam" },
          "tool_choice": { "$ref": "#/components/schemas/ToolChoice" },
          "tools": {
            "description": "Definitions of tools that the model may use.\n\nIf you include `tools` in your API request, the model may return `tool_use` content blocks that represent the model's use of those tools. You can then run those tools using the tool input generated by the model and then optionally return results back to the model using `tool_result` content blocks.\n\nEach tool definition includes:\n\n* `name`: Name of the tool.\n* `description`: Optional, but strongly-recommended description of the tool.\n* `input_schema`: [JSON schema](https://json-schema.org/draft/2020-12) for the tool `input` shape that the model will produce in `tool_use` output content blocks.\n\nFor example, if you defined `tools` as:\n\n```json\n[\n  {\n    \"name\": \"get_stock_price\",\n    \"description\": \"Get the current stock price for a given ticker symbol.\",\n    \"input_schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"ticker\": {\n          \"type\": \"string\",\n          \"description\": \"The stock ticker symbol, e.g. AAPL for Apple Inc.\"\n        }\n      },\n      \"required\": [\"ticker\"]\n    }\n  }\n]\n```\n\nAnd then asked the model \"What's the S&P 500 at today?\", the model might produce `tool_use` content blocks in the response like this:\n\n```json\n[\n  {\n    \"type\": \"tool_use\",\n    \"id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"name\": \"get_stock_price\",\n    \"input\": { \"ticker\": \"^GSPC\" }\n  }\n]\n```\n\nYou might then run your `get_stock_price` tool with `{\"ticker\": \"^GSPC\"}` as an input, and return the following back to the model in a subsequent `user` message:\n\n```json\n[\n  {\n    \"type\": \"tool_result\",\n    \"tool_use_id\": \"toolu_01D7FLrfh4GYq7yT1ULFeyMV\",\n    \"content\": \"259.75 USD\"\n  }\n]\n```\n\nTools can be used for workflows that include running client-side tools and functions, or more generally whenever you want the model to produce a particular JSON structure of output.\n\nSee our [guide](https://docs.anthropic.com/en/docs/tool-use) for more details.",
            "examples": [
              {
                "description": "Get the current weather in a given location",
                "input_schema": {
                  "properties": {
                    "location": {
                      "description": "The city and state, e.g. San Francisco, CA",
                      "type": "string"
                    },
                    "unit": {
                      "description": "Unit for the output - one of (celsius, fahrenheit)",
                      "type": "string"
                    }
                  },
                  "required": ["location"],
                  "type": "object"
                },
                "name": "get_weather"
              }
            ],
            "items": {
              "oneOf": [
                { "$ref": "#/components/schemas/Tool" },
                { "$ref": "#/components/schemas/BashTool_20250124" },
                { "$ref": "#/components/schemas/TextEditor_20250124" }
              ]
            },
            "title": "Tools",
            "type": "array"
          },
          "top_k": {
            "description": "Only sample from the top K options for each subsequent token.\n\nUsed to remove \"long tail\" low probability responses. [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [5],
            "minimum": 0,
            "title": "Top K",
            "type": "integer"
          },
          "top_p": {
            "description": "Use nucleus sampling.\n\nIn nucleus sampling, we compute the cumulative distribution over all the options for each subsequent token in decreasing probability order and cut it off once it reaches a particular probability specified by `top_p`. You should either alter `temperature` or `top_p`, but not both.\n\nRecommended for advanced use cases only. You usually only need to use `temperature`.",
            "examples": [0.7],
            "maximum": 1,
            "minimum": 0,
            "title": "Top P",
            "type": "number"
          }
        },
        "required": ["model", "messages", "max_tokens"],
        "title": "CreateMessageParams",
        "type": "object"
      },
      "AnthropicBeta": {
        "anyOf": [
          { "type": "string" },
          {
            "type": "string",
            "enum": [
              "message-batches-2024-09-24",
              "prompt-caching-2024-07-31",
              "computer-use-2024-10-22",
              "computer-use-2025-01-24",
              "pdfs-2024-09-25",
              "token-counting-2024-11-01",
              "token-efficient-tools-2025-02-19",
              "output-128k-2025-02-19"
            ],
            "x-stainless-nominal": false
          }
        ]
      },
      "ThinkingConfigParam": {
        "description": "Configuration for enabling Claude's extended thinking. \n\nWhen enabled, responses include `thinking` content blocks showing Claude's thinking process before the final answer. Requires a minimum budget of 1,024 tokens and counts towards your `max_tokens` limit.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details.",
        "discriminator": {
          "mapping": {
            "disabled": "#/components/schemas/ThinkingConfigDisabled",
            "enabled": "#/components/schemas/ThinkingConfigEnabled"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/ThinkingConfigEnabled" },
          { "$ref": "#/components/schemas/ThinkingConfigDisabled" }
        ],
        "title": "Thinking"
      },
      "BetaThinkingConfigParam": {
        "description": "Configuration for enabling Claude's extended thinking. \n\nWhen enabled, responses include `thinking` content blocks showing Claude's thinking process before the final answer. Requires a minimum budget of 1,024 tokens and counts towards your `max_tokens` limit.\n\nSee [extended thinking](https://docs.anthropic.com/en/docs/build-with-claude/extended-thinking) for details.",
        "discriminator": {
          "mapping": {
            "disabled": "#/components/schemas/BetaThinkingConfigDisabled",
            "enabled": "#/components/schemas/BetaThinkingConfigEnabled"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/BetaThinkingConfigEnabled" },
          { "$ref": "#/components/schemas/BetaThinkingConfigDisabled" }
        ],
        "title": "Thinking"
      },
      "ToolChoice": {
        "description": "How the model should use the provided tools. The model can use a specific tool, any available tool, or decide by itself.",
        "discriminator": {
          "mapping": {
            "any": "#/components/schemas/ToolChoiceAny",
            "auto": "#/components/schemas/ToolChoiceAuto",
            "tool": "#/components/schemas/ToolChoiceTool"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/ToolChoiceAuto" },
          { "$ref": "#/components/schemas/ToolChoiceAny" },
          { "$ref": "#/components/schemas/ToolChoiceTool" }
        ],
        "title": "Tool Choice"
      },
      "BetaToolChoice": {
        "description": "How the model should use the provided tools. The model can use a specific tool, any available tool, or decide by itself.",
        "discriminator": {
          "mapping": {
            "any": "#/components/schemas/BetaToolChoiceAny",
            "auto": "#/components/schemas/BetaToolChoiceAuto",
            "tool": "#/components/schemas/BetaToolChoiceTool"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/BetaToolChoiceAuto" },
          { "$ref": "#/components/schemas/BetaToolChoiceAny" },
          { "$ref": "#/components/schemas/BetaToolChoiceTool" }
        ],
        "title": "Tool Choice"
      },
      "ContentBlock": {
        "discriminator": {
          "mapping": {
            "redacted_thinking": "#/components/schemas/ResponseRedactedThinkingBlock",
            "text": "#/components/schemas/ResponseTextBlock",
            "thinking": "#/components/schemas/ResponseThinkingBlock",
            "tool_use": "#/components/schemas/ResponseToolUseBlock"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/ResponseTextBlock" },
          { "$ref": "#/components/schemas/ResponseToolUseBlock" },
          { "$ref": "#/components/schemas/ResponseThinkingBlock" },
          { "$ref": "#/components/schemas/ResponseRedactedThinkingBlock" }
        ]
      },
      "InputContentBlock": {
        "discriminator": {
          "mapping": {
            "document": "#/components/schemas/RequestDocumentBlock",
            "image": "#/components/schemas/RequestImageBlock",
            "redacted_thinking": "#/components/schemas/RequestRedactedThinkingBlock",
            "text": "#/components/schemas/RequestTextBlock",
            "thinking": "#/components/schemas/RequestThinkingBlock",
            "tool_result": "#/components/schemas/RequestToolResultBlock",
            "tool_use": "#/components/schemas/RequestToolUseBlock"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/RequestTextBlock" },
          { "$ref": "#/components/schemas/RequestImageBlock" },
          { "$ref": "#/components/schemas/RequestToolUseBlock" },
          { "$ref": "#/components/schemas/RequestToolResultBlock" },
          { "$ref": "#/components/schemas/RequestDocumentBlock" },
          { "$ref": "#/components/schemas/RequestThinkingBlock" },
          { "$ref": "#/components/schemas/RequestRedactedThinkingBlock" }
        ],
        "x-stainless-python-extend-union": ["ContentBlock"],
        "x-stainless-python-extend-union-imports": ["from .content_block import ContentBlock"]
      },
      "BetaContentBlock": {
        "discriminator": {
          "mapping": {
            "redacted_thinking": "#/components/schemas/BetaResponseRedactedThinkingBlock",
            "text": "#/components/schemas/BetaResponseTextBlock",
            "thinking": "#/components/schemas/BetaResponseThinkingBlock",
            "tool_use": "#/components/schemas/BetaResponseToolUseBlock"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/BetaResponseTextBlock" },
          { "$ref": "#/components/schemas/BetaResponseToolUseBlock" },
          { "$ref": "#/components/schemas/BetaResponseThinkingBlock" },
          { "$ref": "#/components/schemas/BetaResponseRedactedThinkingBlock" }
        ]
      },
      "BetaInputContentBlock": {
        "discriminator": {
          "mapping": {
            "document": "#/components/schemas/BetaRequestDocumentBlock",
            "image": "#/components/schemas/BetaRequestImageBlock",
            "redacted_thinking": "#/components/schemas/BetaRequestRedactedThinkingBlock",
            "text": "#/components/schemas/BetaRequestTextBlock",
            "thinking": "#/components/schemas/BetaRequestThinkingBlock",
            "tool_result": "#/components/schemas/BetaRequestToolResultBlock",
            "tool_use": "#/components/schemas/BetaRequestToolUseBlock"
          },
          "propertyName": "type"
        },
        "oneOf": [
          { "$ref": "#/components/schemas/BetaRequestTextBlock" },
          { "$ref": "#/components/schemas/BetaRequestImageBlock" },
          { "$ref": "#/components/schemas/BetaRequestToolUseBlock" },
          { "$ref": "#/components/schemas/BetaRequestToolResultBlock" },
          { "$ref": "#/components/schemas/BetaRequestDocumentBlock" },
          { "$ref": "#/components/schemas/BetaRequestThinkingBlock" },
          { "$ref": "#/components/schemas/BetaRequestRedactedThinkingBlock" }
        ]
      },
      "Model": {
        "type": null,
        "title": "Model",
        "description": "The model that will complete your prompt.\\n\\nSee [models](https://docs.anthropic.com/en/docs/models-overview) for additional details and options.",
        "anyOf": [
          { "type": "string" },
          {
            "const": "claude-3-7-sonnet-latest",
            "description": "Our most intelligent model",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-7-sonnet-20250219",
            "description": "Our most intelligent model",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-5-haiku-latest",
            "description": "Fastest and most compact model for near-instant responsiveness",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-5-haiku-20241022",
            "description": "Our fastest model",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-5-sonnet-latest",
            "description": "Our previous most intelligent model",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-5-sonnet-20241022",
            "description": "Our previous most intelligent model",
            "x-stainless-nominal": false
          },
          { "const": "claude-3-5-sonnet-20240620", "x-stainless-nominal": false },
          {
            "const": "claude-3-opus-latest",
            "description": "Excels at writing and complex tasks",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-opus-20240229",
            "description": "Excels at writing and complex tasks",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-sonnet-20240229",
            "description": "Balance of speed and intelligence",
            "deprecated": true,
            "x-stainless-deprecation-message": "Will reach end-of-life on July 21st, 2025. Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-3-haiku-20240307",
            "description": "Our previous most fast and cost-effective",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-2.1",
            "deprecated": true,
            "x-stainless-deprecation-message": "Will reach end-of-life on July 21st, 2025. Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.",
            "x-stainless-nominal": false
          },
          {
            "const": "claude-2.0",
            "deprecated": true,
            "x-stainless-deprecation-message": "Will reach end-of-life on July 21st, 2025. Please migrate to a newer model. Visit https://docs.anthropic.com/en/docs/resources/model-deprecations for more information.",
            "x-stainless-nominal": false
          }
        ]
      }
    }
  },
  "servers": [{ "url": "https://api.anthropic.com" }]
}
